{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1534944987690},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1534944987690},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1534944987690},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1534944987692},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1534944987692},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1534944987693},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1534944987693},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1534944987693},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1534944987693},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1534944987694},{"_id":"themes/next/README.md","hash":"3d438555ca87b1d247536b3b56fc0672eb001518","modified":1534944987694},{"_id":"themes/next/_config - 副本.yml","hash":"6c49705ef11f012db63969e2bdedbd2e17225743","modified":1534944987695},{"_id":"themes/next/_config.yml","hash":"d581993b2e1abe7aa4bc22d89974ba5fa34033b7","modified":1534957962132},{"_id":"themes/next/bower.json","hash":"74115626b419f40126e07bb0bbfc5e6ab163f222","modified":1534944987716},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1534944987723},{"_id":"themes/next/package.json","hash":"edcba128994bb34491334db3a49d5c3a50976cf3","modified":1534944987759},{"_id":"source/_posts/2018-08-20-one.md","hash":"1205b97dcc9db4a0b47f533481c188b13089fa33","modified":1534944987589},{"_id":"source/_posts/2018-08-20-shujukujichu1.md","hash":"562dce78f34a6bcf5238dde643305b39c6304b12","modified":1534947004287},{"_id":"source/_posts/2018-08-20-第一篇文章.md~","hash":"ada8e0c12a376b578c5cf9548b3ddbb5401ddd13","modified":1534944987589},{"_id":"source/_posts/2018-08-21-rlwrap.md","hash":"d06c91601642f05ee8505f6a232d4a04ba63da61","modified":1534944987590},{"_id":"source/_posts/2018-08-22-Git-changyongmingling.md","hash":"f3265797a6726a00581373ef033e0739677822c4","modified":1534946686472},{"_id":"source/_posts/2018-08-22-tools.md","hash":"ef445f7f66139f9145efa2c1067a3ab60e497e78","modified":1534949972596},{"_id":"source/_posts/726930-5079e6da8900d0e2.jpg","hash":"a2f099798543dfca2563f3cf6c0571e1bfa75332","modified":1534944987591},{"_id":"source/_posts/batjichu.md","hash":"a6920f344216f68efb6407e746ba70f0a555414a","modified":1534944987592},{"_id":"source/_posts/gitjichupeizhi.md","hash":"db3b1d397db72613a2831a6b7589b55a3f9201e6","modified":1534944987593},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1534944987593},{"_id":"source/_posts/limqfirst.md","hash":"95f651a2d2d0655d18c0303260f182b6b816aaef","modified":1534944987593},{"_id":"source/_posts/test.md","hash":"e6033cb4f4f136280465cd428ff5604dda73021e","modified":1534944987593},{"_id":"source/_posts/test.md~","hash":"7b8d33dbd4dcb4bbe4f98ac005aed9926debc0fa","modified":1534944987594},{"_id":"source/_posts/test1.md~","hash":"891a8e0c25ae0fe181200c135446fb40f4d0e855","modified":1534944987594},{"_id":"source/about/index.md","hash":"f2d932e27e0da790ba4d4ddce4bee5a645ab5ac7","modified":1534944987594},{"_id":"source/categories/index.md","hash":"d4a24c01b50d7ff10a6516c6e720120c8534d887","modified":1534944987595},{"_id":"source/categories/index.md~","hash":"1dc48abdc085355dc395c8757c23b84f8d530267","modified":1534944987595},{"_id":"source/tags/index.md","hash":"dd22629041e35a4c870d25013d2e9c49eeeefd55","modified":1534944987595},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"792b4e3c3544d51164e8a414219dc1b388dc65dc","modified":1534944987691},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"054be54a22f3aea601a29334c7577ffa793f1a48","modified":1534944987691},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1534944987691},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1534944987692},{"_id":"themes/next/.github/stale.yml","hash":"1bbdd20d025010ec57225712be82988a26485836","modified":1534944987692},{"_id":"themes/next/bak.git/FETCH_HEAD","hash":"2afd4121da9d63fd01a81ccf4f4252fc590f6ae1","modified":1534944987696},{"_id":"themes/next/bak.git/HEAD","hash":"c2c77a6e76508eb177da9f2626170bec0486228a","modified":1534944987696},{"_id":"themes/next/bak.git/config","hash":"0c7984aef9bbd2b16e595db3887ccc112c445d3f","modified":1534944987696},{"_id":"themes/next/bak.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1534944987696},{"_id":"themes/next/bak.git/index","hash":"cd756f625445e356841d1a685a85c0365022b3c9","modified":1534944987700},{"_id":"themes/next/bak.git/packed-refs","hash":"1ec1b1c69028543c76b8b255e7bf4e4f652e7b0a","modified":1534944987715},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1534944987717},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1534944987717},{"_id":"themes/next/docs/DATA-FILES.md","hash":"de63aa8466ee8c4d4b418dfbe4e8f27fa117751d","modified":1534944987718},{"_id":"themes/next/docs/INSTALLATION.md","hash":"01a383fd1d46752d4b4f22047b535127b44adb75","modified":1534944987718},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1534944987718},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1534944987719},{"_id":"themes/next/languages/de.yml","hash":"92964c8ed184fa959a5e2001e7c6d9a07d7a4344","modified":1534944987724},{"_id":"themes/next/languages/default.yml","hash":"b39706b2d22696eed6b036f4c90aa5362e331090","modified":1534944987724},{"_id":"themes/next/languages/en.yml","hash":"df63017548589b2e567647e08d736c2a7f342b12","modified":1534944987724},{"_id":"themes/next/languages/fr-FR.yml","hash":"6ee34c8103a95839207dac1201fef7a8f727d2fc","modified":1534944987724},{"_id":"themes/next/languages/id.yml","hash":"60473cc81a871ceb868c97cd3291d602fda1b338","modified":1534944987725},{"_id":"themes/next/languages/it.yml","hash":"5a8a29d145dd2cd882d52b3fbb1203c1a3540cbd","modified":1534944987725},{"_id":"themes/next/languages/ja.yml","hash":"8a3acfb56dc783f261b640dca662c0ec431fea6f","modified":1534944987725},{"_id":"themes/next/languages/ko.yml","hash":"73253087d7754a0213e2ad72de16ab5138b9ba54","modified":1534944987726},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1534944987726},{"_id":"themes/next/languages/pt-BR.yml","hash":"4d017b7b9542050b87a99931dff98889090fc781","modified":1534944987726},{"_id":"themes/next/languages/pt.yml","hash":"95585897cd108d5ff15e998cd0acdc0fba5d572c","modified":1534944987727},{"_id":"themes/next/languages/ru.yml","hash":"4ba9f4971115bce0213c437158424428e0e13d5a","modified":1534944987727},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1534944987727},{"_id":"themes/next/languages/zh-Hans.yml","hash":"5824a6f10816dd71a5f0de8c9922b0b21d564a82","modified":1534944987727},{"_id":"themes/next/languages/zh-hk.yml","hash":"54e4aa1d04ccad1e13cf08124fe5f70a930592dd","modified":1534944987728},{"_id":"themes/next/languages/zh-tw.yml","hash":"280dd00495e90b8a8c4d9351bab8ae65c78bbe87","modified":1534944987728},{"_id":"themes/next/layout/_layout.swig","hash":"51695161f08333535dd504312e453d028fb3d0dd","modified":1534944987729},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1534944987757},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1534944987757},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1534944987758},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1534944987758},{"_id":"themes/next/layout/post.swig","hash":"8e2d079b46076996cc9343213d5bf7da8178d32d","modified":1534944987758},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1534944987759},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1534944987759},{"_id":"themes/next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1534944987760},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1534944987760},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1534944987818},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1534944987818},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1534944987819},{"_id":"source/_posts/Image.png","hash":"1497cd005727341d9f4fc34ecf2a3b38294f4f58","modified":1534944987592},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534944987800},{"_id":"source/_posts/2018-08-22-Git-changyongmingling/726930-5079e6da8900d0e2.jpg","hash":"a2f099798543dfca2563f3cf6c0571e1bfa75332","modified":1534944987591},{"_id":"themes/next/bak.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1534944987697},{"_id":"themes/next/bak.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1534944987697},{"_id":"themes/next/bak.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1534944987698},{"_id":"themes/next/bak.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1534944987698},{"_id":"themes/next/bak.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1534944987698},{"_id":"themes/next/bak.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1534944987698},{"_id":"themes/next/bak.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1534944987699},{"_id":"themes/next/bak.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1534944987699},{"_id":"themes/next/bak.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1534944987699},{"_id":"themes/next/bak.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1534944987700},{"_id":"themes/next/bak.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1534944987701},{"_id":"themes/next/bak.git/logs/HEAD","hash":"c0bb6eae869509b93550f6a561fb0554d8c677df","modified":1534944987701},{"_id":"themes/next/docs/cn/DATA-FILES.md","hash":"58c58c7d98365395dba904a87f9b5f5e0b1e99cb","modified":1534944987719},{"_id":"themes/next/docs/cn/INSTALLATION.md","hash":"15b09b7cf4e4159858895e37ce334fcc96ac08d7","modified":1534944987720},{"_id":"themes/next/docs/cn/README.md","hash":"68b98e7489b8d53e8367500507b9ce43d094d48b","modified":1534944987720},{"_id":"themes/next/docs/cn/UPDATE-FROM-5.1.X.md","hash":"b6422e0e1bbb02ddd29a2f9969fc3ff709555560","modified":1534944987720},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"1f15b876c106bae74148fb526bc3b914721b8ff2","modified":1534944987722},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"43a70e456d15e9eab3753c22a5253ed2ff300ac8","modified":1534944987722},{"_id":"themes/next/docs/ru/README.md","hash":"95a904683da99daf1473fb7c1ffe8a6322ef8fb9","modified":1534944987722},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1534944987723},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1534944987728},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1534944987729},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"01a2f46b710b32a930556b157c192ce772563951","modified":1534944987729},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1534944987730},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1534944987730},{"_id":"themes/next/layout/_macro/post.swig","hash":"307f63a4b38bc489d14fe79a0f26565fc8f5ad76","modified":1534944987731},{"_id":"themes/next/layout/_macro/post.swig.bak","hash":"8cf4aab4f084cb2a5ee6ad17a43e7ea18ff347ae","modified":1534944987731},{"_id":"themes/next/layout/_macro/post.swig.chushihua0821","hash":"443aa293a1735488e838cd5896e549e35b6832aa","modified":1534944987732},{"_id":"themes/next/layout/_macro/post.swig1","hash":"eae9bc578ba3cf36757731e8471e30663fcfdad1","modified":1534944987732},{"_id":"themes/next/layout/_macro/reward.swig","hash":"aa620c582143f43ba1cb1a5e59240041a911185b","modified":1534944987732},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"43f13d75cfb37ec4ed5386bee0f737641977200b","modified":1534944987733},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"fea45ab314b9ea23edab25c2b8620f909d856b1d","modified":1534944987733},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7993e873618f12888d3ae2c3f6ba2069822e2b13","modified":1534944987733},{"_id":"themes/next/layout/_partials/footer.swig","hash":"fdc2ee35e868c98615efd4ba1965d97bcb0e4fb9","modified":1534944987734},{"_id":"themes/next/layout/_partials/head.swig","hash":"1384aaabd325eeba28772f825308bad58ab904fe","modified":1534944987734},{"_id":"themes/next/layout/_partials/header.swig","hash":"203fabaf17acfafbaf1a97d0015a6613ec71d2b0","modified":1534944987735},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1534944987735},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1534944987736},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1534944987736},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1534944987739},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1534944987739},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1534944987741},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1534944987750},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1534944987751},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1534944987751},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1534944987752},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1534944987752},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1534944987752},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1534944987761},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1534944987761},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1534944987761},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1534944987762},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1534944987762},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1534944987762},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1534944987763},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1534944987763},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1534944987763},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1534944987800},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1534944987801},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1534944987801},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1534944987801},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1534944987802},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1534944987802},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1534944987803},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1534944987803},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1534944987803},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1534944987804},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1534944987804},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1534944987804},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1534944987804},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534944987805},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1534944987805},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534944987805},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1534944987805},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1534944987806},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1534944987806},{"_id":"source/_posts/2018-08-20-shujukujichu1/Image.png","hash":"1497cd005727341d9f4fc34ecf2a3b38294f4f58","modified":1534944987589},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534944987740},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534944987740},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534944987789},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534944987789},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534944987790},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534944987798},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1534944987799},{"_id":"themes/next/bak.git/refs/heads/master","hash":"e7d5d06a97b02e9fd6141aba44a00feed39541ad","modified":1534944987715},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1534944987734},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1534944987735},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1534944987736},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1534944987736},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1534944987737},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1534944987737},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1534944987738},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1534944987738},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1534944987738},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1534944987740},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1534944987740},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1534944987741},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1534944987743},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1534944987743},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1534944987744},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1534944987744},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1534944987744},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1534944987745},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1534944987745},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1534944987745},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1534944987746},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1534944987747},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1534944987747},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1534944987747},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1534944987748},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1534944987748},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"683955d9dc806c3309c2c6b137c4fb19f089763e","modified":1534944987748},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1534944987749},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1534944987749},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1534944987749},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1534944987750},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1534944987750},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1534944987750},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1534944987753},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1534944987754},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1534944987756},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1534944987757},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1534944987789},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1534944987789},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1534944987790},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1534944987790},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1534944987798},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1534944987798},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1534944987799},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1534944987799},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1534944987806},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1534944987807},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"531cdedd7fbe8cb1dab2e4328774a9f6b15b59da","modified":1534944987807},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1534944987807},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1534944987808},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1534944987808},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1534944987809},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1534944987809},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1534944987810},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1534944987810},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1534944987816},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1534944987816},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1534944987817},{"_id":"themes/next/bak.git/objects/pack/pack-59ccd5c447b91c1959fc50148301893e8f07b025.idx","hash":"5ccd4b141734c83d5f6da0449ee14ee35dcc50d1","modified":1534944987703},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1534944987812},{"_id":"themes/next/bak.git/logs/refs/heads/master","hash":"b6c9b8eed3b7611806abb18d888b4e3f5fe61209","modified":1534944987701},{"_id":"themes/next/bak.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1534944987716},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1534944987753},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1534944987753},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1534944987764},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1534944987764},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1534944987765},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1534944987765},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1534944987765},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1534944987771},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1534944987779},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1534944987786},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1534944987787},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1534944987787},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1534944987787},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1534944987788},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1534944987788},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1534944987788},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1534944987791},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1534944987791},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1534944987791},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1534944987792},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"bb20cbd5df6433af2746a0a59aca0415c77bc17e","modified":1534944987792},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1534944987792},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1534944987793},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1534944987793},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1534944987794},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1534944987794},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"3bc53d98f7ab29b48f0d7a6212c6488c5458ed88","modified":1534944987794},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1534944987795},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1534944987795},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1534944987796},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1534944987796},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d204ef41e5f59aa102baf02e1751075a041ae7f4","modified":1534944987796},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1534944987797},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1534944987797},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1534944987797},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1534944987809},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1534944987814},{"_id":"themes/next/bak.git/logs/refs/remotes/origin/HEAD","hash":"b6c9b8eed3b7611806abb18d888b4e3f5fe61209","modified":1534944987702},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1534944987766},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1534944987766},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1534944987766},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1534944987767},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1534944987767},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1534944987767},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1534944987768},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1534944987768},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1534944987768},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1534944987770},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1534944987770},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1534944987771},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1534944987770},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1534944987771},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1534944987772},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1534944987772},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1534944987772},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1534944987773},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1534944987773},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1534944987773},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"0abb074afb6ab7242a22fa6dc3ac688251df708a","modified":1534944987773},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1534944987774},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1534944987774},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1534944987774},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1534944987774},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1534944987775},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1534944987775},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1534944987775},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1534944987775},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1534944987776},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1534944987776},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1534944987776},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1534944987777},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1534944987777},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1534944987777},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1534944987778},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1534944987778},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1534944987778},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1534944987778},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1534944987779},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1534944987779},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1534944987780},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1534944987780},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1534944987780},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1534944987781},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1534944987781},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1534944987781},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1534944987782},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1534944987782},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1534944987782},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1534944987783},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1534944987783},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1534944987783},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1534944987784},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1534944987785},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1534944987785},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1534944987786},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"96326454eb7c7a3ec38d20294c94c4cc63f16ebe","modified":1534944987786},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1534944987793},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1534944987793},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1534944987795},{"_id":"themes/next/bak.git/objects/pack/pack-59ccd5c447b91c1959fc50148301893e8f07b025.pack","hash":"d3098328724ecc3d690260c6ea4ec3cba80d355b","modified":1534944987714},{"_id":"public/atom.xml","hash":"333e93e9744545d7be9876925c8fc3e26a358fc2","modified":1534956147498},{"_id":"public/search.xml","hash":"94cf5656a9ea9427cd9b1808f042610d083368d7","modified":1534956147516},{"_id":"public/about/index.html","hash":"7f11d71696d83810e75dd59798d52c403eadae61","modified":1534956378036},{"_id":"public/categories/index.html","hash":"b854b7ad67a59fafa8212f55c03234f65376fa69","modified":1534956378036},{"_id":"public/tags/index.html","hash":"4562c9d6255e05c0d76abde96e4d2afe249ea060","modified":1534956378037},{"_id":"public/2018/08/22/tools/index.html","hash":"244265c439755de9e3f8ce03ae462a1d71657860","modified":1534956378037},{"_id":"public/2018/08/22/hello-world/index.html","hash":"e667b877e8f105074e202ef78e2bea6798b5785c","modified":1534956378037},{"_id":"public/2018/08/22/Git-changyongmingling/index.html","hash":"45d62b29c2829d44ed250e96985149b1d5a9d87b","modified":1534956378037},{"_id":"public/2018/08/20/shujukujichu1/index.html","hash":"a29a238516ac4f69d2a0784442aafcc3ca043f6b","modified":1534956378038},{"_id":"public/2018/08/20/rlwrap/index.html","hash":"39ffd307b229005ec46208daa60e62f55fb2f6bf","modified":1534956378038},{"_id":"public/2018/08/20/one/index.html","hash":"6f4959e42b6ceee42b77ac84fc8ad6fc1d4335d9","modified":1534956378038},{"_id":"public/2018/08/20/batjichu/index.html","hash":"030dfcb3f5ac8cd3856c6f5752dd556baa17fe41","modified":1534956378038},{"_id":"public/2018/08/20/gitjichupeizhi/index.html","hash":"82bd4db8ba30296682a29d02bd58c175429ac15d","modified":1534956378038},{"_id":"public/2018/08/20/limqfirst/index.html","hash":"e903ec99736ba52ac6bfdb20ee63493c20daf1b7","modified":1534956378038},{"_id":"public/2018/08/20/test/index.html","hash":"91d7be2cd83eafe3dedf5f25e3d1b9275a7ccd33","modified":1534956378038},{"_id":"public/archives/index.html","hash":"2ab33c1acf2acacf8a053937f76581b17eddad94","modified":1534956378039},{"_id":"public/archives/2018/index.html","hash":"2ab33c1acf2acacf8a053937f76581b17eddad94","modified":1534956378039},{"_id":"public/archives/2018/08/index.html","hash":"2ab33c1acf2acacf8a053937f76581b17eddad94","modified":1534956378039},{"_id":"public/categories/life/index.html","hash":"e257876ffafd2d21067994c4ce306d9b8cd9a534","modified":1534956378039},{"_id":"public/categories/Program/index.html","hash":"38bbad4ff0f1e948bedcc0a04adce5b910262bcb","modified":1534956378039},{"_id":"public/categories/效率工具/index.html","hash":"52f3e525d85c1978e4e0244ec6ea27d32b18867e","modified":1534956378040},{"_id":"public/categories/Program/bat/index.html","hash":"47e7063fae042a30ab8fad474e53b833066eb94e","modified":1534956378040},{"_id":"public/categories/Program/test/index.html","hash":"4953c60425c204d1557123c5426e92fba5f92bb6","modified":1534956378040},{"_id":"public/categories/Program/Git/index.html","hash":"62585735a2e9ea33af4ddce06be9e6973ddad245","modified":1534956378040},{"_id":"public/categories/Program/Oracle/index.html","hash":"82d6b4f51da4bb5ae88062f2ee570097153e9c80","modified":1534956378040},{"_id":"public/categories/Program/hexo/index.html","hash":"56905e26f96b378aeb6a97b7aa4d9071909b92c0","modified":1534956378040},{"_id":"public/index.html","hash":"bf550b2d5c6bafab3362b5d71c527df0054b51d0","modified":1534956378040},{"_id":"public/tags/Python/index.html","hash":"d1c54731b6a8b127cec1aca63b5de44cdfe369a7","modified":1534956378040},{"_id":"public/tags/Oracle/index.html","hash":"8a70da18164b6d69d1bef7b4a8f14d948a8724bd","modified":1534956378041},{"_id":"public/tags/Git/index.html","hash":"4597c05b43b7a488fe904006056e05c38965e55a","modified":1534956378041},{"_id":"public/tags/版本控制/index.html","hash":"b59a092fc51b463e4f13c02decd4cfe618bf3ce1","modified":1534956378041},{"_id":"public/tags/tools/index.html","hash":"847cada7addeb2a7a323539487ed9170555cd832","modified":1534956378041},{"_id":"public/tags/效率工具/index.html","hash":"b09dd54083a72389bcac42f3b7f50cb9491d2376","modified":1534956378041},{"_id":"public/tags/bat/index.html","hash":"7f4f4be89cd1d9c9246361af35ca317b11c70df5","modified":1534956378041},{"_id":"public/tags/Windows/index.html","hash":"2e0e7dce4f8ed063b16d839c1a460ebba6851ed8","modified":1534956378041},{"_id":"public/tags/test/index.html","hash":"84756aad60f93504bbbf5c0bd0096ad4e09d4f68","modified":1534956378042},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1534956147556},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1534956147556},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1534956147557},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1534956147557},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1534956147557},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1534956147557},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1534956147557},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1534956147557},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1534956147557},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1534956147557},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1534956147558},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1534956147558},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534956147558},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1534956147558},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1534956147558},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1534956147558},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1534956147558},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1534956147558},{"_id":"public/2018/08/22/Git-changyongmingling/726930-5079e6da8900d0e2.jpg","hash":"a2f099798543dfca2563f3cf6c0571e1bfa75332","modified":1534956147558},{"_id":"public/2018/08/20/shujukujichu1/Image.png","hash":"1497cd005727341d9f4fc34ecf2a3b38294f4f58","modified":1534956148499},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1534956148511},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1534956148511},{"_id":"public/js/src/bootstrap.js","hash":"531cdedd7fbe8cb1dab2e4328774a9f6b15b59da","modified":1534956148511},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1534956148511},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1534956148511},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1534956148511},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1534956148511},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1534956148511},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1534956148512},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1534956148512},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1534956148512},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1534956148512},{"_id":"public/css/main.css","hash":"3e1b3c8388fc216e341aeaf81b4e0855cfeb0b62","modified":1534956148512},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1534956148512},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1534956148512},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1534956148512},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1534956148513}],"Category":[{"name":"life","_id":"cjl5d990800040owkcdlx79ro"},{"name":"Program","_id":"cjl5d990o000a0owk3jz4tnnr"},{"name":"效率工具","_id":"cjl5d991i000p0owkabwvtrxj"},{"name":"bat","parent":"cjl5d990o000a0owk3jz4tnnr","_id":"cjl5d991l000t0owkuaxhy958"},{"name":"test","parent":"cjl5d990o000a0owk3jz4tnnr","_id":"cjl5d991n000x0owkal4jgy6n"},{"name":"Git","parent":"cjl5d990o000a0owk3jz4tnnr","_id":"cjl5d991p00110owk5bya48ta"},{"name":"Oracle","parent":"cjl5d990o000a0owk3jz4tnnr","_id":"cjl5d991r00160owkgxwa09bq"},{"name":"hexo","parent":"cjl5d990o000a0owk3jz4tnnr","_id":"cjl5d991t001b0owk1940kg05"}],"Data":[],"Page":[{"title":"about","date":"2018-08-20T05:16:33.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-08-20 13:16:33\n---\n","updated":"2018-08-22T13:36:27.594Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjl5d98zx00010owkr0o81ofw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","layout":"categories","type":"categories","date":"2018-08-20T05:16:15.000Z","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\nlayout: categories\ntype: \"categories\"\ndate: 2018-08-20 13:16:15\ncomments: false\n---\n","updated":"2018-08-22T13:36:27.595Z","path":"categories/index.html","_id":"cjl5d990300030owkbd2yultv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-08-20T05:16:25.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-08-20 13:16:25\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-08-22T13:36:27.595Z","path":"tags/index.html","layout":"page","_id":"cjl5d990f00070owk9uo69wa6","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"第一篇文章","comments":1,"date":"2018-08-20T07:48:52.000Z","updated":"2018-08-20T07:48:52.000Z","_content":"\n","source":"_posts/2018-08-20-one.md","raw":"---\ntitle: 第一篇文章\ncomments: true\ndate: 2018-08-20 15:48:52\nupdated: 2018-08-20 15:48:52\ntags: Python\ncategories: life\n---\n\n","slug":"one","published":1,"layout":"post","photos":[],"link":"","_id":"cjl5d98zn00000owk706k8pdo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"数据库基础1","comments":1,"date":"2018-08-20T09:05:48.000Z","updated":"2018-08-20T09:05:48.000Z","_content":"\n## 4.1 关系代数运算       \n\n传统的几何运算。并、差、交、笛卡尔积等。        \n专门的关系运算。选择、投影、连接等。    \n### 4.1.1 关系运算   \n\n(1)并(Union)     \n(2)差（Difference）  \n(3)交（Intersect）\n\n![图片](2018-08-20-shujukujichu1\\Image.png)\n\n\n### 4.1.2专门的关系运算        \n\n(1)选择            \nselect * from students where 性别='男'        \n(2)投影            \nselect 学号，姓名，身份证号 from students       \n(3)连接            \n连接是关系的横向结合。连接运算将两个关系模式拼接成一个更宽的关系模式，生成新关系中包含满足条件的元祖。连接过程是通过连接条件来控制的，连接条件中将出现两个表中的公共属性名，或者具有相同语义、可比的属性。连接结果是满足条件的所有记录，连接运算需要两个表作为操作对象，操作结果产生一个关系。若需要连接两个以上的表，则应当两两进行连接。一般可以描述为：JOIN <关系1> AND <关系2> WHERE <条件>SELECT *　FROM STUDENTS A INNER JOIN SECORES B ON A.学号=B.学号该命令查出学生表和成绩表中有相同学号的全部信息。 ","source":"_posts/2018-08-20-shujukujichu1.md","raw":"---\ntitle: 数据库基础1\ncomments: true\ndate: 2018-08-20 17:05:48\nupdated: 2018-08-20 17:05:48\ntags:\ncategories:\n- Program\n- test\n---\n\n## 4.1 关系代数运算       \n\n传统的几何运算。并、差、交、笛卡尔积等。        \n专门的关系运算。选择、投影、连接等。    \n### 4.1.1 关系运算   \n\n(1)并(Union)     \n(2)差（Difference）  \n(3)交（Intersect）\n\n![图片](2018-08-20-shujukujichu1\\Image.png)\n\n\n### 4.1.2专门的关系运算        \n\n(1)选择            \nselect * from students where 性别='男'        \n(2)投影            \nselect 学号，姓名，身份证号 from students       \n(3)连接            \n连接是关系的横向结合。连接运算将两个关系模式拼接成一个更宽的关系模式，生成新关系中包含满足条件的元祖。连接过程是通过连接条件来控制的，连接条件中将出现两个表中的公共属性名，或者具有相同语义、可比的属性。连接结果是满足条件的所有记录，连接运算需要两个表作为操作对象，操作结果产生一个关系。若需要连接两个以上的表，则应当两两进行连接。一般可以描述为：JOIN <关系1> AND <关系2> WHERE <条件>SELECT *　FROM STUDENTS A INNER JOIN SECORES B ON A.学号=B.学号该命令查出学生表和成绩表中有相同学号的全部信息。 ","slug":"shujukujichu1","published":1,"layout":"post","photos":[],"link":"","_id":"cjl5d990000020owkot87l9f4","content":"<h2 id=\"4-1-关系代数运算\"><a href=\"#4-1-关系代数运算\" class=\"headerlink\" title=\"4.1 关系代数运算\"></a>4.1 关系代数运算</h2><p>传统的几何运算。并、差、交、笛卡尔积等。<br>专门的关系运算。选择、投影、连接等。    </p>\n<h3 id=\"4-1-1-关系运算\"><a href=\"#4-1-1-关系运算\" class=\"headerlink\" title=\"4.1.1 关系运算\"></a>4.1.1 关系运算</h3><p>(1)并(Union)<br>(2)差（Difference）<br>(3)交（Intersect）</p>\n<p><img src=\"2018-08-20-shujukujichu1\\Image.png\" alt=\"图片\"></p>\n<h3 id=\"4-1-2专门的关系运算\"><a href=\"#4-1-2专门的关系运算\" class=\"headerlink\" title=\"4.1.2专门的关系运算\"></a>4.1.2专门的关系运算</h3><p>(1)选择<br>select <em> from students where 性别=’男’<br>(2)投影<br>select 学号，姓名，身份证号 from students<br>(3)连接<br>连接是关系的横向结合。连接运算将两个关系模式拼接成一个更宽的关系模式，生成新关系中包含满足条件的元祖。连接过程是通过连接条件来控制的，连接条件中将出现两个表中的公共属性名，或者具有相同语义、可比的属性。连接结果是满足条件的所有记录，连接运算需要两个表作为操作对象，操作结果产生一个关系。若需要连接两个以上的表，则应当两两进行连接。一般可以描述为：JOIN &lt;关系1&gt; AND &lt;关系2&gt; WHERE &lt;条件&gt;SELECT </em>　FROM STUDENTS A INNER JOIN SECORES B ON A.学号=B.学号该命令查出学生表和成绩表中有相同学号的全部信息。 </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"4-1-关系代数运算\"><a href=\"#4-1-关系代数运算\" class=\"headerlink\" title=\"4.1 关系代数运算\"></a>4.1 关系代数运算</h2><p>传统的几何运算。并、差、交、笛卡尔积等。<br>专门的关系运算。选择、投影、连接等。    </p>\n<h3 id=\"4-1-1-关系运算\"><a href=\"#4-1-1-关系运算\" class=\"headerlink\" title=\"4.1.1 关系运算\"></a>4.1.1 关系运算</h3><p>(1)并(Union)<br>(2)差（Difference）<br>(3)交（Intersect）</p>\n<p><img src=\"2018-08-20-shujukujichu1\\Image.png\" alt=\"图片\"></p>\n<h3 id=\"4-1-2专门的关系运算\"><a href=\"#4-1-2专门的关系运算\" class=\"headerlink\" title=\"4.1.2专门的关系运算\"></a>4.1.2专门的关系运算</h3><p>(1)选择<br>select <em> from students where 性别=’男’<br>(2)投影<br>select 学号，姓名，身份证号 from students<br>(3)连接<br>连接是关系的横向结合。连接运算将两个关系模式拼接成一个更宽的关系模式，生成新关系中包含满足条件的元祖。连接过程是通过连接条件来控制的，连接条件中将出现两个表中的公共属性名，或者具有相同语义、可比的属性。连接结果是满足条件的所有记录，连接运算需要两个表作为操作对象，操作结果产生一个关系。若需要连接两个以上的表，则应当两两进行连接。一般可以描述为：JOIN &lt;关系1&gt; AND &lt;关系2&gt; WHERE &lt;条件&gt;SELECT </em>　FROM STUDENTS A INNER JOIN SECORES B ON A.学号=B.学号该命令查出学生表和成绩表中有相同学号的全部信息。 </p>\n"},{"title":"Linux 下 Oracle 命令行工具 Rlwrap","comments":1,"date":"2018-08-20T09:05:48.000Z","updated":"2018-08-20T09:05:48.000Z","_content":"\n如果您对Rlwrap这个工具不是很熟悉，建议参考一下这篇文章：[ Rlwrap Linux 上实现 Windows 的 SQL*Plus 保存 SQL 历史记录功能](http://space.itpub.net/519536/viewspace-614104)，这篇文章描述了如何部署安装 Rlwrap 工具。\n\n这个工具可以理解为在 UNIX 或 Linux 平台下模拟 Windows 下 SQL*Plus 的操作习惯（当然不仅限于此），同时在  SQL*Plus 中可以模拟 UNIX 或 Linux 的操作习惯，一旦掌握，可以提高在 SQL*Plus 中的操作效率。 \n\n以下是我尝试出来的一下快捷键，分享在此。\n```\nCtrl+L 将当前行置顶，相当于完成清屏的动作\nCtrl+P 上一条命令\nCtrl+N 下一条命令\nCtrl+U 从光标处删除到行首Ctrl+W 向前删除一个单词\nCtrl+R 增量搜索用过的命令，反复使用\nCtrl+R可以向前继续寻找包含关键字的命令，但不能循环\nCtrl+T 当前字母与前面的字母交换，最后的时候是最后两个字母交换\nCtrl+Z 后台运行，使用fg调出\nCtrl+XX 光标最近两次位置交换\nCtrl+B 光标向前移动\nCtrl+J 相当于Enter键，小心勿执行语句\nCtrl+O 相当于Enter键，小心勿执行语句\nCtrl+M 相当于Enter键，小心勿执行语句\nCtrl+H 相当于Backspace删除键\n```\n\n每一个快捷键都有其适用场合，尤其是`Ctrl + L` 可以非常便捷的完成清屏的作用，慢慢体会吧。如果您发现了更多有趣的使用方法，欢迎分享。\n\n看一个真正的专家操作命令行绝对是一种很好的体验-光标在单词之间来回穿梭，命令行不同的滚动。在这里强烈建立适应GUI节目的开发者尝试一下在提示符下面工作。但是事情也不是那么简单，还是需要知道“如何去做”。在单词之间跳转，使用 `Ctrl + 左右键`。`Ctrl + a` 跳到本行的行首，`Ctrl + e` 则跳到页尾。`Ctrl + u` 删除当前光标前面的文字 `Ctrl + k` -删除当前光标后面的文字 `Ctrl + w` 和`Alt + d` 对于当前的单词进行删除操作，`w`删除光标前面的单词的字符，`d` 则删除后面的字符`Alt + Backsapce` 删除当前光标后面的单词，如果删除错误，使用`Ctrl + y` 进行恢复`Ctrl + L` 进行清屏操作。","source":"_posts/2018-08-21-rlwrap.md","raw":"---\ntitle: Linux 下 Oracle 命令行工具 Rlwrap\ncomments: true\ndate: 2018-08-20 17:05:48\nupdated: 2018-08-20 17:05:48\ntags: Oracle\ncategories: \n- Program\n- Oracle\n---\n\n如果您对Rlwrap这个工具不是很熟悉，建议参考一下这篇文章：[ Rlwrap Linux 上实现 Windows 的 SQL*Plus 保存 SQL 历史记录功能](http://space.itpub.net/519536/viewspace-614104)，这篇文章描述了如何部署安装 Rlwrap 工具。\n\n这个工具可以理解为在 UNIX 或 Linux 平台下模拟 Windows 下 SQL*Plus 的操作习惯（当然不仅限于此），同时在  SQL*Plus 中可以模拟 UNIX 或 Linux 的操作习惯，一旦掌握，可以提高在 SQL*Plus 中的操作效率。 \n\n以下是我尝试出来的一下快捷键，分享在此。\n```\nCtrl+L 将当前行置顶，相当于完成清屏的动作\nCtrl+P 上一条命令\nCtrl+N 下一条命令\nCtrl+U 从光标处删除到行首Ctrl+W 向前删除一个单词\nCtrl+R 增量搜索用过的命令，反复使用\nCtrl+R可以向前继续寻找包含关键字的命令，但不能循环\nCtrl+T 当前字母与前面的字母交换，最后的时候是最后两个字母交换\nCtrl+Z 后台运行，使用fg调出\nCtrl+XX 光标最近两次位置交换\nCtrl+B 光标向前移动\nCtrl+J 相当于Enter键，小心勿执行语句\nCtrl+O 相当于Enter键，小心勿执行语句\nCtrl+M 相当于Enter键，小心勿执行语句\nCtrl+H 相当于Backspace删除键\n```\n\n每一个快捷键都有其适用场合，尤其是`Ctrl + L` 可以非常便捷的完成清屏的作用，慢慢体会吧。如果您发现了更多有趣的使用方法，欢迎分享。\n\n看一个真正的专家操作命令行绝对是一种很好的体验-光标在单词之间来回穿梭，命令行不同的滚动。在这里强烈建立适应GUI节目的开发者尝试一下在提示符下面工作。但是事情也不是那么简单，还是需要知道“如何去做”。在单词之间跳转，使用 `Ctrl + 左右键`。`Ctrl + a` 跳到本行的行首，`Ctrl + e` 则跳到页尾。`Ctrl + u` 删除当前光标前面的文字 `Ctrl + k` -删除当前光标后面的文字 `Ctrl + w` 和`Alt + d` 对于当前的单词进行删除操作，`w`删除光标前面的单词的字符，`d` 则删除后面的字符`Alt + Backsapce` 删除当前光标后面的单词，如果删除错误，使用`Ctrl + y` 进行恢复`Ctrl + L` 进行清屏操作。","slug":"rlwrap","published":1,"layout":"post","photos":[],"link":"","_id":"cjl5d990c00060owkksljffe5","content":"<p>如果您对Rlwrap这个工具不是很熟悉，建议参考一下这篇文章：<a href=\"http://space.itpub.net/519536/viewspace-614104\" target=\"_blank\" rel=\"noopener\"> Rlwrap Linux 上实现 Windows 的 SQL*Plus 保存 SQL 历史记录功能</a>，这篇文章描述了如何部署安装 Rlwrap 工具。</p>\n<p>这个工具可以理解为在 UNIX 或 Linux 平台下模拟 Windows 下 SQL<em>Plus 的操作习惯（当然不仅限于此），同时在  SQL</em>Plus 中可以模拟 UNIX 或 Linux 的操作习惯，一旦掌握，可以提高在 SQL*Plus 中的操作效率。 </p>\n<p>以下是我尝试出来的一下快捷键，分享在此。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+L 将当前行置顶，相当于完成清屏的动作</span><br><span class=\"line\">Ctrl+P 上一条命令</span><br><span class=\"line\">Ctrl+N 下一条命令</span><br><span class=\"line\">Ctrl+U 从光标处删除到行首Ctrl+W 向前删除一个单词</span><br><span class=\"line\">Ctrl+R 增量搜索用过的命令，反复使用</span><br><span class=\"line\">Ctrl+R可以向前继续寻找包含关键字的命令，但不能循环</span><br><span class=\"line\">Ctrl+T 当前字母与前面的字母交换，最后的时候是最后两个字母交换</span><br><span class=\"line\">Ctrl+Z 后台运行，使用fg调出</span><br><span class=\"line\">Ctrl+XX 光标最近两次位置交换</span><br><span class=\"line\">Ctrl+B 光标向前移动</span><br><span class=\"line\">Ctrl+J 相当于Enter键，小心勿执行语句</span><br><span class=\"line\">Ctrl+O 相当于Enter键，小心勿执行语句</span><br><span class=\"line\">Ctrl+M 相当于Enter键，小心勿执行语句</span><br><span class=\"line\">Ctrl+H 相当于Backspace删除键</span><br></pre></td></tr></table></figure></p>\n<p>每一个快捷键都有其适用场合，尤其是<code>Ctrl + L</code> 可以非常便捷的完成清屏的作用，慢慢体会吧。如果您发现了更多有趣的使用方法，欢迎分享。</p>\n<p>看一个真正的专家操作命令行绝对是一种很好的体验-光标在单词之间来回穿梭，命令行不同的滚动。在这里强烈建立适应GUI节目的开发者尝试一下在提示符下面工作。但是事情也不是那么简单，还是需要知道“如何去做”。在单词之间跳转，使用 <code>Ctrl + 左右键</code>。<code>Ctrl + a</code> 跳到本行的行首，<code>Ctrl + e</code> 则跳到页尾。<code>Ctrl + u</code> 删除当前光标前面的文字 <code>Ctrl + k</code> -删除当前光标后面的文字 <code>Ctrl + w</code> 和<code>Alt + d</code> 对于当前的单词进行删除操作，<code>w</code>删除光标前面的单词的字符，<code>d</code> 则删除后面的字符<code>Alt + Backsapce</code> 删除当前光标后面的单词，如果删除错误，使用<code>Ctrl + y</code> 进行恢复<code>Ctrl + L</code> 进行清屏操作。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果您对Rlwrap这个工具不是很熟悉，建议参考一下这篇文章：<a href=\"http://space.itpub.net/519536/viewspace-614104\" target=\"_blank\" rel=\"noopener\"> Rlwrap Linux 上实现 Windows 的 SQL*Plus 保存 SQL 历史记录功能</a>，这篇文章描述了如何部署安装 Rlwrap 工具。</p>\n<p>这个工具可以理解为在 UNIX 或 Linux 平台下模拟 Windows 下 SQL<em>Plus 的操作习惯（当然不仅限于此），同时在  SQL</em>Plus 中可以模拟 UNIX 或 Linux 的操作习惯，一旦掌握，可以提高在 SQL*Plus 中的操作效率。 </p>\n<p>以下是我尝试出来的一下快捷键，分享在此。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+L 将当前行置顶，相当于完成清屏的动作</span><br><span class=\"line\">Ctrl+P 上一条命令</span><br><span class=\"line\">Ctrl+N 下一条命令</span><br><span class=\"line\">Ctrl+U 从光标处删除到行首Ctrl+W 向前删除一个单词</span><br><span class=\"line\">Ctrl+R 增量搜索用过的命令，反复使用</span><br><span class=\"line\">Ctrl+R可以向前继续寻找包含关键字的命令，但不能循环</span><br><span class=\"line\">Ctrl+T 当前字母与前面的字母交换，最后的时候是最后两个字母交换</span><br><span class=\"line\">Ctrl+Z 后台运行，使用fg调出</span><br><span class=\"line\">Ctrl+XX 光标最近两次位置交换</span><br><span class=\"line\">Ctrl+B 光标向前移动</span><br><span class=\"line\">Ctrl+J 相当于Enter键，小心勿执行语句</span><br><span class=\"line\">Ctrl+O 相当于Enter键，小心勿执行语句</span><br><span class=\"line\">Ctrl+M 相当于Enter键，小心勿执行语句</span><br><span class=\"line\">Ctrl+H 相当于Backspace删除键</span><br></pre></td></tr></table></figure></p>\n<p>每一个快捷键都有其适用场合，尤其是<code>Ctrl + L</code> 可以非常便捷的完成清屏的作用，慢慢体会吧。如果您发现了更多有趣的使用方法，欢迎分享。</p>\n<p>看一个真正的专家操作命令行绝对是一种很好的体验-光标在单词之间来回穿梭，命令行不同的滚动。在这里强烈建立适应GUI节目的开发者尝试一下在提示符下面工作。但是事情也不是那么简单，还是需要知道“如何去做”。在单词之间跳转，使用 <code>Ctrl + 左右键</code>。<code>Ctrl + a</code> 跳到本行的行首，<code>Ctrl + e</code> 则跳到页尾。<code>Ctrl + u</code> 删除当前光标前面的文字 <code>Ctrl + k</code> -删除当前光标后面的文字 <code>Ctrl + w</code> 和<code>Alt + d</code> 对于当前的单词进行删除操作，<code>w</code>删除光标前面的单词的字符，<code>d</code> 则删除后面的字符<code>Alt + Backsapce</code> 删除当前光标后面的单词，如果删除错误，使用<code>Ctrl + y</code> 进行恢复<code>Ctrl + L</code> 进行清屏操作。</p>\n"},{"title":"Git 常用命令小结","comments":1,"date":"2018-08-22T01:23:26.000Z","updated":"2018-08-22T01:23:26.000Z","_content":"## 前言\n\n阅读本篇文章需要读者了解 Git 的基本用法，如果你对 Git 完全不了解，请先行移步了解 Git 基础。\n下面是几份本人觉得不错的 Git 入门教程，新手可以参考。\n- [Git权威指南](http://www.worldhello.net/gotgit/index.html) | 国内一位大牛写的介绍 Git 用法的开源书籍，很详实\n- [Pro Git](https://git-scm.com/book/zh/v2) | Git 官方社区编著的介绍 Git 用法的书籍\n\n#### 创建新分支，并且切换到新分支\n```bash\n> git checkout -b <new_branch_name> # 根据当前所在分支，创建新分支\n> git checkout -b <new_branch_name> <remote_name>/<remote_branch_name> # 根据远程分支，创建分支\n```\n#### 切换分支\n\n`> git checkout <branch_name>`\n\n#### 删除分支（本地/远程）\n\n```bash\n> git branch -d <branch_name> # 删除本地分支，当该分支没有关联远程分支或者关联的远程分支已经合并过，才会被允许删除\n> git branch -D <branch_name> # 强制删除本地分支\n> git push <remote_name> -d <branch_name> # 删除远程分支，git v1.7.0（2010年的版本）之后支持\n> git push <remote_name> :<branch_name> # 删除远程分支，旧方式，新的也兼容这种\n\n```\n\n分支重命名\n\n```bash\n> git branch (-m | -M) [<oldbranch>] <newbranch> # 重命名分支语法，-M 强制重命名，具体参见 git branch --help\n> git branch -m <newbranch> # 重命名当前分支\n> git branch -m <oldbranch> <newbranch> # 重命名指定分支\n\n```\n\n重写 commit 信息\n\n```bash\n> git rebase -i HEAD~<num> # 交互式地重写 commit 信息，将会用终端默认的编辑器进行操作\n\n下面的例子中，保存之后，将会使得[328f67b Update Rust]这一条合并到[f55b189 Update cookbook]\n\npick 164bf1c Update cookbook\npick f55b189 Update cookbook\nf 328f67b Update Rust\npick 9834843 Update cookbook\n\n# Rebase 0b6762c..9834843 onto 0b6762c (4 commands)\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n\n```\n\n> 注意：最好不要重写公共的 commit 信息，这会给协作者带来不必要的困惑，推荐仅仅重写本地没有提交的 commit 信息。假设，你非得重写远程 commit 信息，请使用 git push -f 来强制更新远程代码。\n\n#### 从一个分支摘取 commit 到另一个分支\n\n```bash\n> git checkout <target-branch> # 切换到目标分支\n> git cherry-pick <commit_id> # 将源分支的 commit 摘取到目的分支中\n```\n\n#### 想要切换分支时，发现本地有一些写了一半的代码\n\n```bash\n> git stash # 将当前工作目录内容储藏\n> git stash --include-untracked # 如果新添加了文件，将其一并储藏\n> git stash pop # 将储藏的内容恢复到当前分支\n```\n\n#### 回版、撤销commit\n\n```bash\n> git reset --hard <commit_id> # 彻底回退到指定 commit\n```\n\n![img](2018-08-22-Git-changyongmingling\\726930-5079e6da8900d0e2.jpg) \n\n#### 丢弃本地新添加的文件\n\n`> git clean `\n\n#### 丢弃新的改动\n\n`> git checkout . # 注意末尾有个句号`\n\n## 参考资料\n\n- [Git权威指南](http://www.worldhello.net/gotgit/index.html) \n\n- [Pro Git](https://git-scm.com/book/zh/v2)\n\n- Git cheatsheet\n\n- 图解Git\n\n\n转载：本文非原创转载[简书](https://www.jianshu.com/p/15e3a4873d1d)","source":"_posts/2018-08-22-Git-changyongmingling.md","raw":"---\ntitle: Git 常用命令小结\ncomments: true\ndate: 2018-08-22 09:23:26\nupdated: 2018-08-22 09:23:26\ntags: [Git,版本控制]\ncategories: \n- Program \n- Git\n---\n## 前言\n\n阅读本篇文章需要读者了解 Git 的基本用法，如果你对 Git 完全不了解，请先行移步了解 Git 基础。\n下面是几份本人觉得不错的 Git 入门教程，新手可以参考。\n- [Git权威指南](http://www.worldhello.net/gotgit/index.html) | 国内一位大牛写的介绍 Git 用法的开源书籍，很详实\n- [Pro Git](https://git-scm.com/book/zh/v2) | Git 官方社区编著的介绍 Git 用法的书籍\n\n#### 创建新分支，并且切换到新分支\n```bash\n> git checkout -b <new_branch_name> # 根据当前所在分支，创建新分支\n> git checkout -b <new_branch_name> <remote_name>/<remote_branch_name> # 根据远程分支，创建分支\n```\n#### 切换分支\n\n`> git checkout <branch_name>`\n\n#### 删除分支（本地/远程）\n\n```bash\n> git branch -d <branch_name> # 删除本地分支，当该分支没有关联远程分支或者关联的远程分支已经合并过，才会被允许删除\n> git branch -D <branch_name> # 强制删除本地分支\n> git push <remote_name> -d <branch_name> # 删除远程分支，git v1.7.0（2010年的版本）之后支持\n> git push <remote_name> :<branch_name> # 删除远程分支，旧方式，新的也兼容这种\n\n```\n\n分支重命名\n\n```bash\n> git branch (-m | -M) [<oldbranch>] <newbranch> # 重命名分支语法，-M 强制重命名，具体参见 git branch --help\n> git branch -m <newbranch> # 重命名当前分支\n> git branch -m <oldbranch> <newbranch> # 重命名指定分支\n\n```\n\n重写 commit 信息\n\n```bash\n> git rebase -i HEAD~<num> # 交互式地重写 commit 信息，将会用终端默认的编辑器进行操作\n\n下面的例子中，保存之后，将会使得[328f67b Update Rust]这一条合并到[f55b189 Update cookbook]\n\npick 164bf1c Update cookbook\npick f55b189 Update cookbook\nf 328f67b Update Rust\npick 9834843 Update cookbook\n\n# Rebase 0b6762c..9834843 onto 0b6762c (4 commands)\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n\n```\n\n> 注意：最好不要重写公共的 commit 信息，这会给协作者带来不必要的困惑，推荐仅仅重写本地没有提交的 commit 信息。假设，你非得重写远程 commit 信息，请使用 git push -f 来强制更新远程代码。\n\n#### 从一个分支摘取 commit 到另一个分支\n\n```bash\n> git checkout <target-branch> # 切换到目标分支\n> git cherry-pick <commit_id> # 将源分支的 commit 摘取到目的分支中\n```\n\n#### 想要切换分支时，发现本地有一些写了一半的代码\n\n```bash\n> git stash # 将当前工作目录内容储藏\n> git stash --include-untracked # 如果新添加了文件，将其一并储藏\n> git stash pop # 将储藏的内容恢复到当前分支\n```\n\n#### 回版、撤销commit\n\n```bash\n> git reset --hard <commit_id> # 彻底回退到指定 commit\n```\n\n![img](2018-08-22-Git-changyongmingling\\726930-5079e6da8900d0e2.jpg) \n\n#### 丢弃本地新添加的文件\n\n`> git clean `\n\n#### 丢弃新的改动\n\n`> git checkout . # 注意末尾有个句号`\n\n## 参考资料\n\n- [Git权威指南](http://www.worldhello.net/gotgit/index.html) \n\n- [Pro Git](https://git-scm.com/book/zh/v2)\n\n- Git cheatsheet\n\n- 图解Git\n\n\n转载：本文非原创转载[简书](https://www.jianshu.com/p/15e3a4873d1d)","slug":"Git-changyongmingling","published":1,"layout":"post","photos":[],"link":"","_id":"cjl5d990j00080owkn8sye2q4","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>阅读本篇文章需要读者了解 Git 的基本用法，如果你对 Git 完全不了解，请先行移步了解 Git 基础。<br>下面是几份本人觉得不错的 Git 入门教程，新手可以参考。</p>\n<ul>\n<li><a href=\"http://www.worldhello.net/gotgit/index.html\" target=\"_blank\" rel=\"noopener\">Git权威指南</a> | 国内一位大牛写的介绍 Git 用法的开源书籍，很详实</li>\n<li><a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">Pro Git</a> | Git 官方社区编著的介绍 Git 用法的书籍</li>\n</ul>\n<h4 id=\"创建新分支，并且切换到新分支\"><a href=\"#创建新分支，并且切换到新分支\" class=\"headerlink\" title=\"创建新分支，并且切换到新分支\"></a>创建新分支，并且切换到新分支</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git checkout -b &lt;new_branch_name&gt; <span class=\"comment\"># 根据当前所在分支，创建新分支</span></span><br><span class=\"line\">&gt; git checkout -b &lt;new_branch_name&gt; &lt;remote_name&gt;/&lt;remote_branch_name&gt; <span class=\"comment\"># 根据远程分支，创建分支</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h4><p><code>&gt; git checkout &lt;branch_name&gt;</code></p>\n<h4 id=\"删除分支（本地-远程）\"><a href=\"#删除分支（本地-远程）\" class=\"headerlink\" title=\"删除分支（本地/远程）\"></a>删除分支（本地/远程）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git branch -d &lt;branch_name&gt; <span class=\"comment\"># 删除本地分支，当该分支没有关联远程分支或者关联的远程分支已经合并过，才会被允许删除</span></span><br><span class=\"line\">&gt; git branch -D &lt;branch_name&gt; <span class=\"comment\"># 强制删除本地分支</span></span><br><span class=\"line\">&gt; git push &lt;remote_name&gt; -d &lt;branch_name&gt; <span class=\"comment\"># 删除远程分支，git v1.7.0（2010年的版本）之后支持</span></span><br><span class=\"line\">&gt; git push &lt;remote_name&gt; :&lt;branch_name&gt; <span class=\"comment\"># 删除远程分支，旧方式，新的也兼容这种</span></span><br></pre></td></tr></table></figure>\n<p>分支重命名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git branch (-m | -M) [&lt;oldbranch&gt;] &lt;newbranch&gt; <span class=\"comment\"># 重命名分支语法，-M 强制重命名，具体参见 git branch --help</span></span><br><span class=\"line\">&gt; git branch -m &lt;newbranch&gt; <span class=\"comment\"># 重命名当前分支</span></span><br><span class=\"line\">&gt; git branch -m &lt;oldbranch&gt; &lt;newbranch&gt; <span class=\"comment\"># 重命名指定分支</span></span><br></pre></td></tr></table></figure>\n<p>重写 commit 信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git rebase -i HEAD~&lt;num&gt; <span class=\"comment\"># 交互式地重写 commit 信息，将会用终端默认的编辑器进行操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">下面的例子中，保存之后，将会使得[328f67b Update Rust]这一条合并到[f55b189 Update cookbook]</span><br><span class=\"line\"></span><br><span class=\"line\">pick 164bf1c Update cookbook</span><br><span class=\"line\">pick f55b189 Update cookbook</span><br><span class=\"line\">f 328f67b Update Rust</span><br><span class=\"line\">pick 9834843 Update cookbook</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Rebase 0b6762c..9834843 onto 0b6762c (4 commands)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Commands:</span></span><br><span class=\"line\"><span class=\"comment\"># p, pick = use commit</span></span><br><span class=\"line\"><span class=\"comment\"># r, reword = use commit, but edit the commit message</span></span><br><span class=\"line\"><span class=\"comment\"># e, edit = use commit, but stop for amending</span></span><br><span class=\"line\"><span class=\"comment\"># s, squash = use commit, but meld into previous commit</span></span><br><span class=\"line\"><span class=\"comment\"># f, fixup = like \"squash\", but discard this commit's log message</span></span><br><span class=\"line\"><span class=\"comment\"># x, exec = run command (the rest of the line) using shell</span></span><br><span class=\"line\"><span class=\"comment\"># d, drop = remove commit</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Note that empty commits are commented out</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：最好不要重写公共的 commit 信息，这会给协作者带来不必要的困惑，推荐仅仅重写本地没有提交的 commit 信息。假设，你非得重写远程 commit 信息，请使用 git push -f 来强制更新远程代码。</p>\n</blockquote>\n<h4 id=\"从一个分支摘取-commit-到另一个分支\"><a href=\"#从一个分支摘取-commit-到另一个分支\" class=\"headerlink\" title=\"从一个分支摘取 commit 到另一个分支\"></a>从一个分支摘取 commit 到另一个分支</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git checkout &lt;target-branch&gt; <span class=\"comment\"># 切换到目标分支</span></span><br><span class=\"line\">&gt; git cherry-pick &lt;commit_id&gt; <span class=\"comment\"># 将源分支的 commit 摘取到目的分支中</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"想要切换分支时，发现本地有一些写了一半的代码\"><a href=\"#想要切换分支时，发现本地有一些写了一半的代码\" class=\"headerlink\" title=\"想要切换分支时，发现本地有一些写了一半的代码\"></a>想要切换分支时，发现本地有一些写了一半的代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git stash <span class=\"comment\"># 将当前工作目录内容储藏</span></span><br><span class=\"line\">&gt; git stash --include-untracked <span class=\"comment\"># 如果新添加了文件，将其一并储藏</span></span><br><span class=\"line\">&gt; git stash pop <span class=\"comment\"># 将储藏的内容恢复到当前分支</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"回版、撤销commit\"><a href=\"#回版、撤销commit\" class=\"headerlink\" title=\"回版、撤销commit\"></a>回版、撤销commit</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git reset --hard &lt;commit_id&gt; <span class=\"comment\"># 彻底回退到指定 commit</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"2018-08-22-Git-changyongmingling\\726930-5079e6da8900d0e2.jpg\" alt=\"img\"> </p>\n<h4 id=\"丢弃本地新添加的文件\"><a href=\"#丢弃本地新添加的文件\" class=\"headerlink\" title=\"丢弃本地新添加的文件\"></a>丢弃本地新添加的文件</h4><p><code>&gt; git clean</code></p>\n<h4 id=\"丢弃新的改动\"><a href=\"#丢弃新的改动\" class=\"headerlink\" title=\"丢弃新的改动\"></a>丢弃新的改动</h4><p><code>&gt; git checkout . # 注意末尾有个句号</code></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><p><a href=\"http://www.worldhello.net/gotgit/index.html\" target=\"_blank\" rel=\"noopener\">Git权威指南</a> </p>\n</li>\n<li><p><a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">Pro Git</a></p>\n</li>\n<li><p>Git cheatsheet</p>\n</li>\n<li><p>图解Git</p>\n</li>\n</ul>\n<p>转载：本文非原创转载<a href=\"https://www.jianshu.com/p/15e3a4873d1d\" target=\"_blank\" rel=\"noopener\">简书</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>阅读本篇文章需要读者了解 Git 的基本用法，如果你对 Git 完全不了解，请先行移步了解 Git 基础。<br>下面是几份本人觉得不错的 Git 入门教程，新手可以参考。</p>\n<ul>\n<li><a href=\"http://www.worldhello.net/gotgit/index.html\" target=\"_blank\" rel=\"noopener\">Git权威指南</a> | 国内一位大牛写的介绍 Git 用法的开源书籍，很详实</li>\n<li><a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">Pro Git</a> | Git 官方社区编著的介绍 Git 用法的书籍</li>\n</ul>\n<h4 id=\"创建新分支，并且切换到新分支\"><a href=\"#创建新分支，并且切换到新分支\" class=\"headerlink\" title=\"创建新分支，并且切换到新分支\"></a>创建新分支，并且切换到新分支</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git checkout -b &lt;new_branch_name&gt; <span class=\"comment\"># 根据当前所在分支，创建新分支</span></span><br><span class=\"line\">&gt; git checkout -b &lt;new_branch_name&gt; &lt;remote_name&gt;/&lt;remote_branch_name&gt; <span class=\"comment\"># 根据远程分支，创建分支</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h4><p><code>&gt; git checkout &lt;branch_name&gt;</code></p>\n<h4 id=\"删除分支（本地-远程）\"><a href=\"#删除分支（本地-远程）\" class=\"headerlink\" title=\"删除分支（本地/远程）\"></a>删除分支（本地/远程）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git branch -d &lt;branch_name&gt; <span class=\"comment\"># 删除本地分支，当该分支没有关联远程分支或者关联的远程分支已经合并过，才会被允许删除</span></span><br><span class=\"line\">&gt; git branch -D &lt;branch_name&gt; <span class=\"comment\"># 强制删除本地分支</span></span><br><span class=\"line\">&gt; git push &lt;remote_name&gt; -d &lt;branch_name&gt; <span class=\"comment\"># 删除远程分支，git v1.7.0（2010年的版本）之后支持</span></span><br><span class=\"line\">&gt; git push &lt;remote_name&gt; :&lt;branch_name&gt; <span class=\"comment\"># 删除远程分支，旧方式，新的也兼容这种</span></span><br></pre></td></tr></table></figure>\n<p>分支重命名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git branch (-m | -M) [&lt;oldbranch&gt;] &lt;newbranch&gt; <span class=\"comment\"># 重命名分支语法，-M 强制重命名，具体参见 git branch --help</span></span><br><span class=\"line\">&gt; git branch -m &lt;newbranch&gt; <span class=\"comment\"># 重命名当前分支</span></span><br><span class=\"line\">&gt; git branch -m &lt;oldbranch&gt; &lt;newbranch&gt; <span class=\"comment\"># 重命名指定分支</span></span><br></pre></td></tr></table></figure>\n<p>重写 commit 信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git rebase -i HEAD~&lt;num&gt; <span class=\"comment\"># 交互式地重写 commit 信息，将会用终端默认的编辑器进行操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">下面的例子中，保存之后，将会使得[328f67b Update Rust]这一条合并到[f55b189 Update cookbook]</span><br><span class=\"line\"></span><br><span class=\"line\">pick 164bf1c Update cookbook</span><br><span class=\"line\">pick f55b189 Update cookbook</span><br><span class=\"line\">f 328f67b Update Rust</span><br><span class=\"line\">pick 9834843 Update cookbook</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Rebase 0b6762c..9834843 onto 0b6762c (4 commands)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Commands:</span></span><br><span class=\"line\"><span class=\"comment\"># p, pick = use commit</span></span><br><span class=\"line\"><span class=\"comment\"># r, reword = use commit, but edit the commit message</span></span><br><span class=\"line\"><span class=\"comment\"># e, edit = use commit, but stop for amending</span></span><br><span class=\"line\"><span class=\"comment\"># s, squash = use commit, but meld into previous commit</span></span><br><span class=\"line\"><span class=\"comment\"># f, fixup = like \"squash\", but discard this commit's log message</span></span><br><span class=\"line\"><span class=\"comment\"># x, exec = run command (the rest of the line) using shell</span></span><br><span class=\"line\"><span class=\"comment\"># d, drop = remove commit</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Note that empty commits are commented out</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：最好不要重写公共的 commit 信息，这会给协作者带来不必要的困惑，推荐仅仅重写本地没有提交的 commit 信息。假设，你非得重写远程 commit 信息，请使用 git push -f 来强制更新远程代码。</p>\n</blockquote>\n<h4 id=\"从一个分支摘取-commit-到另一个分支\"><a href=\"#从一个分支摘取-commit-到另一个分支\" class=\"headerlink\" title=\"从一个分支摘取 commit 到另一个分支\"></a>从一个分支摘取 commit 到另一个分支</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git checkout &lt;target-branch&gt; <span class=\"comment\"># 切换到目标分支</span></span><br><span class=\"line\">&gt; git cherry-pick &lt;commit_id&gt; <span class=\"comment\"># 将源分支的 commit 摘取到目的分支中</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"想要切换分支时，发现本地有一些写了一半的代码\"><a href=\"#想要切换分支时，发现本地有一些写了一半的代码\" class=\"headerlink\" title=\"想要切换分支时，发现本地有一些写了一半的代码\"></a>想要切换分支时，发现本地有一些写了一半的代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git stash <span class=\"comment\"># 将当前工作目录内容储藏</span></span><br><span class=\"line\">&gt; git stash --include-untracked <span class=\"comment\"># 如果新添加了文件，将其一并储藏</span></span><br><span class=\"line\">&gt; git stash pop <span class=\"comment\"># 将储藏的内容恢复到当前分支</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"回版、撤销commit\"><a href=\"#回版、撤销commit\" class=\"headerlink\" title=\"回版、撤销commit\"></a>回版、撤销commit</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git reset --hard &lt;commit_id&gt; <span class=\"comment\"># 彻底回退到指定 commit</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"2018-08-22-Git-changyongmingling\\726930-5079e6da8900d0e2.jpg\" alt=\"img\"> </p>\n<h4 id=\"丢弃本地新添加的文件\"><a href=\"#丢弃本地新添加的文件\" class=\"headerlink\" title=\"丢弃本地新添加的文件\"></a>丢弃本地新添加的文件</h4><p><code>&gt; git clean</code></p>\n<h4 id=\"丢弃新的改动\"><a href=\"#丢弃新的改动\" class=\"headerlink\" title=\"丢弃新的改动\"></a>丢弃新的改动</h4><p><code>&gt; git checkout . # 注意末尾有个句号</code></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><p><a href=\"http://www.worldhello.net/gotgit/index.html\" target=\"_blank\" rel=\"noopener\">Git权威指南</a> </p>\n</li>\n<li><p><a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">Pro Git</a></p>\n</li>\n<li><p>Git cheatsheet</p>\n</li>\n<li><p>图解Git</p>\n</li>\n</ul>\n<p>转载：本文非原创转载<a href=\"https://www.jianshu.com/p/15e3a4873d1d\" target=\"_blank\" rel=\"noopener\">简书</a></p>\n"},{"title":"tools","comments":1,"date":"2018-08-22T14:26:12.000Z","updated":"2018-08-22T14:26:12.000Z","description":"tools&#58; 推荐 Windows 和 ios 的 apps 以及日常使用的电子产品。","_content":"\n{% cq %}\n君子生非异也，善假于物也。\n\n荀子\n{% endcq %}\n\n## 说明\n\n- __主要介绍 Windows、[iOS](#iOS) 的 Apps__（下文 Apple 指代  iOS）。\n    - 适合自己的工具，才是最好的工具，所以本文仅供参考，自行尝试最重要。\n    - 笔者是工具控，目力之内看起来还有点用的工具都会折腾过一遍。\n        - 过程中浪费了许多时间精力在很少派上用场甚至无用的工具上。\n        - 善于发现生活中关键的效率瓶颈，再根据需求寻找或创造工具就足够了。\n        - 因为折腾工具而忘记了把事做成的初心，实在是南辕北辙。\n- __App 选择原则__\n    - 「常用」的工具才值得折腾，不常用的凑合着用就行了。\n    - 「实用」最重要，美观次之，价格别太贵就行。\n    - 「稳定」：不能时常引起系统崩溃，起码提升效率的收益得超过操作系统崩溃重启的损失。\n    - 「简洁易用」：满足实际的需求即可，不需要花哨、多余的功能。\n- 参考相关文章\n    - 《[Mac 效率指南](/mac/efficiency)》\n    - 《[Mac 快捷键](/mac/shortcuts)》\n- 参考阅读\n    - [__少数派__](http://sspai.com/) - 高质量 App 推荐媒体，关于 iOS、Mac、硬件。\n    - [__Best App__](https://github.com/hzlzh/Best-App) - List in GitHub\n- 字体格式的含义\n    - ~~删除线~~ 标识的一定是我现在不用的 Apps。\n\n---\n\n## 软件\n\n### 常用\n\n- 网络访问\n\n  - Chrome\n    - 配合 [__cVim__](https://chrome.google.com/webstore/detail/cvim/ihlenndgcmojhcghmfjfneahoeklbjjh) 拓展，可在浏览器内 __使用 Vim 键位__ 浏览网页、操作浏览器！键盘党神器\n      - 可惜它无法在页面未加载完毕的情况下使用 Vim 键位，不够（[Firefox](http://www.firefox.com.cn/) + [VimFX](https://github.com/akhodakivskiy/VimFx)）极致！\n    - 用 __Inspect Element__（审查元素）配合 __Postman__ 等做 Web 开发、调试，比 Firefox 顺手。\n\n- 常用\n\n  - [__Trello__](https://trello.com/) <sup>Favorite</sup>\n\n    基于 Board 的事务管理。\n\n    - 使用 board 看板、list 列表、card 卡片等，组织事务；\n    - 使用 description 描述、comment 评论、attachment 附件等，跟踪记录事务内容；\n    - 根据 事务内容、label 标签、due date 截止期限等，考虑事务的优先次序。\n    - 我在现实管理工作项目的过程中，GitLab Issue Board 的应用，给我带来了很大的帮助。虽然那段时间很忙，但我还是有条不紊地推进了我和同事间的分工协作。自此迷上了使用 Board 的方式去管理事务。\n    - 类似的产品很多，Trello 是最简洁、好用、易上手的，这是我用它的关键原因。Slack 的服务被墙，在移动端访问不便（而 Trello 没被墙）；而国内的模仿者们则做得太复杂了，可能因为他们主攻 toB 的市场，不适合我这样的个人用户来使用，所以无爱。\n\n  - [__2Do__](https://www.2doapp.com/) <sup>Powerful</sup>\n    GTD 事务管理。\n\n    - 功能齐全、好用，用法可简可繁。快捷键完备！\n    - 推荐使用 iCloud Reminders 的 CalDAV 同步方式（支持 2Do 绝大部分特性，足以满足我的需求）；Dropbox 的同步方式虽然可以支持 2Do 的所有特性，可是需要翻墙才能同步数据，iPhone 需要长期开着 VPN 略显麻烦。所以为了稳定和省心，选择了前一种同步方式。\n\n  - [__1Password__](https://agilebits.com/onepassword) <sup>Privacy</sup>\n\n    帐号密码管理，以及私人信息的加密存储。\n\n    - 用一（两）个主密码管理所有其它密码。可生成随机密码，可记录登录网站时用的帐号密码，可自动填写表单登录网站。\n    - 以前一直用不惯，觉得用浏览器自带的自动登录和 iCloud 的 [__KeyChain Access__](https://support.apple.com/kb/PH20093?locale=zh_CN) 来记录管理帐号和密码足矣，可是不便于保存一些私人信息。工作之后，经济独立，更加注意保护个人隐私和财产安全了，要管理的私人信息多而杂乱，所以不得不借助专用的工具。\n    - 其它选择：\n      - [__KeyChain Access__](https://support.apple.com/kb/PH20093?locale=zh_CN)：macOS & iOS 原生支持，方便免费。\n      - [__Dashlane__](https://www.dashlane.com/)：好用，但贵。\n      - [__LastPass__](https://lastpass.com/)：够用，免费。\n\n  - [__Outlook__](https://outlook.live.com/owa/)\n    邮箱客户端，微软出品。\n\n    - 方便设置在邮箱服务器生效的邮件规则（因为公司邮箱用 Outlook 的服务）。\n      自动处理，屏蔽干扰，提高邮件处理效率。\n      - 将不同类型邮件归类到不同文件夹；\n      - 将可以忽略的邮件标为已读；\n      - 自动删除无用邮件。\n","source":"_posts/2018-08-22-tools.md","raw":"title: tools\ncomments: true\ndate: 2018-08-22 22:26:12\nupdated: 2018-08-22 22:26:12\ntags:  [tools,效率工具]\ncategories: 效率工具\n\ndescription: tools&#58; 推荐 Windows 和 ios 的 apps 以及日常使用的电子产品。\n---\n\n{% cq %}\n君子生非异也，善假于物也。\n\n荀子\n{% endcq %}\n\n## 说明\n\n- __主要介绍 Windows、[iOS](#iOS) 的 Apps__（下文 Apple 指代  iOS）。\n    - 适合自己的工具，才是最好的工具，所以本文仅供参考，自行尝试最重要。\n    - 笔者是工具控，目力之内看起来还有点用的工具都会折腾过一遍。\n        - 过程中浪费了许多时间精力在很少派上用场甚至无用的工具上。\n        - 善于发现生活中关键的效率瓶颈，再根据需求寻找或创造工具就足够了。\n        - 因为折腾工具而忘记了把事做成的初心，实在是南辕北辙。\n- __App 选择原则__\n    - 「常用」的工具才值得折腾，不常用的凑合着用就行了。\n    - 「实用」最重要，美观次之，价格别太贵就行。\n    - 「稳定」：不能时常引起系统崩溃，起码提升效率的收益得超过操作系统崩溃重启的损失。\n    - 「简洁易用」：满足实际的需求即可，不需要花哨、多余的功能。\n- 参考相关文章\n    - 《[Mac 效率指南](/mac/efficiency)》\n    - 《[Mac 快捷键](/mac/shortcuts)》\n- 参考阅读\n    - [__少数派__](http://sspai.com/) - 高质量 App 推荐媒体，关于 iOS、Mac、硬件。\n    - [__Best App__](https://github.com/hzlzh/Best-App) - List in GitHub\n- 字体格式的含义\n    - ~~删除线~~ 标识的一定是我现在不用的 Apps。\n\n---\n\n## 软件\n\n### 常用\n\n- 网络访问\n\n  - Chrome\n    - 配合 [__cVim__](https://chrome.google.com/webstore/detail/cvim/ihlenndgcmojhcghmfjfneahoeklbjjh) 拓展，可在浏览器内 __使用 Vim 键位__ 浏览网页、操作浏览器！键盘党神器\n      - 可惜它无法在页面未加载完毕的情况下使用 Vim 键位，不够（[Firefox](http://www.firefox.com.cn/) + [VimFX](https://github.com/akhodakivskiy/VimFx)）极致！\n    - 用 __Inspect Element__（审查元素）配合 __Postman__ 等做 Web 开发、调试，比 Firefox 顺手。\n\n- 常用\n\n  - [__Trello__](https://trello.com/) <sup>Favorite</sup>\n\n    基于 Board 的事务管理。\n\n    - 使用 board 看板、list 列表、card 卡片等，组织事务；\n    - 使用 description 描述、comment 评论、attachment 附件等，跟踪记录事务内容；\n    - 根据 事务内容、label 标签、due date 截止期限等，考虑事务的优先次序。\n    - 我在现实管理工作项目的过程中，GitLab Issue Board 的应用，给我带来了很大的帮助。虽然那段时间很忙，但我还是有条不紊地推进了我和同事间的分工协作。自此迷上了使用 Board 的方式去管理事务。\n    - 类似的产品很多，Trello 是最简洁、好用、易上手的，这是我用它的关键原因。Slack 的服务被墙，在移动端访问不便（而 Trello 没被墙）；而国内的模仿者们则做得太复杂了，可能因为他们主攻 toB 的市场，不适合我这样的个人用户来使用，所以无爱。\n\n  - [__2Do__](https://www.2doapp.com/) <sup>Powerful</sup>\n    GTD 事务管理。\n\n    - 功能齐全、好用，用法可简可繁。快捷键完备！\n    - 推荐使用 iCloud Reminders 的 CalDAV 同步方式（支持 2Do 绝大部分特性，足以满足我的需求）；Dropbox 的同步方式虽然可以支持 2Do 的所有特性，可是需要翻墙才能同步数据，iPhone 需要长期开着 VPN 略显麻烦。所以为了稳定和省心，选择了前一种同步方式。\n\n  - [__1Password__](https://agilebits.com/onepassword) <sup>Privacy</sup>\n\n    帐号密码管理，以及私人信息的加密存储。\n\n    - 用一（两）个主密码管理所有其它密码。可生成随机密码，可记录登录网站时用的帐号密码，可自动填写表单登录网站。\n    - 以前一直用不惯，觉得用浏览器自带的自动登录和 iCloud 的 [__KeyChain Access__](https://support.apple.com/kb/PH20093?locale=zh_CN) 来记录管理帐号和密码足矣，可是不便于保存一些私人信息。工作之后，经济独立，更加注意保护个人隐私和财产安全了，要管理的私人信息多而杂乱，所以不得不借助专用的工具。\n    - 其它选择：\n      - [__KeyChain Access__](https://support.apple.com/kb/PH20093?locale=zh_CN)：macOS & iOS 原生支持，方便免费。\n      - [__Dashlane__](https://www.dashlane.com/)：好用，但贵。\n      - [__LastPass__](https://lastpass.com/)：够用，免费。\n\n  - [__Outlook__](https://outlook.live.com/owa/)\n    邮箱客户端，微软出品。\n\n    - 方便设置在邮箱服务器生效的邮件规则（因为公司邮箱用 Outlook 的服务）。\n      自动处理，屏蔽干扰，提高邮件处理效率。\n      - 将不同类型邮件归类到不同文件夹；\n      - 将可以忽略的邮件标为已读；\n      - 自动删除无用邮件。\n","slug":"tools","published":1,"layout":"post","photos":[],"link":"","_id":"cjl5d990m00090owkfiwfb5sv","content":"<blockquote class=\"blockquote-center\"><p>君子生非异也，善假于物也。</p>\n<p>荀子</p>\n</blockquote>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><ul>\n<li><strong>主要介绍 Windows、<a href=\"#iOS\">iOS</a> 的 Apps</strong>（下文 Apple 指代  iOS）。<ul>\n<li>适合自己的工具，才是最好的工具，所以本文仅供参考，自行尝试最重要。</li>\n<li>笔者是工具控，目力之内看起来还有点用的工具都会折腾过一遍。<ul>\n<li>过程中浪费了许多时间精力在很少派上用场甚至无用的工具上。</li>\n<li>善于发现生活中关键的效率瓶颈，再根据需求寻找或创造工具就足够了。</li>\n<li>因为折腾工具而忘记了把事做成的初心，实在是南辕北辙。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>App 选择原则</strong><ul>\n<li>「常用」的工具才值得折腾，不常用的凑合着用就行了。</li>\n<li>「实用」最重要，美观次之，价格别太贵就行。</li>\n<li>「稳定」：不能时常引起系统崩溃，起码提升效率的收益得超过操作系统崩溃重启的损失。</li>\n<li>「简洁易用」：满足实际的需求即可，不需要花哨、多余的功能。</li>\n</ul>\n</li>\n<li>参考相关文章<ul>\n<li>《<a href=\"/mac/efficiency\">Mac 效率指南</a>》</li>\n<li>《<a href=\"/mac/shortcuts\">Mac 快捷键</a>》</li>\n</ul>\n</li>\n<li>参考阅读<ul>\n<li><a href=\"http://sspai.com/\" target=\"_blank\" rel=\"noopener\"><strong>少数派</strong></a> - 高质量 App 推荐媒体，关于 iOS、Mac、硬件。</li>\n<li><a href=\"https://github.com/hzlzh/Best-App\" target=\"_blank\" rel=\"noopener\"><strong>Best App</strong></a> - List in GitHub</li>\n</ul>\n</li>\n<li>字体格式的含义<ul>\n<li><del>删除线</del> 标识的一定是我现在不用的 Apps。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h2><h3 id=\"常用\"><a href=\"#常用\" class=\"headerlink\" title=\"常用\"></a>常用</h3><ul>\n<li><p>网络访问</p>\n<ul>\n<li>Chrome<ul>\n<li>配合 <a href=\"https://chrome.google.com/webstore/detail/cvim/ihlenndgcmojhcghmfjfneahoeklbjjh\" target=\"_blank\" rel=\"noopener\"><strong>cVim</strong></a> 拓展，可在浏览器内 <strong>使用 Vim 键位</strong> 浏览网页、操作浏览器！键盘党神器<ul>\n<li>可惜它无法在页面未加载完毕的情况下使用 Vim 键位，不够（<a href=\"http://www.firefox.com.cn/\" target=\"_blank\" rel=\"noopener\">Firefox</a> + <a href=\"https://github.com/akhodakivskiy/VimFx\" target=\"_blank\" rel=\"noopener\">VimFX</a>）极致！</li>\n</ul>\n</li>\n<li>用 <strong>Inspect Element</strong>（审查元素）配合 <strong>Postman</strong> 等做 Web 开发、调试，比 Firefox 顺手。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>常用</p>\n<ul>\n<li><p><a href=\"https://trello.com/\" target=\"_blank\" rel=\"noopener\"><strong>Trello</strong></a> <sup>Favorite</sup></p>\n<p>基于 Board 的事务管理。</p>\n<ul>\n<li>使用 board 看板、list 列表、card 卡片等，组织事务；</li>\n<li>使用 description 描述、comment 评论、attachment 附件等，跟踪记录事务内容；</li>\n<li>根据 事务内容、label 标签、due date 截止期限等，考虑事务的优先次序。</li>\n<li>我在现实管理工作项目的过程中，GitLab Issue Board 的应用，给我带来了很大的帮助。虽然那段时间很忙，但我还是有条不紊地推进了我和同事间的分工协作。自此迷上了使用 Board 的方式去管理事务。</li>\n<li>类似的产品很多，Trello 是最简洁、好用、易上手的，这是我用它的关键原因。Slack 的服务被墙，在移动端访问不便（而 Trello 没被墙）；而国内的模仿者们则做得太复杂了，可能因为他们主攻 toB 的市场，不适合我这样的个人用户来使用，所以无爱。</li>\n</ul>\n</li>\n<li><p><a href=\"https://www.2doapp.com/\" target=\"_blank\" rel=\"noopener\"><strong>2Do</strong></a> <sup>Powerful</sup><br>GTD 事务管理。</p>\n<ul>\n<li>功能齐全、好用，用法可简可繁。快捷键完备！</li>\n<li>推荐使用 iCloud Reminders 的 CalDAV 同步方式（支持 2Do 绝大部分特性，足以满足我的需求）；Dropbox 的同步方式虽然可以支持 2Do 的所有特性，可是需要翻墙才能同步数据，iPhone 需要长期开着 VPN 略显麻烦。所以为了稳定和省心，选择了前一种同步方式。</li>\n</ul>\n</li>\n<li><p><a href=\"https://agilebits.com/onepassword\" target=\"_blank\" rel=\"noopener\"><strong>1Password</strong></a> <sup>Privacy</sup></p>\n<p>帐号密码管理，以及私人信息的加密存储。</p>\n<ul>\n<li>用一（两）个主密码管理所有其它密码。可生成随机密码，可记录登录网站时用的帐号密码，可自动填写表单登录网站。</li>\n<li>以前一直用不惯，觉得用浏览器自带的自动登录和 iCloud 的 <a href=\"https://support.apple.com/kb/PH20093?locale=zh_CN\" target=\"_blank\" rel=\"noopener\"><strong>KeyChain Access</strong></a> 来记录管理帐号和密码足矣，可是不便于保存一些私人信息。工作之后，经济独立，更加注意保护个人隐私和财产安全了，要管理的私人信息多而杂乱，所以不得不借助专用的工具。</li>\n<li>其它选择：<ul>\n<li><a href=\"https://support.apple.com/kb/PH20093?locale=zh_CN\" target=\"_blank\" rel=\"noopener\"><strong>KeyChain Access</strong></a>：macOS &amp; iOS 原生支持，方便免费。</li>\n<li><a href=\"https://www.dashlane.com/\" target=\"_blank\" rel=\"noopener\"><strong>Dashlane</strong></a>：好用，但贵。</li>\n<li><a href=\"https://lastpass.com/\" target=\"_blank\" rel=\"noopener\"><strong>LastPass</strong></a>：够用，免费。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><a href=\"https://outlook.live.com/owa/\" target=\"_blank\" rel=\"noopener\"><strong>Outlook</strong></a><br>邮箱客户端，微软出品。</p>\n<ul>\n<li>方便设置在邮箱服务器生效的邮件规则（因为公司邮箱用 Outlook 的服务）。<br>自动处理，屏蔽干扰，提高邮件处理效率。<ul>\n<li>将不同类型邮件归类到不同文件夹；</li>\n<li>将可以忽略的邮件标为已读；</li>\n<li>自动删除无用邮件。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote class=\"blockquote-center\"><p>君子生非异也，善假于物也。</p>\n<p>荀子</p>\n</blockquote>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><ul>\n<li><strong>主要介绍 Windows、<a href=\"#iOS\">iOS</a> 的 Apps</strong>（下文 Apple 指代  iOS）。<ul>\n<li>适合自己的工具，才是最好的工具，所以本文仅供参考，自行尝试最重要。</li>\n<li>笔者是工具控，目力之内看起来还有点用的工具都会折腾过一遍。<ul>\n<li>过程中浪费了许多时间精力在很少派上用场甚至无用的工具上。</li>\n<li>善于发现生活中关键的效率瓶颈，再根据需求寻找或创造工具就足够了。</li>\n<li>因为折腾工具而忘记了把事做成的初心，实在是南辕北辙。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>App 选择原则</strong><ul>\n<li>「常用」的工具才值得折腾，不常用的凑合着用就行了。</li>\n<li>「实用」最重要，美观次之，价格别太贵就行。</li>\n<li>「稳定」：不能时常引起系统崩溃，起码提升效率的收益得超过操作系统崩溃重启的损失。</li>\n<li>「简洁易用」：满足实际的需求即可，不需要花哨、多余的功能。</li>\n</ul>\n</li>\n<li>参考相关文章<ul>\n<li>《<a href=\"/mac/efficiency\">Mac 效率指南</a>》</li>\n<li>《<a href=\"/mac/shortcuts\">Mac 快捷键</a>》</li>\n</ul>\n</li>\n<li>参考阅读<ul>\n<li><a href=\"http://sspai.com/\" target=\"_blank\" rel=\"noopener\"><strong>少数派</strong></a> - 高质量 App 推荐媒体，关于 iOS、Mac、硬件。</li>\n<li><a href=\"https://github.com/hzlzh/Best-App\" target=\"_blank\" rel=\"noopener\"><strong>Best App</strong></a> - List in GitHub</li>\n</ul>\n</li>\n<li>字体格式的含义<ul>\n<li><del>删除线</del> 标识的一定是我现在不用的 Apps。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h2><h3 id=\"常用\"><a href=\"#常用\" class=\"headerlink\" title=\"常用\"></a>常用</h3><ul>\n<li><p>网络访问</p>\n<ul>\n<li>Chrome<ul>\n<li>配合 <a href=\"https://chrome.google.com/webstore/detail/cvim/ihlenndgcmojhcghmfjfneahoeklbjjh\" target=\"_blank\" rel=\"noopener\"><strong>cVim</strong></a> 拓展，可在浏览器内 <strong>使用 Vim 键位</strong> 浏览网页、操作浏览器！键盘党神器<ul>\n<li>可惜它无法在页面未加载完毕的情况下使用 Vim 键位，不够（<a href=\"http://www.firefox.com.cn/\" target=\"_blank\" rel=\"noopener\">Firefox</a> + <a href=\"https://github.com/akhodakivskiy/VimFx\" target=\"_blank\" rel=\"noopener\">VimFX</a>）极致！</li>\n</ul>\n</li>\n<li>用 <strong>Inspect Element</strong>（审查元素）配合 <strong>Postman</strong> 等做 Web 开发、调试，比 Firefox 顺手。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>常用</p>\n<ul>\n<li><p><a href=\"https://trello.com/\" target=\"_blank\" rel=\"noopener\"><strong>Trello</strong></a> <sup>Favorite</sup></p>\n<p>基于 Board 的事务管理。</p>\n<ul>\n<li>使用 board 看板、list 列表、card 卡片等，组织事务；</li>\n<li>使用 description 描述、comment 评论、attachment 附件等，跟踪记录事务内容；</li>\n<li>根据 事务内容、label 标签、due date 截止期限等，考虑事务的优先次序。</li>\n<li>我在现实管理工作项目的过程中，GitLab Issue Board 的应用，给我带来了很大的帮助。虽然那段时间很忙，但我还是有条不紊地推进了我和同事间的分工协作。自此迷上了使用 Board 的方式去管理事务。</li>\n<li>类似的产品很多，Trello 是最简洁、好用、易上手的，这是我用它的关键原因。Slack 的服务被墙，在移动端访问不便（而 Trello 没被墙）；而国内的模仿者们则做得太复杂了，可能因为他们主攻 toB 的市场，不适合我这样的个人用户来使用，所以无爱。</li>\n</ul>\n</li>\n<li><p><a href=\"https://www.2doapp.com/\" target=\"_blank\" rel=\"noopener\"><strong>2Do</strong></a> <sup>Powerful</sup><br>GTD 事务管理。</p>\n<ul>\n<li>功能齐全、好用，用法可简可繁。快捷键完备！</li>\n<li>推荐使用 iCloud Reminders 的 CalDAV 同步方式（支持 2Do 绝大部分特性，足以满足我的需求）；Dropbox 的同步方式虽然可以支持 2Do 的所有特性，可是需要翻墙才能同步数据，iPhone 需要长期开着 VPN 略显麻烦。所以为了稳定和省心，选择了前一种同步方式。</li>\n</ul>\n</li>\n<li><p><a href=\"https://agilebits.com/onepassword\" target=\"_blank\" rel=\"noopener\"><strong>1Password</strong></a> <sup>Privacy</sup></p>\n<p>帐号密码管理，以及私人信息的加密存储。</p>\n<ul>\n<li>用一（两）个主密码管理所有其它密码。可生成随机密码，可记录登录网站时用的帐号密码，可自动填写表单登录网站。</li>\n<li>以前一直用不惯，觉得用浏览器自带的自动登录和 iCloud 的 <a href=\"https://support.apple.com/kb/PH20093?locale=zh_CN\" target=\"_blank\" rel=\"noopener\"><strong>KeyChain Access</strong></a> 来记录管理帐号和密码足矣，可是不便于保存一些私人信息。工作之后，经济独立，更加注意保护个人隐私和财产安全了，要管理的私人信息多而杂乱，所以不得不借助专用的工具。</li>\n<li>其它选择：<ul>\n<li><a href=\"https://support.apple.com/kb/PH20093?locale=zh_CN\" target=\"_blank\" rel=\"noopener\"><strong>KeyChain Access</strong></a>：macOS &amp; iOS 原生支持，方便免费。</li>\n<li><a href=\"https://www.dashlane.com/\" target=\"_blank\" rel=\"noopener\"><strong>Dashlane</strong></a>：好用，但贵。</li>\n<li><a href=\"https://lastpass.com/\" target=\"_blank\" rel=\"noopener\"><strong>LastPass</strong></a>：够用，免费。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><a href=\"https://outlook.live.com/owa/\" target=\"_blank\" rel=\"noopener\"><strong>Outlook</strong></a><br>邮箱客户端，微软出品。</p>\n<ul>\n<li>方便设置在邮箱服务器生效的邮件规则（因为公司邮箱用 Outlook 的服务）。<br>自动处理，屏蔽干扰，提高邮件处理效率。<ul>\n<li>将不同类型邮件归类到不同文件夹；</li>\n<li>将可以忽略的邮件标为已读；</li>\n<li>自动删除无用邮件。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Winddows bat 基础","date":"2018-08-20T03:13:56.000Z","_content":"\n### bat语法\n\n```cmd\ncd  ./RptFile/%Today%\ndir /B /A-D .\\end.ok 2>nul | find /V /C \"\">D:/TT/count.txt\nset /P c=<D:/TT/count.txt\necho END.OK   %c%个\n```\n\n```cmd\n::此脚本用来统计目录下文件与文件夹个数 与wind属性相似。\n::把D:\\putty替换成统计目录\n\n@echo off&title limq @ BAT-GO  At:2010-09-19 12:23:59\nset Today=%Date:~0,4%%Date:~5,2%%Date:~8,2%\necho 今天是%Today%下面开始统计文件\necho 统计中~~~\nfor /f \"delims=\" %%a in ('dir /s/b/a-d D:\\putty ') do set/a a+=1\nfor /f \"delims=\" %%a in ('dir /s/b/ad  D:\\putty ') do set/a b+=1\nset /p=【D:\\putty 】文件夹内有 %b% 个文件夹， %a% 个文件，<nul&pause\n```\n例子1：\n`for /r %%i in (  ) do echo %%i`\n解释：\n如果在括号里的是一些无特殊意义的字符如\".\"  \"abc\"之类的， 那输出的%%i\n的值为遍历到的文件夹的绝对地址（地址带有\\号）后加上这些特殊字符。\n\n如果括号里的是含有通配符（* ？）的，那么不是像上边那样直接加在文件夹地址后了。含有通配符的字符串会被扩展成实际存在的文件名。\n比如 `for /r %%i in (1.t*t) do echo %%i` 这个代码将显示所有符合要求（比如 1.txt 1.tt 1.tst）的文件的绝对路径。\n\n\n\n例子2：\n`for /d /r %%i in ( ) do echo %%i`\n解释：\n第一种情况和上面相似，直接把字符加在路径后面。\n\n如果含有通配符的，那么它将显示所有的文件夹名符合通配规则的文件夹的绝对路径，同时去掉\\号。\n\nps：\n\n例子1的代码会把当前目录和子目录显示出来，而例子2只显示当前目录的子目录。\n例子1显示的结果可以看成是文件，而例子2显示的结果则应该看成是文件夹，因为有/d 的存在。\n如果输出的%%i格式达不到要求，还可以用%%~fi 之类的修正。","source":"_posts/batjichu.md","raw":"---\ntitle: Winddows bat 基础\ndate: 2018-08-20 11:13:56\ntags: [bat, Windows]\ncategories: \n- Program \n- bat\n---\n\n### bat语法\n\n```cmd\ncd  ./RptFile/%Today%\ndir /B /A-D .\\end.ok 2>nul | find /V /C \"\">D:/TT/count.txt\nset /P c=<D:/TT/count.txt\necho END.OK   %c%个\n```\n\n```cmd\n::此脚本用来统计目录下文件与文件夹个数 与wind属性相似。\n::把D:\\putty替换成统计目录\n\n@echo off&title limq @ BAT-GO  At:2010-09-19 12:23:59\nset Today=%Date:~0,4%%Date:~5,2%%Date:~8,2%\necho 今天是%Today%下面开始统计文件\necho 统计中~~~\nfor /f \"delims=\" %%a in ('dir /s/b/a-d D:\\putty ') do set/a a+=1\nfor /f \"delims=\" %%a in ('dir /s/b/ad  D:\\putty ') do set/a b+=1\nset /p=【D:\\putty 】文件夹内有 %b% 个文件夹， %a% 个文件，<nul&pause\n```\n例子1：\n`for /r %%i in (  ) do echo %%i`\n解释：\n如果在括号里的是一些无特殊意义的字符如\".\"  \"abc\"之类的， 那输出的%%i\n的值为遍历到的文件夹的绝对地址（地址带有\\号）后加上这些特殊字符。\n\n如果括号里的是含有通配符（* ？）的，那么不是像上边那样直接加在文件夹地址后了。含有通配符的字符串会被扩展成实际存在的文件名。\n比如 `for /r %%i in (1.t*t) do echo %%i` 这个代码将显示所有符合要求（比如 1.txt 1.tt 1.tst）的文件的绝对路径。\n\n\n\n例子2：\n`for /d /r %%i in ( ) do echo %%i`\n解释：\n第一种情况和上面相似，直接把字符加在路径后面。\n\n如果含有通配符的，那么它将显示所有的文件夹名符合通配规则的文件夹的绝对路径，同时去掉\\号。\n\nps：\n\n例子1的代码会把当前目录和子目录显示出来，而例子2只显示当前目录的子目录。\n例子1显示的结果可以看成是文件，而例子2显示的结果则应该看成是文件夹，因为有/d 的存在。\n如果输出的%%i格式达不到要求，还可以用%%~fi 之类的修正。","slug":"batjichu","published":1,"updated":"2018-08-22T13:36:27.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl5d990r000d0owklnndgh2r","content":"<h3 id=\"bat语法\"><a href=\"#bat语法\" class=\"headerlink\" title=\"bat语法\"></a>bat语法</h3><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span>  ./RptFile/<span class=\"variable\">%Today%</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> /B /A-D .\\end.ok <span class=\"number\">2</span>&gt;<span class=\"built_in\">nul</span> | <span class=\"built_in\">find</span> /V /C \"\"&gt;D:/TT/count.txt</span><br><span class=\"line\"><span class=\"built_in\">set</span> /P c=&lt;D:/TT/count.txt</span><br><span class=\"line\"><span class=\"built_in\">echo</span> END.OK   <span class=\"variable\">%c%</span>个</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">::此脚本用来统计目录下文件与文件夹个数 与wind属性相似。</span><br><span class=\"line\">::把D:\\putty替换成统计目录</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"built_in\">echo</span> off&amp;<span class=\"built_in\">title</span> limq @ BAT-GO  <span class=\"built_in\">At</span>:<span class=\"number\">2010</span>-<span class=\"number\">09</span>-<span class=\"number\">19</span> <span class=\"number\">12</span>:<span class=\"number\">23</span>:<span class=\"number\">59</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> Today=<span class=\"variable\">%Date:~0,4%</span><span class=\"variable\">%Date:~5,2%</span><span class=\"variable\">%Date:~8,2%</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 今天是<span class=\"variable\">%Today%</span>下面开始统计文件</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 统计中~~~</span><br><span class=\"line\"><span class=\"keyword\">for</span> /f \"delims=\" <span class=\"variable\">%%a</span> <span class=\"keyword\">in</span> ('<span class=\"built_in\">dir</span> /s/b/a-d D:\\putty ') <span class=\"keyword\">do</span> <span class=\"built_in\">set</span>/a a+=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> /f \"delims=\" <span class=\"variable\">%%a</span> <span class=\"keyword\">in</span> ('<span class=\"built_in\">dir</span> /s/b/ad  D:\\putty ') <span class=\"keyword\">do</span> <span class=\"built_in\">set</span>/a b+=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> /p=【D:\\putty 】文件夹内有 <span class=\"variable\">%b%</span> 个文件夹， <span class=\"variable\">%a%</span> 个文件，&lt;<span class=\"built_in\">nul</span>&amp;<span class=\"built_in\">pause</span></span><br></pre></td></tr></table></figure>\n<p>例子1：<br><code>for /r %%i in (  ) do echo %%i</code><br>解释：<br>如果在括号里的是一些无特殊意义的字符如”.”  “abc”之类的， 那输出的%%i<br>的值为遍历到的文件夹的绝对地址（地址带有\\号）后加上这些特殊字符。</p>\n<p>如果括号里的是含有通配符（<em> ？）的，那么不是像上边那样直接加在文件夹地址后了。含有通配符的字符串会被扩展成实际存在的文件名。<br>比如 `for /r %%i in (1.t</em>t) do echo %%i` 这个代码将显示所有符合要求（比如 1.txt 1.tt 1.tst）的文件的绝对路径。</p>\n<p>例子2：<br><code>for /d /r %%i in ( ) do echo %%i</code><br>解释：<br>第一种情况和上面相似，直接把字符加在路径后面。</p>\n<p>如果含有通配符的，那么它将显示所有的文件夹名符合通配规则的文件夹的绝对路径，同时去掉\\号。</p>\n<p>ps：</p>\n<p>例子1的代码会把当前目录和子目录显示出来，而例子2只显示当前目录的子目录。<br>例子1显示的结果可以看成是文件，而例子2显示的结果则应该看成是文件夹，因为有/d 的存在。<br>如果输出的%%i格式达不到要求，还可以用%%~fi 之类的修正。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"bat语法\"><a href=\"#bat语法\" class=\"headerlink\" title=\"bat语法\"></a>bat语法</h3><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span>  ./RptFile/<span class=\"variable\">%Today%</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> /B /A-D .\\end.ok <span class=\"number\">2</span>&gt;<span class=\"built_in\">nul</span> | <span class=\"built_in\">find</span> /V /C \"\"&gt;D:/TT/count.txt</span><br><span class=\"line\"><span class=\"built_in\">set</span> /P c=&lt;D:/TT/count.txt</span><br><span class=\"line\"><span class=\"built_in\">echo</span> END.OK   <span class=\"variable\">%c%</span>个</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">::此脚本用来统计目录下文件与文件夹个数 与wind属性相似。</span><br><span class=\"line\">::把D:\\putty替换成统计目录</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"built_in\">echo</span> off&amp;<span class=\"built_in\">title</span> limq @ BAT-GO  <span class=\"built_in\">At</span>:<span class=\"number\">2010</span>-<span class=\"number\">09</span>-<span class=\"number\">19</span> <span class=\"number\">12</span>:<span class=\"number\">23</span>:<span class=\"number\">59</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> Today=<span class=\"variable\">%Date:~0,4%</span><span class=\"variable\">%Date:~5,2%</span><span class=\"variable\">%Date:~8,2%</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 今天是<span class=\"variable\">%Today%</span>下面开始统计文件</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 统计中~~~</span><br><span class=\"line\"><span class=\"keyword\">for</span> /f \"delims=\" <span class=\"variable\">%%a</span> <span class=\"keyword\">in</span> ('<span class=\"built_in\">dir</span> /s/b/a-d D:\\putty ') <span class=\"keyword\">do</span> <span class=\"built_in\">set</span>/a a+=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> /f \"delims=\" <span class=\"variable\">%%a</span> <span class=\"keyword\">in</span> ('<span class=\"built_in\">dir</span> /s/b/ad  D:\\putty ') <span class=\"keyword\">do</span> <span class=\"built_in\">set</span>/a b+=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> /p=【D:\\putty 】文件夹内有 <span class=\"variable\">%b%</span> 个文件夹， <span class=\"variable\">%a%</span> 个文件，&lt;<span class=\"built_in\">nul</span>&amp;<span class=\"built_in\">pause</span></span><br></pre></td></tr></table></figure>\n<p>例子1：<br><code>for /r %%i in (  ) do echo %%i</code><br>解释：<br>如果在括号里的是一些无特殊意义的字符如”.”  “abc”之类的， 那输出的%%i<br>的值为遍历到的文件夹的绝对地址（地址带有\\号）后加上这些特殊字符。</p>\n<p>如果括号里的是含有通配符（<em> ？）的，那么不是像上边那样直接加在文件夹地址后了。含有通配符的字符串会被扩展成实际存在的文件名。<br>比如 `for /r %%i in (1.t</em>t) do echo %%i` 这个代码将显示所有符合要求（比如 1.txt 1.tt 1.tst）的文件的绝对路径。</p>\n<p>例子2：<br><code>for /d /r %%i in ( ) do echo %%i</code><br>解释：<br>第一种情况和上面相似，直接把字符加在路径后面。</p>\n<p>如果含有通配符的，那么它将显示所有的文件夹名符合通配规则的文件夹的绝对路径，同时去掉\\号。</p>\n<p>ps：</p>\n<p>例子1的代码会把当前目录和子目录显示出来，而例子2只显示当前目录的子目录。<br>例子1显示的结果可以看成是文件，而例子2显示的结果则应该看成是文件夹，因为有/d 的存在。<br>如果输出的%%i格式达不到要求，还可以用%%~fi 之类的修正。</p>\n"},{"title":"git基础配置命令","date":"2018-08-20T03:13:56.000Z","_content":"\n\n\n\n\n### 关于版本控制\n\n什么是“版本控制”？我为什么要关心它呢？ 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 在本书所展示的例子中，我们对保存着软件源代码的文件作版本控制，但实际上，你可以对任何类型的文件进行版本控制。 Git 就是一种版本控制工具。Git 自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。 它的速度飞快，极其适合管理大项目，有着令人难以置信的非线性分支管理系统（参见 [Git 分支](https://git-scm.com/book/zh/v2/ch00/ch03-git-branching)）。 \n\n### 命令行\n\nGit 有多种使用方式。 你可以使用原生的命令行模式，也可以使用 GUI 模式，这些 GUI 软件也能提供多种功能。 \n\n假如你是 Mac 用户，我们希望你懂得如何使用终端（Terminal）；假如你是 Windows 用户，我们希望你懂得如何使用命令窗口（Command Prompt）或 PowerShell。 如果你尚未掌握以上技能，我们建议你先停下来快速学习一下，本文讲述和举例将用到这些技能。\n\n### 安装 Git\n\n在你开始使用 Git 前，需要将它安装在你的计算机上。 即便已经安装，最好将它升级到最新的版本。 你可以通过软件包或者其它安装程序来安装，或者下载源码编译安装。 \n\n#### 在 Windows 上安装\n\n在 Windows 上安装 Git 也有几种安装方法。 官方版本可以在 Git 官方网站下载。 打开 [Downloading Git](http://git-scm.com/download/win)，下载会自动开始。 要注意这是一个名为 Git for Windows的项目（也叫做 msysGit），和 Git 是分别独立的项目；更多信息请访问 <http://msysgit.github.io/>。 \n\n### git基础配置\n\n\n安装完成 git 后需要做一些配置就可以使用 git 托管代码带 GitHub 上面了。开始使用 Git, 打开 开始 > 所有程序 > Git > git-bash。这样就进入的 GIt 的命令行。\n\n```bash\n# git 初始配置\ngit config --global user.name \"limq-debianvm-home\"\ngit config --global user.email \"gylimingqi@163.com\"\ngit config --global push.default simple\n# git 添加远程分支\ngit remote add origin git@github.com:dadiqq/nework-git.git\ngit remote add origin_soft  git@github.com:dadiqq/software.git\n#创建 ssh-key\n[root@ora11g ~]# mkdir .ssh\n[root@ora11g ~]# cd .ssh/\n #用ssh-keygen命令来生成密钥对，passphrase我们输入或不输入都行。\n[root@ora11g .ssh]# ssh-keygen -t rsa -C \"gylimigqi@163.com\"\n[root@ora11g .ssh]#ls\n[root@ora11g etl]# echo 'unset SSH_ASKPASS' >> ~/.bashrc && source ~/.bashrc\n\ngit clone https://github.com/dadiqq/nework-git.git   [路径]\ngit clone https://github.com/dadiqq/VFP.git\ngit remote remove <name>\ngit remote -v\n```\n\n### 设置github上的公钥\n#### 步骤如下：\n\n​    a. 登陆github后 -> \"Account Setting\" -> \"SSH Keys\"\n    b. \"Add SSH Key\"\n    c. Title随便填写一个，Key那里我们把把id_rsa.pub里的内容拷贝进去。\n\n### 测试\n\nssh -T git@github.com\n\n### 常用命令 \n\n```bash\n[root@ora11g etl]# echo 'unset SSH_ASKPASS' >> ~/.bashrc && source ~/.bashrc   \n#查看远程库\nenv GIT_SSL_NO_VERIFY=true  \ngit remote show origin\n#下载 GitHub 上项目\nenv GIT_SSL_NO_VERIFY=true   \ngit clone https://github.com/dadiqq/nework-git.git\ngit clone  git@github.com:dadiqq/nework-git.git\ngit clone --no-checkout https://github.com/dadiqq/nework-git.git tmp\n\ngit reset --hard HEAD\ngit push -u origin master\ncurl http://curl.haxx.se/ca/cacert.pem -o /etc/pki/tls/certs/ca-bundle.crt\n```\n\n工作的时候经常需要在各个目录之间跳转，可以通过环境变量对目录进行缩写，方便地在多个目录直接切换。\n在 ~/.bashrc 添加：\n\nexport wd=\"/d/Projects/MyProject/git\"\nexport doc=\"/d/Projects/documents/\"\n\n下面来验证以上的说法。\n创建一个空的项目，\n```bash\n$ mkdir project\n$ cd project\n$ git init\n$ vi  readme    # 添加一行文字并保存，比如“1111”\n$ git add readme\n$ git commit -m \"1st commit\"\n\n此时来看仓库中的对象目录\n\n$ tree .git/objects/\n```\n### 如果我们往一个非空的目录下 clone git 项目，就会提示错误信息：\n\n`fatal: destination path '.' already exists and is not an empty directory.`\n\n#### 解决的办法是：\n```bash\n1. 进入非空目录，假设是 /workdir/proj1\n2. git clone --no-checkout https://git.oschina.net/NextApp/platform.git tmp\n3. mv tmp/.git .   #将 tmp 目录下的 .git 目录移到当前目录\n4. rmdir tmp\n5. git reset --hard HEAD\n```\n然后就可以进行各种正常操作了。\n\n#### 第二方案\n```bash\nls -a  \nrm .git/ -rf \n```\n\n\n- [ ] 跑步\n- [ ] 写博客\n- [ ] 学习\n","source":"_posts/gitjichupeizhi.md","raw":"---\ntitle: git基础配置命令\ndate: 2018-08-20 11:13:56\ntags: [Git,版本控制]\ncategories: \n- Program \n- Git\n---\n\n\n\n\n\n### 关于版本控制\n\n什么是“版本控制”？我为什么要关心它呢？ 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 在本书所展示的例子中，我们对保存着软件源代码的文件作版本控制，但实际上，你可以对任何类型的文件进行版本控制。 Git 就是一种版本控制工具。Git 自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。 它的速度飞快，极其适合管理大项目，有着令人难以置信的非线性分支管理系统（参见 [Git 分支](https://git-scm.com/book/zh/v2/ch00/ch03-git-branching)）。 \n\n### 命令行\n\nGit 有多种使用方式。 你可以使用原生的命令行模式，也可以使用 GUI 模式，这些 GUI 软件也能提供多种功能。 \n\n假如你是 Mac 用户，我们希望你懂得如何使用终端（Terminal）；假如你是 Windows 用户，我们希望你懂得如何使用命令窗口（Command Prompt）或 PowerShell。 如果你尚未掌握以上技能，我们建议你先停下来快速学习一下，本文讲述和举例将用到这些技能。\n\n### 安装 Git\n\n在你开始使用 Git 前，需要将它安装在你的计算机上。 即便已经安装，最好将它升级到最新的版本。 你可以通过软件包或者其它安装程序来安装，或者下载源码编译安装。 \n\n#### 在 Windows 上安装\n\n在 Windows 上安装 Git 也有几种安装方法。 官方版本可以在 Git 官方网站下载。 打开 [Downloading Git](http://git-scm.com/download/win)，下载会自动开始。 要注意这是一个名为 Git for Windows的项目（也叫做 msysGit），和 Git 是分别独立的项目；更多信息请访问 <http://msysgit.github.io/>。 \n\n### git基础配置\n\n\n安装完成 git 后需要做一些配置就可以使用 git 托管代码带 GitHub 上面了。开始使用 Git, 打开 开始 > 所有程序 > Git > git-bash。这样就进入的 GIt 的命令行。\n\n```bash\n# git 初始配置\ngit config --global user.name \"limq-debianvm-home\"\ngit config --global user.email \"gylimingqi@163.com\"\ngit config --global push.default simple\n# git 添加远程分支\ngit remote add origin git@github.com:dadiqq/nework-git.git\ngit remote add origin_soft  git@github.com:dadiqq/software.git\n#创建 ssh-key\n[root@ora11g ~]# mkdir .ssh\n[root@ora11g ~]# cd .ssh/\n #用ssh-keygen命令来生成密钥对，passphrase我们输入或不输入都行。\n[root@ora11g .ssh]# ssh-keygen -t rsa -C \"gylimigqi@163.com\"\n[root@ora11g .ssh]#ls\n[root@ora11g etl]# echo 'unset SSH_ASKPASS' >> ~/.bashrc && source ~/.bashrc\n\ngit clone https://github.com/dadiqq/nework-git.git   [路径]\ngit clone https://github.com/dadiqq/VFP.git\ngit remote remove <name>\ngit remote -v\n```\n\n### 设置github上的公钥\n#### 步骤如下：\n\n​    a. 登陆github后 -> \"Account Setting\" -> \"SSH Keys\"\n    b. \"Add SSH Key\"\n    c. Title随便填写一个，Key那里我们把把id_rsa.pub里的内容拷贝进去。\n\n### 测试\n\nssh -T git@github.com\n\n### 常用命令 \n\n```bash\n[root@ora11g etl]# echo 'unset SSH_ASKPASS' >> ~/.bashrc && source ~/.bashrc   \n#查看远程库\nenv GIT_SSL_NO_VERIFY=true  \ngit remote show origin\n#下载 GitHub 上项目\nenv GIT_SSL_NO_VERIFY=true   \ngit clone https://github.com/dadiqq/nework-git.git\ngit clone  git@github.com:dadiqq/nework-git.git\ngit clone --no-checkout https://github.com/dadiqq/nework-git.git tmp\n\ngit reset --hard HEAD\ngit push -u origin master\ncurl http://curl.haxx.se/ca/cacert.pem -o /etc/pki/tls/certs/ca-bundle.crt\n```\n\n工作的时候经常需要在各个目录之间跳转，可以通过环境变量对目录进行缩写，方便地在多个目录直接切换。\n在 ~/.bashrc 添加：\n\nexport wd=\"/d/Projects/MyProject/git\"\nexport doc=\"/d/Projects/documents/\"\n\n下面来验证以上的说法。\n创建一个空的项目，\n```bash\n$ mkdir project\n$ cd project\n$ git init\n$ vi  readme    # 添加一行文字并保存，比如“1111”\n$ git add readme\n$ git commit -m \"1st commit\"\n\n此时来看仓库中的对象目录\n\n$ tree .git/objects/\n```\n### 如果我们往一个非空的目录下 clone git 项目，就会提示错误信息：\n\n`fatal: destination path '.' already exists and is not an empty directory.`\n\n#### 解决的办法是：\n```bash\n1. 进入非空目录，假设是 /workdir/proj1\n2. git clone --no-checkout https://git.oschina.net/NextApp/platform.git tmp\n3. mv tmp/.git .   #将 tmp 目录下的 .git 目录移到当前目录\n4. rmdir tmp\n5. git reset --hard HEAD\n```\n然后就可以进行各种正常操作了。\n\n#### 第二方案\n```bash\nls -a  \nrm .git/ -rf \n```\n\n\n- [ ] 跑步\n- [ ] 写博客\n- [ ] 学习\n","slug":"gitjichupeizhi","published":1,"updated":"2018-08-22T13:36:27.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl5d990w000e0owk36yqtb3p","content":"<h3 id=\"关于版本控制\"><a href=\"#关于版本控制\" class=\"headerlink\" title=\"关于版本控制\"></a>关于版本控制</h3><p>什么是“版本控制”？我为什么要关心它呢？ 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 在本书所展示的例子中，我们对保存着软件源代码的文件作版本控制，但实际上，你可以对任何类型的文件进行版本控制。 Git 就是一种版本控制工具。Git 自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。 它的速度飞快，极其适合管理大项目，有着令人难以置信的非线性分支管理系统（参见 <a href=\"https://git-scm.com/book/zh/v2/ch00/ch03-git-branching\" target=\"_blank\" rel=\"noopener\">Git 分支</a>）。 </p>\n<h3 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h3><p>Git 有多种使用方式。 你可以使用原生的命令行模式，也可以使用 GUI 模式，这些 GUI 软件也能提供多种功能。 </p>\n<p>假如你是 Mac 用户，我们希望你懂得如何使用终端（Terminal）；假如你是 Windows 用户，我们希望你懂得如何使用命令窗口（Command Prompt）或 PowerShell。 如果你尚未掌握以上技能，我们建议你先停下来快速学习一下，本文讲述和举例将用到这些技能。</p>\n<h3 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h3><p>在你开始使用 Git 前，需要将它安装在你的计算机上。 即便已经安装，最好将它升级到最新的版本。 你可以通过软件包或者其它安装程序来安装，或者下载源码编译安装。 </p>\n<h4 id=\"在-Windows-上安装\"><a href=\"#在-Windows-上安装\" class=\"headerlink\" title=\"在 Windows 上安装\"></a>在 Windows 上安装</h4><p>在 Windows 上安装 Git 也有几种安装方法。 官方版本可以在 Git 官方网站下载。 打开 <a href=\"http://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">Downloading Git</a>，下载会自动开始。 要注意这是一个名为 Git for Windows的项目（也叫做 msysGit），和 Git 是分别独立的项目；更多信息请访问 <a href=\"http://msysgit.github.io/\" target=\"_blank\" rel=\"noopener\">http://msysgit.github.io/</a>。 </p>\n<h3 id=\"git基础配置\"><a href=\"#git基础配置\" class=\"headerlink\" title=\"git基础配置\"></a>git基础配置</h3><p>安装完成 git 后需要做一些配置就可以使用 git 托管代码带 GitHub 上面了。开始使用 Git, 打开 开始 &gt; 所有程序 &gt; Git &gt; git-bash。这样就进入的 GIt 的命令行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git 初始配置</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">\"limq-debianvm-home\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"gylimingqi@163.com\"</span></span><br><span class=\"line\">git config --global push.default simple</span><br><span class=\"line\"><span class=\"comment\"># git 添加远程分支</span></span><br><span class=\"line\">git remote add origin git@github.com:dadiqq/nework-git.git</span><br><span class=\"line\">git remote add origin_soft  git@github.com:dadiqq/software.git</span><br><span class=\"line\"><span class=\"comment\">#创建 ssh-key</span></span><br><span class=\"line\">[root@ora11g ~]<span class=\"comment\"># mkdir .ssh</span></span><br><span class=\"line\">[root@ora11g ~]<span class=\"comment\"># cd .ssh/</span></span><br><span class=\"line\"> <span class=\"comment\">#用ssh-keygen命令来生成密钥对，passphrase我们输入或不输入都行。</span></span><br><span class=\"line\">[root@ora11g .ssh]<span class=\"comment\"># ssh-keygen -t rsa -C \"gylimigqi@163.com\"</span></span><br><span class=\"line\">[root@ora11g .ssh]<span class=\"comment\">#ls</span></span><br><span class=\"line\">[root@ora11g etl]<span class=\"comment\"># echo 'unset SSH_ASKPASS' &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/dadiqq/nework-git.git   [路径]</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/dadiqq/VFP.git</span><br><span class=\"line\">git remote remove &lt;name&gt;</span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置github上的公钥\"><a href=\"#设置github上的公钥\" class=\"headerlink\" title=\"设置github上的公钥\"></a>设置github上的公钥</h3><h4 id=\"步骤如下：\"><a href=\"#步骤如下：\" class=\"headerlink\" title=\"步骤如下：\"></a>步骤如下：</h4><p>​    a. 登陆github后 -&gt; “Account Setting” -&gt; “SSH Keys”<br>    b. “Add SSH Key”<br>    c. Title随便填写一个，Key那里我们把把id_rsa.pub里的内容拷贝进去。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a></p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ora11g etl]<span class=\"comment\"># echo 'unset SSH_ASKPASS' &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc   </span></span><br><span class=\"line\"><span class=\"comment\">#查看远程库</span></span><br><span class=\"line\">env GIT_SSL_NO_VERIFY=<span class=\"literal\">true</span>  </span><br><span class=\"line\">git remote show origin</span><br><span class=\"line\"><span class=\"comment\">#下载 GitHub 上项目</span></span><br><span class=\"line\">env GIT_SSL_NO_VERIFY=<span class=\"literal\">true</span>   </span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/dadiqq/nework-git.git</span><br><span class=\"line\">git <span class=\"built_in\">clone</span>  git@github.com:dadiqq/nework-git.git</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> --no-checkout https://github.com/dadiqq/nework-git.git tmp</span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard HEAD</span><br><span class=\"line\">git push -u origin master</span><br><span class=\"line\">curl http://curl.haxx.se/ca/cacert.pem -o /etc/pki/tls/certs/ca-bundle.crt</span><br></pre></td></tr></table></figure>\n<p>工作的时候经常需要在各个目录之间跳转，可以通过环境变量对目录进行缩写，方便地在多个目录直接切换。<br>在 ~/.bashrc 添加：</p>\n<p>export wd=”/d/Projects/MyProject/git”<br>export doc=”/d/Projects/documents/“</p>\n<p>下面来验证以上的说法。<br>创建一个空的项目，<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir project</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> project</span><br><span class=\"line\">$ git init</span><br><span class=\"line\">$ vi  readme    <span class=\"comment\"># 添加一行文字并保存，比如“1111”</span></span><br><span class=\"line\">$ git add readme</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"1st commit\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">此时来看仓库中的对象目录</span><br><span class=\"line\"></span><br><span class=\"line\">$ tree .git/objects/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"如果我们往一个非空的目录下-clone-git-项目，就会提示错误信息：\"><a href=\"#如果我们往一个非空的目录下-clone-git-项目，就会提示错误信息：\" class=\"headerlink\" title=\"如果我们往一个非空的目录下 clone git 项目，就会提示错误信息：\"></a>如果我们往一个非空的目录下 clone git 项目，就会提示错误信息：</h3><p><code>fatal: destination path &#39;.&#39; already exists and is not an empty directory.</code></p>\n<h4 id=\"解决的办法是：\"><a href=\"#解决的办法是：\" class=\"headerlink\" title=\"解决的办法是：\"></a>解决的办法是：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 进入非空目录，假设是 /workdir/proj1</span><br><span class=\"line\">2. git <span class=\"built_in\">clone</span> --no-checkout https://git.oschina.net/NextApp/platform.git tmp</span><br><span class=\"line\">3. mv tmp/.git .   <span class=\"comment\">#将 tmp 目录下的 .git 目录移到当前目录</span></span><br><span class=\"line\">4. rmdir tmp</span><br><span class=\"line\">5. git reset --hard HEAD</span><br></pre></td></tr></table></figure>\n<p>然后就可以进行各种正常操作了。</p>\n<h4 id=\"第二方案\"><a href=\"#第二方案\" class=\"headerlink\" title=\"第二方案\"></a>第二方案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a  </span><br><span class=\"line\">rm .git/ -rf</span><br></pre></td></tr></table></figure>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 跑步</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 写博客</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 学习</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于版本控制\"><a href=\"#关于版本控制\" class=\"headerlink\" title=\"关于版本控制\"></a>关于版本控制</h3><p>什么是“版本控制”？我为什么要关心它呢？ 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 在本书所展示的例子中，我们对保存着软件源代码的文件作版本控制，但实际上，你可以对任何类型的文件进行版本控制。 Git 就是一种版本控制工具。Git 自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。 它的速度飞快，极其适合管理大项目，有着令人难以置信的非线性分支管理系统（参见 <a href=\"https://git-scm.com/book/zh/v2/ch00/ch03-git-branching\" target=\"_blank\" rel=\"noopener\">Git 分支</a>）。 </p>\n<h3 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h3><p>Git 有多种使用方式。 你可以使用原生的命令行模式，也可以使用 GUI 模式，这些 GUI 软件也能提供多种功能。 </p>\n<p>假如你是 Mac 用户，我们希望你懂得如何使用终端（Terminal）；假如你是 Windows 用户，我们希望你懂得如何使用命令窗口（Command Prompt）或 PowerShell。 如果你尚未掌握以上技能，我们建议你先停下来快速学习一下，本文讲述和举例将用到这些技能。</p>\n<h3 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h3><p>在你开始使用 Git 前，需要将它安装在你的计算机上。 即便已经安装，最好将它升级到最新的版本。 你可以通过软件包或者其它安装程序来安装，或者下载源码编译安装。 </p>\n<h4 id=\"在-Windows-上安装\"><a href=\"#在-Windows-上安装\" class=\"headerlink\" title=\"在 Windows 上安装\"></a>在 Windows 上安装</h4><p>在 Windows 上安装 Git 也有几种安装方法。 官方版本可以在 Git 官方网站下载。 打开 <a href=\"http://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">Downloading Git</a>，下载会自动开始。 要注意这是一个名为 Git for Windows的项目（也叫做 msysGit），和 Git 是分别独立的项目；更多信息请访问 <a href=\"http://msysgit.github.io/\" target=\"_blank\" rel=\"noopener\">http://msysgit.github.io/</a>。 </p>\n<h3 id=\"git基础配置\"><a href=\"#git基础配置\" class=\"headerlink\" title=\"git基础配置\"></a>git基础配置</h3><p>安装完成 git 后需要做一些配置就可以使用 git 托管代码带 GitHub 上面了。开始使用 Git, 打开 开始 &gt; 所有程序 &gt; Git &gt; git-bash。这样就进入的 GIt 的命令行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git 初始配置</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">\"limq-debianvm-home\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"gylimingqi@163.com\"</span></span><br><span class=\"line\">git config --global push.default simple</span><br><span class=\"line\"><span class=\"comment\"># git 添加远程分支</span></span><br><span class=\"line\">git remote add origin git@github.com:dadiqq/nework-git.git</span><br><span class=\"line\">git remote add origin_soft  git@github.com:dadiqq/software.git</span><br><span class=\"line\"><span class=\"comment\">#创建 ssh-key</span></span><br><span class=\"line\">[root@ora11g ~]<span class=\"comment\"># mkdir .ssh</span></span><br><span class=\"line\">[root@ora11g ~]<span class=\"comment\"># cd .ssh/</span></span><br><span class=\"line\"> <span class=\"comment\">#用ssh-keygen命令来生成密钥对，passphrase我们输入或不输入都行。</span></span><br><span class=\"line\">[root@ora11g .ssh]<span class=\"comment\"># ssh-keygen -t rsa -C \"gylimigqi@163.com\"</span></span><br><span class=\"line\">[root@ora11g .ssh]<span class=\"comment\">#ls</span></span><br><span class=\"line\">[root@ora11g etl]<span class=\"comment\"># echo 'unset SSH_ASKPASS' &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/dadiqq/nework-git.git   [路径]</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/dadiqq/VFP.git</span><br><span class=\"line\">git remote remove &lt;name&gt;</span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置github上的公钥\"><a href=\"#设置github上的公钥\" class=\"headerlink\" title=\"设置github上的公钥\"></a>设置github上的公钥</h3><h4 id=\"步骤如下：\"><a href=\"#步骤如下：\" class=\"headerlink\" title=\"步骤如下：\"></a>步骤如下：</h4><p>​    a. 登陆github后 -&gt; “Account Setting” -&gt; “SSH Keys”<br>    b. “Add SSH Key”<br>    c. Title随便填写一个，Key那里我们把把id_rsa.pub里的内容拷贝进去。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a></p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ora11g etl]<span class=\"comment\"># echo 'unset SSH_ASKPASS' &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc   </span></span><br><span class=\"line\"><span class=\"comment\">#查看远程库</span></span><br><span class=\"line\">env GIT_SSL_NO_VERIFY=<span class=\"literal\">true</span>  </span><br><span class=\"line\">git remote show origin</span><br><span class=\"line\"><span class=\"comment\">#下载 GitHub 上项目</span></span><br><span class=\"line\">env GIT_SSL_NO_VERIFY=<span class=\"literal\">true</span>   </span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/dadiqq/nework-git.git</span><br><span class=\"line\">git <span class=\"built_in\">clone</span>  git@github.com:dadiqq/nework-git.git</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> --no-checkout https://github.com/dadiqq/nework-git.git tmp</span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard HEAD</span><br><span class=\"line\">git push -u origin master</span><br><span class=\"line\">curl http://curl.haxx.se/ca/cacert.pem -o /etc/pki/tls/certs/ca-bundle.crt</span><br></pre></td></tr></table></figure>\n<p>工作的时候经常需要在各个目录之间跳转，可以通过环境变量对目录进行缩写，方便地在多个目录直接切换。<br>在 ~/.bashrc 添加：</p>\n<p>export wd=”/d/Projects/MyProject/git”<br>export doc=”/d/Projects/documents/“</p>\n<p>下面来验证以上的说法。<br>创建一个空的项目，<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir project</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> project</span><br><span class=\"line\">$ git init</span><br><span class=\"line\">$ vi  readme    <span class=\"comment\"># 添加一行文字并保存，比如“1111”</span></span><br><span class=\"line\">$ git add readme</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"1st commit\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">此时来看仓库中的对象目录</span><br><span class=\"line\"></span><br><span class=\"line\">$ tree .git/objects/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"如果我们往一个非空的目录下-clone-git-项目，就会提示错误信息：\"><a href=\"#如果我们往一个非空的目录下-clone-git-项目，就会提示错误信息：\" class=\"headerlink\" title=\"如果我们往一个非空的目录下 clone git 项目，就会提示错误信息：\"></a>如果我们往一个非空的目录下 clone git 项目，就会提示错误信息：</h3><p><code>fatal: destination path &#39;.&#39; already exists and is not an empty directory.</code></p>\n<h4 id=\"解决的办法是：\"><a href=\"#解决的办法是：\" class=\"headerlink\" title=\"解决的办法是：\"></a>解决的办法是：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 进入非空目录，假设是 /workdir/proj1</span><br><span class=\"line\">2. git <span class=\"built_in\">clone</span> --no-checkout https://git.oschina.net/NextApp/platform.git tmp</span><br><span class=\"line\">3. mv tmp/.git .   <span class=\"comment\">#将 tmp 目录下的 .git 目录移到当前目录</span></span><br><span class=\"line\">4. rmdir tmp</span><br><span class=\"line\">5. git reset --hard HEAD</span><br></pre></td></tr></table></figure>\n<p>然后就可以进行各种正常操作了。</p>\n<h4 id=\"第二方案\"><a href=\"#第二方案\" class=\"headerlink\" title=\"第二方案\"></a>第二方案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a  </span><br><span class=\"line\">rm .git/ -rf</span><br></pre></td></tr></table></figure>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 跑步</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 写博客</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 学习</li>\n</ul>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-08-22T13:36:27.593Z","updated":"2018-08-22T13:36:27.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl5d9917000i0owk1p0ggwqa","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"用 Hexo + Github 搭建属于自己的博客","date":"2018-08-20T03:13:56.000Z","_content":"\n最近几天一直想做一个自己的博客，把学习过的技术看过的文章都整理起来，花了几天的时间[博客](limqvip.github.io)初步搭建完成，看了很多大佬文章，但是自己搭建还是遇到很多坑，下面就写写搭建过程。希望对看到的人有帮助。\n\n本文主要介绍 Windows 7 x64 下 Hexo: 3.7.1 + GitHub 搭建（不同的 Hexo 版本，有的设置可能会有差异）。\n\n## 搭建环境\n\n#### \t1. 安装 git\n\n可以到 [git](https://git-scm.com/download/win) 官网下载相应平台版本进行安装。\n\n#### \t2. 申请 GitHub 账号\n\n进入 [GitHub ](https://link.jianshu.com/?t=https://github.com/) 注册。注册过程略。\n\n#### \t3. 安装 node.js\n\n到 [node.js](https://link.jianshu.com/?t=https://nodejs.org/en/download/) 官网下载相应平台的最新版本，傻瓜式安装（自带安装 npm）。在 git bash 下执行`npm -v` 查看是否安装成功 npm。如果安装成功会显示对应版本号。\n\n```bash\n$ npm -v\n5.6.0\n```\n\n#### 4. 安装 Hexo\n\n打开 git bash 或者 cmd, 执行以下命令:\n`npm install -g hexo`\n\n## 搭建 Hexo\n\n#### 1. 初始化 \n\n执行`hexo init myblog`创建一个名为 myblog 的博客。该命令会生成一个 myblog 文件夹。进入 myblog 目录 `cd myblog `, myblog 是博客的主目录。\n\n#### 2. 安装必须依赖包\n\n`hexo install <name>`\n\n#### 3. 生成静态页面\n\n`hexo generate` or `hexo g`\n\n#### 4. 本地运行\n\n`hexo server` 或者 `hexo s`\n\n打开浏览器，在地址栏输入localhost:4000，就可以看到我们搭建好的本地博客了。到此只是搭建好了本地博客。\n\n## 部署博客到 GitHub , 通过域名访问博客。\n#### 1.新建repository\n\n建立与你用户名对应的仓库，仓库名必须为【 your_username.github.io】,例如我的博客 limqvip.github.io. \n\n#### 2.部署博客\n\n##### 1. 修改配置文件\n\n进入你的hexo文件夹根目录下，用编辑器打开 _config.yml, 修改 deploy 项，如下（根据你的 GitHub 进行相应更改）：\n\n```bash\ndeploy:\n  type: git       #注意：有的版本type是github\n  repo: https://github.com/limqvip/limqvip.github.io.git\n  branch: master\n```\n\n##### 2. 执行 `hexo d` 部署到 github 上。\n\n```bash\nINFO  Deploying: git\nINFO  Clearing .deploy_git folder...\nINFO  Copying files from public folder...\nINFO  Copying files from extend dirs...\n…略\n create mode 100644 \"tags/\\347\\211\\210\\346\\234\\254\\346\\216\\247\\345\\210\\266/index.html\"\nBranch master set up to track remote branch master from git@github.com:limqvip/limqvip.github.io.git.\nTo github.com:limqvip/limqvip.github.io.git\n   5867eb8..f25e3d4  HEAD -> master\nINFO  Deploy done: git\n```\n\n此时就完成部署了，用浏览器访问 https://limqvip.github.io 即可(第一次发布可能会有 10 分钟的延迟)。\n\n每次修改完本地的文件后要执行以下命令，重新部署到 github 上：\n\n`hexo clean`\n`hexo generate`\n`hexo deploy` 或者 `hexo d`\n\n#### 常用命令\n\n`hexo new \"postName\"` #新建文章\n`hexo new page \"pageName\"` #新建页面\n`hexo generate` #生成静态页面至public目录\n`hexo server` #开启预览访问端口（默认端口 4000, 'ctrl + c' 关闭 server）\n`hexo deploy` #将 .deploy 目录部署到 GitHub\n`hexo help` # 查看帮助\n`hexo version` #查看 Hexo 的版本\n\n#### 报错总结\n\n1. 出现 error deployer not found:git 或者 error deployer not found:github 的错误\n\n   解决办法：执行 npm install hexo-deployer-git --save\n\n2. 出现类似 FATAL can not read a block mapping entry; a multiline key may not be an implicit key at line 70, column 1: ... 错误\n\n   解决办法：_config.yml 中配置项的英文冒号后面要用空格隔开，再跟内容。\n\n3. 中文乱码问题\n\n   解决办法：将文件的内容编码改为 UTF8 格式\n\n4. 'hexo sever' 能够成功运行，但是 localhost:4000 无法访问\n\n   解决办法：执行 hexo s -p 5000, 改用其他端口启动\n\n   ---\n\n   安装步骤很简单，但中间走了很多弯路，因此，主要记录一下那些曾经走过的弯路。\n\n   1. 新建项目时报错：\n     npm WARN deprecated istanbul-lib-hook@1.2.1: 1.2.0 should have\n      been a major version bumpnpm ERR! Unexpected end of JSON input while parsing near ‘...registry.npm.taobao.o‘ npm ERR! A complete log of this run can be found in:npm ERR!     \n     C:\\Users\\Admin\\AppData\\Roaming\\npm-cache\\_logs\\2018-06-08T14_01_13_067Z-debug.logPackage install failed, see above. 如下所示：\n\n      解决方法：网上查找的一般是说运行：`npm cache clean --force`，但清除缓存之后，再次新建项目，还是报这个错。然后根据提示信息，取消了淘宝镜像，问题解决。\n\n      取消淘宝镜像：\n\n      ```bash\n     npm config delete registry\n     npm config delete disturl\n      ```\n\n      运行 `npm config edit` 可看到 registry 中已经变成了默认镜像。参考：设置和取消淘宝镜像 \n\n   2. 新建项目时报的警告：npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"}) ‘git‘ 不是内部或外部命令，也不是可运行的程序或批处理文件。 安装git插件\n\n   3. 卸载 angular, 因为反反复复卸载重装了好几次 angular, 因此也记录一下卸载过程吧。\n\n      ```bash\n      npm uninstall -g angular-cli \n      npm uninstall -g @angular/cli\n      npm cache clean  \n      ```\n\n       在运行 `npm cache clean`  时报错如下图，根据信息提示改成了 `npm cache verify`  总结：一定要根据官网教程安装，网上的教程很多很乱，开始就是根据网上教程装的很混乱，   导致报了很多莫名其妙的错。 本文由职坐标整理并发布，希望对同学们有所帮助。了解更多详情请关注 WEB 前端 Node.js 频道！ ","source":"_posts/limqfirst.md","raw":"---\ntitle: 用 Hexo + Github 搭建属于自己的博客\ndate: 2018-08-20 11:13:56\ntags: Python\ncategories: \n- Program\n- hexo\n---\n\n最近几天一直想做一个自己的博客，把学习过的技术看过的文章都整理起来，花了几天的时间[博客](limqvip.github.io)初步搭建完成，看了很多大佬文章，但是自己搭建还是遇到很多坑，下面就写写搭建过程。希望对看到的人有帮助。\n\n本文主要介绍 Windows 7 x64 下 Hexo: 3.7.1 + GitHub 搭建（不同的 Hexo 版本，有的设置可能会有差异）。\n\n## 搭建环境\n\n#### \t1. 安装 git\n\n可以到 [git](https://git-scm.com/download/win) 官网下载相应平台版本进行安装。\n\n#### \t2. 申请 GitHub 账号\n\n进入 [GitHub ](https://link.jianshu.com/?t=https://github.com/) 注册。注册过程略。\n\n#### \t3. 安装 node.js\n\n到 [node.js](https://link.jianshu.com/?t=https://nodejs.org/en/download/) 官网下载相应平台的最新版本，傻瓜式安装（自带安装 npm）。在 git bash 下执行`npm -v` 查看是否安装成功 npm。如果安装成功会显示对应版本号。\n\n```bash\n$ npm -v\n5.6.0\n```\n\n#### 4. 安装 Hexo\n\n打开 git bash 或者 cmd, 执行以下命令:\n`npm install -g hexo`\n\n## 搭建 Hexo\n\n#### 1. 初始化 \n\n执行`hexo init myblog`创建一个名为 myblog 的博客。该命令会生成一个 myblog 文件夹。进入 myblog 目录 `cd myblog `, myblog 是博客的主目录。\n\n#### 2. 安装必须依赖包\n\n`hexo install <name>`\n\n#### 3. 生成静态页面\n\n`hexo generate` or `hexo g`\n\n#### 4. 本地运行\n\n`hexo server` 或者 `hexo s`\n\n打开浏览器，在地址栏输入localhost:4000，就可以看到我们搭建好的本地博客了。到此只是搭建好了本地博客。\n\n## 部署博客到 GitHub , 通过域名访问博客。\n#### 1.新建repository\n\n建立与你用户名对应的仓库，仓库名必须为【 your_username.github.io】,例如我的博客 limqvip.github.io. \n\n#### 2.部署博客\n\n##### 1. 修改配置文件\n\n进入你的hexo文件夹根目录下，用编辑器打开 _config.yml, 修改 deploy 项，如下（根据你的 GitHub 进行相应更改）：\n\n```bash\ndeploy:\n  type: git       #注意：有的版本type是github\n  repo: https://github.com/limqvip/limqvip.github.io.git\n  branch: master\n```\n\n##### 2. 执行 `hexo d` 部署到 github 上。\n\n```bash\nINFO  Deploying: git\nINFO  Clearing .deploy_git folder...\nINFO  Copying files from public folder...\nINFO  Copying files from extend dirs...\n…略\n create mode 100644 \"tags/\\347\\211\\210\\346\\234\\254\\346\\216\\247\\345\\210\\266/index.html\"\nBranch master set up to track remote branch master from git@github.com:limqvip/limqvip.github.io.git.\nTo github.com:limqvip/limqvip.github.io.git\n   5867eb8..f25e3d4  HEAD -> master\nINFO  Deploy done: git\n```\n\n此时就完成部署了，用浏览器访问 https://limqvip.github.io 即可(第一次发布可能会有 10 分钟的延迟)。\n\n每次修改完本地的文件后要执行以下命令，重新部署到 github 上：\n\n`hexo clean`\n`hexo generate`\n`hexo deploy` 或者 `hexo d`\n\n#### 常用命令\n\n`hexo new \"postName\"` #新建文章\n`hexo new page \"pageName\"` #新建页面\n`hexo generate` #生成静态页面至public目录\n`hexo server` #开启预览访问端口（默认端口 4000, 'ctrl + c' 关闭 server）\n`hexo deploy` #将 .deploy 目录部署到 GitHub\n`hexo help` # 查看帮助\n`hexo version` #查看 Hexo 的版本\n\n#### 报错总结\n\n1. 出现 error deployer not found:git 或者 error deployer not found:github 的错误\n\n   解决办法：执行 npm install hexo-deployer-git --save\n\n2. 出现类似 FATAL can not read a block mapping entry; a multiline key may not be an implicit key at line 70, column 1: ... 错误\n\n   解决办法：_config.yml 中配置项的英文冒号后面要用空格隔开，再跟内容。\n\n3. 中文乱码问题\n\n   解决办法：将文件的内容编码改为 UTF8 格式\n\n4. 'hexo sever' 能够成功运行，但是 localhost:4000 无法访问\n\n   解决办法：执行 hexo s -p 5000, 改用其他端口启动\n\n   ---\n\n   安装步骤很简单，但中间走了很多弯路，因此，主要记录一下那些曾经走过的弯路。\n\n   1. 新建项目时报错：\n     npm WARN deprecated istanbul-lib-hook@1.2.1: 1.2.0 should have\n      been a major version bumpnpm ERR! Unexpected end of JSON input while parsing near ‘...registry.npm.taobao.o‘ npm ERR! A complete log of this run can be found in:npm ERR!     \n     C:\\Users\\Admin\\AppData\\Roaming\\npm-cache\\_logs\\2018-06-08T14_01_13_067Z-debug.logPackage install failed, see above. 如下所示：\n\n      解决方法：网上查找的一般是说运行：`npm cache clean --force`，但清除缓存之后，再次新建项目，还是报这个错。然后根据提示信息，取消了淘宝镜像，问题解决。\n\n      取消淘宝镜像：\n\n      ```bash\n     npm config delete registry\n     npm config delete disturl\n      ```\n\n      运行 `npm config edit` 可看到 registry 中已经变成了默认镜像。参考：设置和取消淘宝镜像 \n\n   2. 新建项目时报的警告：npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"}) ‘git‘ 不是内部或外部命令，也不是可运行的程序或批处理文件。 安装git插件\n\n   3. 卸载 angular, 因为反反复复卸载重装了好几次 angular, 因此也记录一下卸载过程吧。\n\n      ```bash\n      npm uninstall -g angular-cli \n      npm uninstall -g @angular/cli\n      npm cache clean  \n      ```\n\n       在运行 `npm cache clean`  时报错如下图，根据信息提示改成了 `npm cache verify`  总结：一定要根据官网教程安装，网上的教程很多很乱，开始就是根据网上教程装的很混乱，   导致报了很多莫名其妙的错。 本文由职坐标整理并发布，希望对同学们有所帮助。了解更多详情请关注 WEB 前端 Node.js 频道！ ","slug":"limqfirst","published":1,"updated":"2018-08-22T13:36:27.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl5d991a000k0owkoppwr6ff","content":"<p>最近几天一直想做一个自己的博客，把学习过的技术看过的文章都整理起来，花了几天的时间<a href=\"limqvip.github.io\">博客</a>初步搭建完成，看了很多大佬文章，但是自己搭建还是遇到很多坑，下面就写写搭建过程。希望对看到的人有帮助。</p>\n<p>本文主要介绍 Windows 7 x64 下 Hexo: 3.7.1 + GitHub 搭建（不同的 Hexo 版本，有的设置可能会有差异）。</p>\n<h2 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h2><h4 id=\"1-安装-git\"><a href=\"#1-安装-git\" class=\"headerlink\" title=\"1. 安装 git\"></a>1. 安装 git</h4><p>可以到 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">git</a> 官网下载相应平台版本进行安装。</p>\n<h4 id=\"2-申请-GitHub-账号\"><a href=\"#2-申请-GitHub-账号\" class=\"headerlink\" title=\"2. 申请 GitHub 账号\"></a>2. 申请 GitHub 账号</h4><p>进入 <a href=\"https://link.jianshu.com/?t=https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub </a> 注册。注册过程略。</p>\n<h4 id=\"3-安装-node-js\"><a href=\"#3-安装-node-js\" class=\"headerlink\" title=\"3. 安装 node.js\"></a>3. 安装 node.js</h4><p>到 <a href=\"https://link.jianshu.com/?t=https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">node.js</a> 官网下载相应平台的最新版本，傻瓜式安装（自带安装 npm）。在 git bash 下执行<code>npm -v</code> 查看是否安装成功 npm。如果安装成功会显示对应版本号。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm -v</span><br><span class=\"line\">5.6.0</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-安装-Hexo\"><a href=\"#4-安装-Hexo\" class=\"headerlink\" title=\"4. 安装 Hexo\"></a>4. 安装 Hexo</h4><p>打开 git bash 或者 cmd, 执行以下命令:<br><code>npm install -g hexo</code></p>\n<h2 id=\"搭建-Hexo\"><a href=\"#搭建-Hexo\" class=\"headerlink\" title=\"搭建 Hexo\"></a>搭建 Hexo</h2><h4 id=\"1-初始化\"><a href=\"#1-初始化\" class=\"headerlink\" title=\"1. 初始化\"></a>1. 初始化</h4><p>执行<code>hexo init myblog</code>创建一个名为 myblog 的博客。该命令会生成一个 myblog 文件夹。进入 myblog 目录 <code>cd myblog</code>, myblog 是博客的主目录。</p>\n<h4 id=\"2-安装必须依赖包\"><a href=\"#2-安装必须依赖包\" class=\"headerlink\" title=\"2. 安装必须依赖包\"></a>2. 安装必须依赖包</h4><p><code>hexo install &lt;name&gt;</code></p>\n<h4 id=\"3-生成静态页面\"><a href=\"#3-生成静态页面\" class=\"headerlink\" title=\"3. 生成静态页面\"></a>3. 生成静态页面</h4><p><code>hexo generate</code> or <code>hexo g</code></p>\n<h4 id=\"4-本地运行\"><a href=\"#4-本地运行\" class=\"headerlink\" title=\"4. 本地运行\"></a>4. 本地运行</h4><p><code>hexo server</code> 或者 <code>hexo s</code></p>\n<p>打开浏览器，在地址栏输入localhost:4000，就可以看到我们搭建好的本地博客了。到此只是搭建好了本地博客。</p>\n<h2 id=\"部署博客到-GitHub-通过域名访问博客。\"><a href=\"#部署博客到-GitHub-通过域名访问博客。\" class=\"headerlink\" title=\"部署博客到 GitHub , 通过域名访问博客。\"></a>部署博客到 GitHub , 通过域名访问博客。</h2><h4 id=\"1-新建repository\"><a href=\"#1-新建repository\" class=\"headerlink\" title=\"1.新建repository\"></a>1.新建repository</h4><p>建立与你用户名对应的仓库，仓库名必须为【 your_username.github.io】,例如我的博客 limqvip.github.io. </p>\n<h4 id=\"2-部署博客\"><a href=\"#2-部署博客\" class=\"headerlink\" title=\"2.部署博客\"></a>2.部署博客</h4><h5 id=\"1-修改配置文件\"><a href=\"#1-修改配置文件\" class=\"headerlink\" title=\"1. 修改配置文件\"></a>1. 修改配置文件</h5><p>进入你的hexo文件夹根目录下，用编辑器打开 _config.yml, 修改 deploy 项，如下（根据你的 GitHub 进行相应更改）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git       <span class=\"comment\">#注意：有的版本type是github</span></span><br><span class=\"line\">  repo: https://github.com/limqvip/limqvip.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-执行-hexo-d-部署到-github-上。\"><a href=\"#2-执行-hexo-d-部署到-github-上。\" class=\"headerlink\" title=\"2. 执行 hexo d 部署到 github 上。\"></a>2. 执行 <code>hexo d</code> 部署到 github 上。</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Deploying: git</span><br><span class=\"line\">INFO  Clearing .deploy_git folder...</span><br><span class=\"line\">INFO  Copying files from public folder...</span><br><span class=\"line\">INFO  Copying files from extend <span class=\"built_in\">dirs</span>...</span><br><span class=\"line\">…略</span><br><span class=\"line\"> create mode 100644 <span class=\"string\">\"tags/\\347\\211\\210\\346\\234\\254\\346\\216\\247\\345\\210\\266/index.html\"</span></span><br><span class=\"line\">Branch master <span class=\"built_in\">set</span> up to track remote branch master from git@github.com:limqvip/limqvip.github.io.git.</span><br><span class=\"line\">To github.com:limqvip/limqvip.github.io.git</span><br><span class=\"line\">   5867eb8..f25e3d4  HEAD -&gt; master</span><br><span class=\"line\">INFO  Deploy <span class=\"keyword\">done</span>: git</span><br></pre></td></tr></table></figure>\n<p>此时就完成部署了，用浏览器访问 <a href=\"https://limqvip.github.io\" target=\"_blank\" rel=\"noopener\">https://limqvip.github.io</a> 即可(第一次发布可能会有 10 分钟的延迟)。</p>\n<p>每次修改完本地的文件后要执行以下命令，重新部署到 github 上：</p>\n<p><code>hexo clean</code><br><code>hexo generate</code><br><code>hexo deploy</code> 或者 <code>hexo d</code></p>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><p><code>hexo new &quot;postName&quot;</code> #新建文章<br><code>hexo new page &quot;pageName&quot;</code> #新建页面<br><code>hexo generate</code> #生成静态页面至public目录<br><code>hexo server</code> #开启预览访问端口（默认端口 4000, ‘ctrl + c’ 关闭 server）<br><code>hexo deploy</code> #将 .deploy 目录部署到 GitHub<br><code>hexo help</code> # 查看帮助<br><code>hexo version</code> #查看 Hexo 的版本</p>\n<h4 id=\"报错总结\"><a href=\"#报错总结\" class=\"headerlink\" title=\"报错总结\"></a>报错总结</h4><ol>\n<li><p>出现 error deployer not found:git 或者 error deployer not found:github 的错误</p>\n<p>解决办法：执行 npm install hexo-deployer-git –save</p>\n</li>\n<li><p>出现类似 FATAL can not read a block mapping entry; a multiline key may not be an implicit key at line 70, column 1: … 错误</p>\n<p>解决办法：_config.yml 中配置项的英文冒号后面要用空格隔开，再跟内容。</p>\n</li>\n<li><p>中文乱码问题</p>\n<p>解决办法：将文件的内容编码改为 UTF8 格式</p>\n</li>\n<li><p>‘hexo sever’ 能够成功运行，但是 localhost:4000 无法访问</p>\n<p>解决办法：执行 hexo s -p 5000, 改用其他端口启动</p>\n<hr>\n<p>安装步骤很简单，但中间走了很多弯路，因此，主要记录一下那些曾经走过的弯路。</p>\n<ol>\n<li><p>新建项目时报错：<br>npm WARN deprecated <a href=\"mailto:istanbul-lib-hook@1.2.1\" target=\"_blank\" rel=\"noopener\">istanbul-lib-hook@1.2.1</a>: 1.2.0 should have<br>been a major version bumpnpm ERR! Unexpected end of JSON input while parsing near ‘…registry.npm.taobao.o‘ npm ERR! A complete log of this run can be found in:npm ERR!<br>C:\\Users\\Admin\\AppData\\Roaming\\npm-cache_logs\\2018-06-08T14_01_13_067Z-debug.logPackage install failed, see above. 如下所示：</p>\n<p>解决方法：网上查找的一般是说运行：<code>npm cache clean --force</code>，但清除缓存之后，再次新建项目，还是报这个错。然后根据提示信息，取消了淘宝镜像，问题解决。</p>\n<p>取消淘宝镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config delete registry</span><br><span class=\"line\">npm config delete disturl</span><br></pre></td></tr></table></figure>\n<p>运行 <code>npm config edit</code> 可看到 registry 中已经变成了默认镜像。参考：设置和取消淘宝镜像 </p>\n</li>\n<li><p>新建项目时报的警告：npm WARN optional SKIPPING OPTIONAL DEPENDENCY: <a href=\"mailto:fsevents@1.2.4\" target=\"_blank\" rel=\"noopener\">fsevents@1.2.4</a> (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for <a href=\"mailto:fsevents@1.2.4\" target=\"_blank\" rel=\"noopener\">fsevents@1.2.4</a>: wanted {“os”:”darwin”,”arch”:”any”} (current: {“os”:”win32”,”arch”:”x64”}) ‘git‘ 不是内部或外部命令，也不是可运行的程序或批处理文件。 安装git插件</p>\n</li>\n<li><p>卸载 angular, 因为反反复复卸载重装了好几次 angular, 因此也记录一下卸载过程吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall -g angular-cli </span><br><span class=\"line\">npm uninstall -g @angular/cli</span><br><span class=\"line\">npm cache clean</span><br></pre></td></tr></table></figure>\n<p> 在运行 <code>npm cache clean</code>  时报错如下图，根据信息提示改成了 <code>npm cache verify</code>  总结：一定要根据官网教程安装，网上的教程很多很乱，开始就是根据网上教程装的很混乱，   导致报了很多莫名其妙的错。 本文由职坐标整理并发布，希望对同学们有所帮助。了解更多详情请关注 WEB 前端 Node.js 频道！ </p>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>最近几天一直想做一个自己的博客，把学习过的技术看过的文章都整理起来，花了几天的时间<a href=\"limqvip.github.io\">博客</a>初步搭建完成，看了很多大佬文章，但是自己搭建还是遇到很多坑，下面就写写搭建过程。希望对看到的人有帮助。</p>\n<p>本文主要介绍 Windows 7 x64 下 Hexo: 3.7.1 + GitHub 搭建（不同的 Hexo 版本，有的设置可能会有差异）。</p>\n<h2 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h2><h4 id=\"1-安装-git\"><a href=\"#1-安装-git\" class=\"headerlink\" title=\"1. 安装 git\"></a>1. 安装 git</h4><p>可以到 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">git</a> 官网下载相应平台版本进行安装。</p>\n<h4 id=\"2-申请-GitHub-账号\"><a href=\"#2-申请-GitHub-账号\" class=\"headerlink\" title=\"2. 申请 GitHub 账号\"></a>2. 申请 GitHub 账号</h4><p>进入 <a href=\"https://link.jianshu.com/?t=https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub </a> 注册。注册过程略。</p>\n<h4 id=\"3-安装-node-js\"><a href=\"#3-安装-node-js\" class=\"headerlink\" title=\"3. 安装 node.js\"></a>3. 安装 node.js</h4><p>到 <a href=\"https://link.jianshu.com/?t=https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">node.js</a> 官网下载相应平台的最新版本，傻瓜式安装（自带安装 npm）。在 git bash 下执行<code>npm -v</code> 查看是否安装成功 npm。如果安装成功会显示对应版本号。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm -v</span><br><span class=\"line\">5.6.0</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-安装-Hexo\"><a href=\"#4-安装-Hexo\" class=\"headerlink\" title=\"4. 安装 Hexo\"></a>4. 安装 Hexo</h4><p>打开 git bash 或者 cmd, 执行以下命令:<br><code>npm install -g hexo</code></p>\n<h2 id=\"搭建-Hexo\"><a href=\"#搭建-Hexo\" class=\"headerlink\" title=\"搭建 Hexo\"></a>搭建 Hexo</h2><h4 id=\"1-初始化\"><a href=\"#1-初始化\" class=\"headerlink\" title=\"1. 初始化\"></a>1. 初始化</h4><p>执行<code>hexo init myblog</code>创建一个名为 myblog 的博客。该命令会生成一个 myblog 文件夹。进入 myblog 目录 <code>cd myblog</code>, myblog 是博客的主目录。</p>\n<h4 id=\"2-安装必须依赖包\"><a href=\"#2-安装必须依赖包\" class=\"headerlink\" title=\"2. 安装必须依赖包\"></a>2. 安装必须依赖包</h4><p><code>hexo install &lt;name&gt;</code></p>\n<h4 id=\"3-生成静态页面\"><a href=\"#3-生成静态页面\" class=\"headerlink\" title=\"3. 生成静态页面\"></a>3. 生成静态页面</h4><p><code>hexo generate</code> or <code>hexo g</code></p>\n<h4 id=\"4-本地运行\"><a href=\"#4-本地运行\" class=\"headerlink\" title=\"4. 本地运行\"></a>4. 本地运行</h4><p><code>hexo server</code> 或者 <code>hexo s</code></p>\n<p>打开浏览器，在地址栏输入localhost:4000，就可以看到我们搭建好的本地博客了。到此只是搭建好了本地博客。</p>\n<h2 id=\"部署博客到-GitHub-通过域名访问博客。\"><a href=\"#部署博客到-GitHub-通过域名访问博客。\" class=\"headerlink\" title=\"部署博客到 GitHub , 通过域名访问博客。\"></a>部署博客到 GitHub , 通过域名访问博客。</h2><h4 id=\"1-新建repository\"><a href=\"#1-新建repository\" class=\"headerlink\" title=\"1.新建repository\"></a>1.新建repository</h4><p>建立与你用户名对应的仓库，仓库名必须为【 your_username.github.io】,例如我的博客 limqvip.github.io. </p>\n<h4 id=\"2-部署博客\"><a href=\"#2-部署博客\" class=\"headerlink\" title=\"2.部署博客\"></a>2.部署博客</h4><h5 id=\"1-修改配置文件\"><a href=\"#1-修改配置文件\" class=\"headerlink\" title=\"1. 修改配置文件\"></a>1. 修改配置文件</h5><p>进入你的hexo文件夹根目录下，用编辑器打开 _config.yml, 修改 deploy 项，如下（根据你的 GitHub 进行相应更改）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git       <span class=\"comment\">#注意：有的版本type是github</span></span><br><span class=\"line\">  repo: https://github.com/limqvip/limqvip.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-执行-hexo-d-部署到-github-上。\"><a href=\"#2-执行-hexo-d-部署到-github-上。\" class=\"headerlink\" title=\"2. 执行 hexo d 部署到 github 上。\"></a>2. 执行 <code>hexo d</code> 部署到 github 上。</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Deploying: git</span><br><span class=\"line\">INFO  Clearing .deploy_git folder...</span><br><span class=\"line\">INFO  Copying files from public folder...</span><br><span class=\"line\">INFO  Copying files from extend <span class=\"built_in\">dirs</span>...</span><br><span class=\"line\">…略</span><br><span class=\"line\"> create mode 100644 <span class=\"string\">\"tags/\\347\\211\\210\\346\\234\\254\\346\\216\\247\\345\\210\\266/index.html\"</span></span><br><span class=\"line\">Branch master <span class=\"built_in\">set</span> up to track remote branch master from git@github.com:limqvip/limqvip.github.io.git.</span><br><span class=\"line\">To github.com:limqvip/limqvip.github.io.git</span><br><span class=\"line\">   5867eb8..f25e3d4  HEAD -&gt; master</span><br><span class=\"line\">INFO  Deploy <span class=\"keyword\">done</span>: git</span><br></pre></td></tr></table></figure>\n<p>此时就完成部署了，用浏览器访问 <a href=\"https://limqvip.github.io\" target=\"_blank\" rel=\"noopener\">https://limqvip.github.io</a> 即可(第一次发布可能会有 10 分钟的延迟)。</p>\n<p>每次修改完本地的文件后要执行以下命令，重新部署到 github 上：</p>\n<p><code>hexo clean</code><br><code>hexo generate</code><br><code>hexo deploy</code> 或者 <code>hexo d</code></p>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><p><code>hexo new &quot;postName&quot;</code> #新建文章<br><code>hexo new page &quot;pageName&quot;</code> #新建页面<br><code>hexo generate</code> #生成静态页面至public目录<br><code>hexo server</code> #开启预览访问端口（默认端口 4000, ‘ctrl + c’ 关闭 server）<br><code>hexo deploy</code> #将 .deploy 目录部署到 GitHub<br><code>hexo help</code> # 查看帮助<br><code>hexo version</code> #查看 Hexo 的版本</p>\n<h4 id=\"报错总结\"><a href=\"#报错总结\" class=\"headerlink\" title=\"报错总结\"></a>报错总结</h4><ol>\n<li><p>出现 error deployer not found:git 或者 error deployer not found:github 的错误</p>\n<p>解决办法：执行 npm install hexo-deployer-git –save</p>\n</li>\n<li><p>出现类似 FATAL can not read a block mapping entry; a multiline key may not be an implicit key at line 70, column 1: … 错误</p>\n<p>解决办法：_config.yml 中配置项的英文冒号后面要用空格隔开，再跟内容。</p>\n</li>\n<li><p>中文乱码问题</p>\n<p>解决办法：将文件的内容编码改为 UTF8 格式</p>\n</li>\n<li><p>‘hexo sever’ 能够成功运行，但是 localhost:4000 无法访问</p>\n<p>解决办法：执行 hexo s -p 5000, 改用其他端口启动</p>\n<hr>\n<p>安装步骤很简单，但中间走了很多弯路，因此，主要记录一下那些曾经走过的弯路。</p>\n<ol>\n<li><p>新建项目时报错：<br>npm WARN deprecated <a href=\"mailto:istanbul-lib-hook@1.2.1\" target=\"_blank\" rel=\"noopener\">istanbul-lib-hook@1.2.1</a>: 1.2.0 should have<br>been a major version bumpnpm ERR! Unexpected end of JSON input while parsing near ‘…registry.npm.taobao.o‘ npm ERR! A complete log of this run can be found in:npm ERR!<br>C:\\Users\\Admin\\AppData\\Roaming\\npm-cache_logs\\2018-06-08T14_01_13_067Z-debug.logPackage install failed, see above. 如下所示：</p>\n<p>解决方法：网上查找的一般是说运行：<code>npm cache clean --force</code>，但清除缓存之后，再次新建项目，还是报这个错。然后根据提示信息，取消了淘宝镜像，问题解决。</p>\n<p>取消淘宝镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config delete registry</span><br><span class=\"line\">npm config delete disturl</span><br></pre></td></tr></table></figure>\n<p>运行 <code>npm config edit</code> 可看到 registry 中已经变成了默认镜像。参考：设置和取消淘宝镜像 </p>\n</li>\n<li><p>新建项目时报的警告：npm WARN optional SKIPPING OPTIONAL DEPENDENCY: <a href=\"mailto:fsevents@1.2.4\" target=\"_blank\" rel=\"noopener\">fsevents@1.2.4</a> (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for <a href=\"mailto:fsevents@1.2.4\" target=\"_blank\" rel=\"noopener\">fsevents@1.2.4</a>: wanted {“os”:”darwin”,”arch”:”any”} (current: {“os”:”win32”,”arch”:”x64”}) ‘git‘ 不是内部或外部命令，也不是可运行的程序或批处理文件。 安装git插件</p>\n</li>\n<li><p>卸载 angular, 因为反反复复卸载重装了好几次 angular, 因此也记录一下卸载过程吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall -g angular-cli </span><br><span class=\"line\">npm uninstall -g @angular/cli</span><br><span class=\"line\">npm cache clean</span><br></pre></td></tr></table></figure>\n<p> 在运行 <code>npm cache clean</code>  时报错如下图，根据信息提示改成了 <code>npm cache verify</code>  总结：一定要根据官网教程安装，网上的教程很多很乱，开始就是根据网上教程装的很混乱，   导致报了很多莫名其妙的错。 本文由职坐标整理并发布，希望对同学们有所帮助。了解更多详情请关注 WEB 前端 Node.js 频道！ </p>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"test","date":"2018-08-20T02:08:41.000Z","_content":"# 李白\n\n目录（在这里设置锚点）\n\n[01. 早发白帝城](#早发白帝城)\n\n[02. 赠汪伦](#赠汪伦)\n\n[03. 望庐山瀑布](#望庐山瀑布)\n\n## 早发白帝城\n\n​\t朝辞白帝彩云间，\n\n​\t千里江陵一日还。\n\n​\t两岸猿声啼不住，\n\n​\t轻舟已过万重山。\n\n\n\n## 赠汪伦\n\n​\t\n\n​\t李白乘舟将欲行，\n\n​\t忽闻岸上踏歌声。\n\n​\t桃花潭水深千尺，\n\n​\t不及汪伦送我情。\n\n\n\n## 望庐山瀑布\n\n​\t日照香炉生紫烟，\n\t\n​\t遥看瀑布挂前川。\n\t\n​\t飞流直下三千尺，\n\t\n​\t疑是银行落九天。\n\n","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2018-08-20 10:08:41\ntags: test\ncategories: life\n---\n# 李白\n\n目录（在这里设置锚点）\n\n[01. 早发白帝城](#早发白帝城)\n\n[02. 赠汪伦](#赠汪伦)\n\n[03. 望庐山瀑布](#望庐山瀑布)\n\n## 早发白帝城\n\n​\t朝辞白帝彩云间，\n\n​\t千里江陵一日还。\n\n​\t两岸猿声啼不住，\n\n​\t轻舟已过万重山。\n\n\n\n## 赠汪伦\n\n​\t\n\n​\t李白乘舟将欲行，\n\n​\t忽闻岸上踏歌声。\n\n​\t桃花潭水深千尺，\n\n​\t不及汪伦送我情。\n\n\n\n## 望庐山瀑布\n\n​\t日照香炉生紫烟，\n\t\n​\t遥看瀑布挂前川。\n\t\n​\t飞流直下三千尺，\n\t\n​\t疑是银行落九天。\n\n","slug":"test","published":1,"updated":"2018-08-22T13:36:27.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl5d991g000n0owkpy2l4l69","content":"<h1 id=\"李白\"><a href=\"#李白\" class=\"headerlink\" title=\"李白\"></a>李白</h1><p>目录（在这里设置锚点）</p>\n<p><a href=\"#早发白帝城\">01. 早发白帝城</a></p>\n<p><a href=\"#赠汪伦\">02. 赠汪伦</a></p>\n<p><a href=\"#望庐山瀑布\">03. 望庐山瀑布</a></p>\n<h2 id=\"早发白帝城\"><a href=\"#早发白帝城\" class=\"headerlink\" title=\"早发白帝城\"></a>早发白帝城</h2><p>​    朝辞白帝彩云间，</p>\n<p>​    千里江陵一日还。</p>\n<p>​    两岸猿声啼不住，</p>\n<p>​    轻舟已过万重山。</p>\n<h2 id=\"赠汪伦\"><a href=\"#赠汪伦\" class=\"headerlink\" title=\"赠汪伦\"></a>赠汪伦</h2><p>​    </p>\n<p>​    李白乘舟将欲行，</p>\n<p>​    忽闻岸上踏歌声。</p>\n<p>​    桃花潭水深千尺，</p>\n<p>​    不及汪伦送我情。</p>\n<h2 id=\"望庐山瀑布\"><a href=\"#望庐山瀑布\" class=\"headerlink\" title=\"望庐山瀑布\"></a>望庐山瀑布</h2><p>​    日照香炉生紫烟，</p>\n<p>​    遥看瀑布挂前川。</p>\n<p>​    飞流直下三千尺，</p>\n<p>​    疑是银行落九天。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"李白\"><a href=\"#李白\" class=\"headerlink\" title=\"李白\"></a>李白</h1><p>目录（在这里设置锚点）</p>\n<p><a href=\"#早发白帝城\">01. 早发白帝城</a></p>\n<p><a href=\"#赠汪伦\">02. 赠汪伦</a></p>\n<p><a href=\"#望庐山瀑布\">03. 望庐山瀑布</a></p>\n<h2 id=\"早发白帝城\"><a href=\"#早发白帝城\" class=\"headerlink\" title=\"早发白帝城\"></a>早发白帝城</h2><p>​    朝辞白帝彩云间，</p>\n<p>​    千里江陵一日还。</p>\n<p>​    两岸猿声啼不住，</p>\n<p>​    轻舟已过万重山。</p>\n<h2 id=\"赠汪伦\"><a href=\"#赠汪伦\" class=\"headerlink\" title=\"赠汪伦\"></a>赠汪伦</h2><p>​    </p>\n<p>​    李白乘舟将欲行，</p>\n<p>​    忽闻岸上踏歌声。</p>\n<p>​    桃花潭水深千尺，</p>\n<p>​    不及汪伦送我情。</p>\n<h2 id=\"望庐山瀑布\"><a href=\"#望庐山瀑布\" class=\"headerlink\" title=\"望庐山瀑布\"></a>望庐山瀑布</h2><p>​    日照香炉生紫烟，</p>\n<p>​    遥看瀑布挂前川。</p>\n<p>​    飞流直下三千尺，</p>\n<p>​    疑是银行落九天。</p>\n"}],"PostAsset":[{"_id":"source/_posts/2018-08-20-shujukujichu1/Image.png","slug":"Image.png","post":"cjl5d990000020owkot87l9f4","modified":0,"renderable":0},{"_id":"source/_posts/2018-08-22-Git-changyongmingling/726930-5079e6da8900d0e2.jpg","slug":"726930-5079e6da8900d0e2.jpg","post":"cjl5d990j00080owkn8sye2q4","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjl5d98zn00000owk706k8pdo","category_id":"cjl5d990800040owkcdlx79ro","_id":"cjl5d9910000f0owkoz4mwdov"},{"post_id":"cjl5d991g000n0owkpy2l4l69","category_id":"cjl5d990800040owkcdlx79ro","_id":"cjl5d991k000s0owkrssi7tya"},{"post_id":"cjl5d990m00090owkfiwfb5sv","category_id":"cjl5d991i000p0owkabwvtrxj","_id":"cjl5d991m000w0owkb4aqfxxg"},{"post_id":"cjl5d990r000d0owklnndgh2r","category_id":"cjl5d990o000a0owk3jz4tnnr","_id":"cjl5d991o00100owkojmztqn5"},{"post_id":"cjl5d990r000d0owklnndgh2r","category_id":"cjl5d991l000t0owkuaxhy958","_id":"cjl5d991q00140owkybb4p8qs"},{"post_id":"cjl5d990000020owkot87l9f4","category_id":"cjl5d990o000a0owk3jz4tnnr","_id":"cjl5d991q00150owkypk21qvg"},{"post_id":"cjl5d990000020owkot87l9f4","category_id":"cjl5d991n000x0owkal4jgy6n","_id":"cjl5d991s00180owkjeym0gxg"},{"post_id":"cjl5d990w000e0owk36yqtb3p","category_id":"cjl5d990o000a0owk3jz4tnnr","_id":"cjl5d991t001a0owkvu1f8b2h"},{"post_id":"cjl5d990w000e0owk36yqtb3p","category_id":"cjl5d991p00110owk5bya48ta","_id":"cjl5d991v001e0owkees9mu4v"},{"post_id":"cjl5d990c00060owkksljffe5","category_id":"cjl5d990o000a0owk3jz4tnnr","_id":"cjl5d991w001f0owkmlqeykba"},{"post_id":"cjl5d990c00060owkksljffe5","category_id":"cjl5d991r00160owkgxwa09bq","_id":"cjl5d991y001i0owkrlnydylj"},{"post_id":"cjl5d991a000k0owkoppwr6ff","category_id":"cjl5d990o000a0owk3jz4tnnr","_id":"cjl5d9920001l0owkffnnsev7"},{"post_id":"cjl5d991a000k0owkoppwr6ff","category_id":"cjl5d991t001b0owk1940kg05","_id":"cjl5d9920001m0owk1skzdb9t"},{"post_id":"cjl5d990j00080owkn8sye2q4","category_id":"cjl5d990o000a0owk3jz4tnnr","_id":"cjl5d9928001o0owkjaxuqvgu"},{"post_id":"cjl5d990j00080owkn8sye2q4","category_id":"cjl5d991p00110owk5bya48ta","_id":"cjl5d9929001p0owk3jfb2nvy"}],"PostTag":[{"post_id":"cjl5d98zn00000owk706k8pdo","tag_id":"cjl5d990c00050owkk3shnyqj","_id":"cjl5d990q000c0owke6s7gj78"},{"post_id":"cjl5d990c00060owkksljffe5","tag_id":"cjl5d990p000b0owk3bzqe3ok","_id":"cjl5d9919000j0owk2dl9orgk"},{"post_id":"cjl5d991a000k0owkoppwr6ff","tag_id":"cjl5d990c00050owkk3shnyqj","_id":"cjl5d991i000o0owkwwc9m1k3"},{"post_id":"cjl5d990j00080owkn8sye2q4","tag_id":"cjl5d9912000h0owk9zddbsn4","_id":"cjl5d991k000r0owkoou689eu"},{"post_id":"cjl5d990j00080owkn8sye2q4","tag_id":"cjl5d991f000m0owkc71dtcrx","_id":"cjl5d991l000u0owkgjam1rjk"},{"post_id":"cjl5d990m00090owkfiwfb5sv","tag_id":"cjl5d991j000q0owk9sj9qqam","_id":"cjl5d991o000z0owkpcdrq4i9"},{"post_id":"cjl5d990m00090owkfiwfb5sv","tag_id":"cjl5d991l000v0owk217uc1o9","_id":"cjl5d991p00120owk71qhm30q"},{"post_id":"cjl5d990r000d0owklnndgh2r","tag_id":"cjl5d991n000y0owkleleau32","_id":"cjl5d991t00190owkcs039f82"},{"post_id":"cjl5d990r000d0owklnndgh2r","tag_id":"cjl5d991p00130owk1scb5izd","_id":"cjl5d991u001c0owkafqv1nbp"},{"post_id":"cjl5d990w000e0owk36yqtb3p","tag_id":"cjl5d9912000h0owk9zddbsn4","_id":"cjl5d991y001j0owknqxabg2b"},{"post_id":"cjl5d990w000e0owk36yqtb3p","tag_id":"cjl5d991f000m0owkc71dtcrx","_id":"cjl5d991z001k0owkfei65dyh"},{"post_id":"cjl5d991g000n0owkpy2l4l69","tag_id":"cjl5d991x001h0owka5ydxiqv","_id":"cjl5d9921001n0owkkavssi9h"}],"Tag":[{"name":"Python","_id":"cjl5d990c00050owkk3shnyqj"},{"name":"Oracle","_id":"cjl5d990p000b0owk3bzqe3ok"},{"name":"Git","_id":"cjl5d9912000h0owk9zddbsn4"},{"name":"版本控制","_id":"cjl5d991f000m0owkc71dtcrx"},{"name":"tools","_id":"cjl5d991j000q0owk9sj9qqam"},{"name":"效率工具","_id":"cjl5d991l000v0owk217uc1o9"},{"name":"bat","_id":"cjl5d991n000y0owkleleau32"},{"name":"Windows","_id":"cjl5d991p00130owk1scb5izd"},{"name":"test","_id":"cjl5d991x001h0owka5ydxiqv"}]}}