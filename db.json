{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1535092804296},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1535092804296},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1535092804296},{"_id":"themes/next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1535092804312},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1535092804313},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1535092804313},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1535092804313},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1535092804313},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1535092804313},{"_id":"themes/next/LICENSE.md","hash":"f0190c7d83a98464549a6b3a51bb206148d88e1b","modified":1535092804313},{"_id":"themes/next/README.md","hash":"af2a9c55d698955240b6c791bbbfd7d5f82387f3","modified":1535092804313},{"_id":"themes/next/_config - 副本.yml","hash":"495a1a5c556f9bbfac5ba152e29fbc6879ffb227","modified":1535092804314},{"_id":"themes/next/_config.yml","hash":"6337b56d8a9faa57ceb0dccb9c315f9cd5bb3a71","modified":1535092804314},{"_id":"themes/next/bower.json","hash":"f124431f2ff1225322863d6e6f73de980a85fd7a","modified":1535092804339},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1535092804342},{"_id":"themes/next/package.json","hash":"93526ad6d3c5145ea32a1cda8dfd19f79b773aa5","modified":1535092804363},{"_id":"source/_posts/2018-08-20-one.md","hash":"925b67716c1204bd6e05ef06769c004f193b8365","modified":1535092804195},{"_id":"source/_posts/2018-08-20-shujukujichu1.md","hash":"bfeef962f622150591ec8b3416e76a7b886849ce","modified":1535092804195},{"_id":"source/_posts/2018-08-20-第一篇文章.md~","hash":"8bceb1184d0b173ea21ad6a8d5bc902ae41e61dd","modified":1535092804260},{"_id":"source/_posts/2018-08-21-rlwrap.md","hash":"224409e7237a8a02599cab4086ed1532f54886f8","modified":1535092804260},{"_id":"source/_posts/2018-08-22-Git-changyongmingling.md","hash":"fef3a1eb320bf8286b38312670231dc18b3a9c4b","modified":1535092804260},{"_id":"source/_posts/2018-08-22-tools.md","hash":"d940be20fa2e355c7ac7db508259e75071cf4715","modified":1535092804261},{"_id":"source/_posts/2018-08-23-Linux-Shell-jichu.md","hash":"9886044c01376d41e0091090b4145aeaa7fce588","modified":1535092804261},{"_id":"source/_posts/726930-5079e6da8900d0e2.jpg","hash":"a2f099798543dfca2563f3cf6c0571e1bfa75332","modified":1535092804261},{"_id":"source/_posts/batjichu.md","hash":"cb5336b4bd53ea5b2ffe46e637eef1e7e0759fb6","modified":1535092804263},{"_id":"source/_posts/gitjichupeizhi.md","hash":"a28c8fb72c9f11b18d011f698c848cb2fd1e1a98","modified":1535092804263},{"_id":"source/_posts/hello-world.md","hash":"75afe7b5a61d9f97eefe713c22a90f8eeb1cd242","modified":1535092804263},{"_id":"source/_posts/limqfirst.md","hash":"aa729635e84f49177103848f4a6e817a1eb71781","modified":1535092804265},{"_id":"source/_posts/test.md","hash":"f8d044ae56705b8e938d8c4844054c2dafad896c","modified":1535092804265},{"_id":"source/_posts/test.md~","hash":"3b08370820c75aaa90fc3df1fc57552a9200987c","modified":1535092804265},{"_id":"source/_posts/test1.md~","hash":"f113575e90ec8625478d1ce335293a0a58238fa4","modified":1535092804265},{"_id":"source/categories/index.md","hash":"fa49caecd8e98c2e43846cccc85224b9410ec08d","modified":1535092804265},{"_id":"source/categories/index.md~","hash":"0ff49d7c9426d868adc09d847d07c2e286942c29","modified":1535092804265},{"_id":"source/about/index.md","hash":"567025c18f20863564e937e285eedb52022c6030","modified":1535092804265},{"_id":"source/tags/index.md","hash":"48e4b885fa79fc52c5feffbf409705a0b50f48e4","modified":1535092804265},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e8400c762e5754baf439ab2b7c9e92acd2fc6fe9","modified":1535092804299},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c4c1d2d73714e5f9a64e42722e41675d14237236","modified":1535092804299},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"36201119490a04107c8179b10202548a9d0e5e60","modified":1535092804312},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1535092804312},{"_id":"themes/next/.github/stale.yml","hash":"b9f7b394c0f3c00ac36168aa5f88c04cbb335911","modified":1535092804312},{"_id":"themes/next/bak.git/FETCH_HEAD","hash":"927cf1c326ed68bb4aab81281b1aef9c4ca96854","modified":1535092804314},{"_id":"themes/next/bak.git/HEAD","hash":"cbbd873eec67d5e5dcf906926aea444709645fb9","modified":1535092804314},{"_id":"themes/next/bak.git/config","hash":"3af2d565c8eb1e4cae9ee983a466d52d851d8db2","modified":1535092804314},{"_id":"themes/next/bak.git/description","hash":"88d76a8724b84a5bbcc3bea08650bc679a0b3da6","modified":1535092804314},{"_id":"themes/next/bak.git/index","hash":"cd756f625445e356841d1a685a85c0365022b3c9","modified":1535092804325},{"_id":"themes/next/bak.git/packed-refs","hash":"55b259d779fb2b90f39512b90fd4a07b2089e5c8","modified":1535092804339},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1535092804340},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1535092804340},{"_id":"themes/next/docs/DATA-FILES.md","hash":"a5b89b34c1a76bef60f650fdcfae08ccedc4a4a6","modified":1535092804340},{"_id":"themes/next/docs/INSTALLATION.md","hash":"90565973c39b1c6166317740df2685a1b9961c25","modified":1535092804340},{"_id":"themes/next/docs/LICENSE","hash":"5b702310012d480b40529fd10cf1872f687277a0","modified":1535092804341},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1535092804341},{"_id":"themes/next/languages/de.yml","hash":"b8962e3a680530c331c96b06a41a519e7eca9988","modified":1535092804343},{"_id":"themes/next/languages/default.yml","hash":"2e52aa06eedfdfbb90ab0e8792968721aac412fb","modified":1535092804343},{"_id":"themes/next/languages/en.yml","hash":"4e6b8699dca27936b2f784c7680f1e4fab5b4c5b","modified":1535092804343},{"_id":"themes/next/languages/fr-FR.yml","hash":"e8cf4d66e919f3c1672b8ca26827185e774c4439","modified":1535092804343},{"_id":"themes/next/languages/id.yml","hash":"d0c2f8e90b047db16491a1a5c8f288d0e7244ed3","modified":1535092804343},{"_id":"themes/next/languages/it.yml","hash":"ac109a258ba8a58d07ece728239b093e132feb82","modified":1535092804343},{"_id":"themes/next/languages/ja.yml","hash":"640f0886603b8ed850a2ce81240a414c0cdda997","modified":1535092804343},{"_id":"themes/next/languages/ko.yml","hash":"edf0eeebb6d713c1f7e6b9751b19e8d0b13de4ee","modified":1535092804344},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1535092804344},{"_id":"themes/next/languages/pt.yml","hash":"ef68c52c85fa6c1aa0d53586794f8afd0d3a99ae","modified":1535092804344},{"_id":"themes/next/languages/pt-BR.yml","hash":"379591d355f7a1f16447635a0c154bad655db06e","modified":1535092804344},{"_id":"themes/next/languages/ru.yml","hash":"06e92838a38696f6a519caee12e70ca7898eaea4","modified":1535092804344},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1535092804344},{"_id":"themes/next/languages/zh-Hans.yml","hash":"1094b72ddcb19862787181705b1b779bb52ef34c","modified":1535092804345},{"_id":"themes/next/languages/zh-hk.yml","hash":"6f01b26859d6f3fa86ae346c03f2cff86cdbdc63","modified":1535092804345},{"_id":"themes/next/languages/zh-tw.yml","hash":"85a434a7ed860fed58dc748cba2a857ad6878338","modified":1535092804345},{"_id":"themes/next/layout/_layout.swig","hash":"610ceb8c645a2161360b02114e9b5b0be34ef571","modified":1535092804345},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1535092804362},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1535092804362},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1535092804362},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1535092804362},{"_id":"themes/next/layout/post.swig","hash":"ceba7287574c429a235aa7a62bf7a3dc1efb265a","modified":1535092804362},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1535092804363},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1535092804363},{"_id":"themes/next/scripts/merge-configs.js","hash":"5758f8f3f12d17bc80da65bb808a20b3a8aae186","modified":1535092804363},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1535092804365},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1535092804412},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1535092804413},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1535092804413},{"_id":"source/_posts/Image.png","hash":"1497cd005727341d9f4fc34ecf2a3b38294f4f58","modified":1535092804262},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535092804398},{"_id":"source/_posts/2018-08-22-Git-changyongmingling/726930-5079e6da8900d0e2.jpg","hash":"a2f099798543dfca2563f3cf6c0571e1bfa75332","modified":1535092804261},{"_id":"themes/next/bak.git/hooks/applypatch-msg.sample","hash":"61f0ed9af9a16dbba9b834edfb657f07aa10125d","modified":1535092804324},{"_id":"themes/next/bak.git/hooks/commit-msg.sample","hash":"e44c3d173580f6b4d8ee7f9b963d252af9902703","modified":1535092804324},{"_id":"themes/next/bak.git/hooks/post-update.sample","hash":"6c00d034115de8f56eba4ded1eba7ffc73b332f6","modified":1535092804324},{"_id":"themes/next/bak.git/hooks/pre-applypatch.sample","hash":"7863e8a9fef55740491ab4429a13081a20a1dad9","modified":1535092804324},{"_id":"themes/next/bak.git/hooks/pre-commit.sample","hash":"da4e689ea46d093a0a4585046fca844e243b22b0","modified":1535092804325},{"_id":"themes/next/bak.git/hooks/pre-push.sample","hash":"ac10c067e42e887ed93052dbece70922812546f3","modified":1535092804325},{"_id":"themes/next/bak.git/hooks/pre-rebase.sample","hash":"38c5fea16bac7be194361a885c678d8b08787d3b","modified":1535092804325},{"_id":"themes/next/bak.git/hooks/pre-receive.sample","hash":"bfff8781c853c3d554371cc50e63ec70eb377711","modified":1535092804325},{"_id":"themes/next/bak.git/hooks/prepare-commit-msg.sample","hash":"bbc936f9c3920673a901aae46a8b99afb1400a56","modified":1535092804325},{"_id":"themes/next/bak.git/hooks/update.sample","hash":"df9f68bdcd0e7c6cee8cdce7b17f8ff7e625847b","modified":1535092804325},{"_id":"themes/next/bak.git/logs/HEAD","hash":"ae1b1454ffdbc183c36f09bf433bb20b925eaaf1","modified":1535092804326},{"_id":"themes/next/bak.git/info/exclude","hash":"0214ce0925395605f10f65300bc1e4871dd9441e","modified":1535092804326},{"_id":"themes/next/docs/cn/DATA-FILES.md","hash":"9d1efb47c78969e9b1e5a2374d03ad9ea6e8b738","modified":1535092804341},{"_id":"themes/next/docs/cn/INSTALLATION.md","hash":"eb488ed645c48fe3436b9dcd6c719ec38295bd41","modified":1535092804341},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"6f10fbc0aa0bb65a8eaeb0a9454aa280f1d84d77","modified":1535092804342},{"_id":"themes/next/docs/cn/README.md","hash":"09e60d80615b99bc620547c360d77bf8614d0354","modified":1535092804341},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"3afd4abd7a25d78951a7e027b8c72ba817991c47","modified":1535092804342},{"_id":"themes/next/docs/ru/README.md","hash":"5f43e98cd460e82d04333c0918aabd33b34e74b5","modified":1535092804342},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1535092804342},{"_id":"themes/next/docs/cn/UPDATE-FROM-5.1.X.md","hash":"a667000e655fe66b2234fb66cc99e66450ba8cc8","modified":1535092804341},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1535092804345},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1535092804345},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"17c41210cfa3d4c648fba4b4bb7a456e547235e2","modified":1535092804345},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1535092804346},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1535092804346},{"_id":"themes/next/layout/_macro/post.swig","hash":"5ece620b125ccc2eab8482061a152f2a285bb293","modified":1535092804347},{"_id":"themes/next/layout/_macro/post.swig.bak","hash":"907011f1cea499bba6dc6a37a8d48d266d3b56ec","modified":1535092804347},{"_id":"themes/next/layout/_macro/post.swig.chushihua0821","hash":"27bf0b808929801dc863ae0821831ccb81841236","modified":1535092804347},{"_id":"themes/next/layout/_macro/post.swig1","hash":"11b10785a813404e507fd939b1a2d7e29732add0","modified":1535092804347},{"_id":"themes/next/layout/_macro/reward.swig","hash":"8dc3b6ba76c389aaa0810cbd0df206f7096d76a0","modified":1535092804347},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9f9a4adce86ec9f430ad050d58f8ee4eeccfa5eb","modified":1535092804347},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"616ffee93e84958e72ee0f996808f866c4ccdbf7","modified":1535092804347},{"_id":"themes/next/layout/_partials/comments.swig","hash":"365e32a72453cc087faa67a0919a3dbdf20a2dd0","modified":1535092804348},{"_id":"themes/next/layout/_partials/footer.swig","hash":"94be016d84414f1039536ab2fee0ffe69ae76418","modified":1535092804348},{"_id":"themes/next/layout/_partials/head.swig","hash":"75f4e47019b818324296cbfd36a067bd3ccb4670","modified":1535092804348},{"_id":"themes/next/layout/_partials/header.swig","hash":"73a575d672902cbc926fa1d6a063a0ca163692aa","modified":1535092804349},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1535092804349},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1535092804349},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1535092804349},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1535092804351},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1535092804351},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"f134aeb8d5bee351e5277edb92ac694af314b75f","modified":1535092804352},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1535092804355},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1535092804355},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1535092804356},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1535092804360},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1535092804360},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1535092804360},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1535092804366},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1535092804367},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1535092804366},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1535092804368},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1535092804368},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1535092804368},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1535092804369},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1535092804369},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1535092804368},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1535092804398},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1535092804399},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1535092804399},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1535092804399},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1535092804404},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1535092804404},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1535092804404},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1535092804404},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1535092804405},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1535092804405},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1535092804406},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1535092804406},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1535092804406},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535092804406},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1535092804406},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535092804406},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1535092804406},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1535092804406},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1535092804406},{"_id":"source/_posts/2018-08-20-shujukujichu1/Image.png","hash":"1497cd005727341d9f4fc34ecf2a3b38294f4f58","modified":1535092804259},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535092804351},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535092804351},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535092804380},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535092804380},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535092804381},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535092804397},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535092804398},{"_id":"themes/next/bak.git/refs/heads/master","hash":"fe20870c18f713ddf047b16a2bbd717cfbdb44a5","modified":1535092804339},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1535092804348},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1535092804348},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1535092804349},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1535092804349},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1535092804349},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1535092804350},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1535092804350},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1535092804350},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1535092804350},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1535092804351},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1535092804351},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1535092804351},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1535092804352},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1535092804352},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1535092804353},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1535092804352},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1535092804353},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1535092804353},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1535092804353},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1535092804353},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1535092804353},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1535092804353},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1535092804354},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1535092804354},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1535092804354},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1535092804354},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"6ebaaef0bd55b215b0e109adc41364e34255764e","modified":1535092804354},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"292cdd1059b76d3d10486b71c99d9afb3e59ea44","modified":1535092804354},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"18a58db53f1eef50462ee0065d4445b7fbb04fb5","modified":1535092804355},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"787d482d797c38e77d69629ebb88d45f972216b7","modified":1535092804355},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"7cf0c589d95a2d1848266ffe2357e91c95d2e7f8","modified":1535092804355},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1535092804355},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"ab181c036cda9656f87bb1a749e3e7cbc437f012","modified":1535092804355},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1535092804361},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1535092804361},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1535092804361},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1535092804362},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1535092804380},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1535092804380},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1535092804380},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1535092804380},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1535092804392},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1535092804396},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1535092804398},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1535092804398},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1535092804407},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1535092804407},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6c30aab4822b189d1fe9b20ca5272fd8d3ebe998","modified":1535092804407},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1535092804407},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1535092804408},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1535092804408},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1535092804408},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1535092804408},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1535092804408},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1535092804408},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1535092804411},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1535092804412},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1535092804412},{"_id":"themes/next/bak.git/objects/pack/pack-59ccd5c447b91c1959fc50148301893e8f07b025.idx","hash":"5ccd4b141734c83d5f6da0449ee14ee35dcc50d1","modified":1535092804327},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1535092804409},{"_id":"themes/next/bak.git/logs/refs/heads/master","hash":"2a6d31c817504a16b370d4d1ecc7b460bc29b3b1","modified":1535092804326},{"_id":"themes/next/bak.git/refs/remotes/origin/HEAD","hash":"e72f7364331a01c35feea3858c09e16db1631660","modified":1535092804339},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1535092804361},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1535092804361},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1535092804369},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1535092804369},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1535092804369},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1535092804370},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1535092804370},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1535092804372},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1535092804376},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1535092804379},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1535092804379},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1535092804379},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1535092804379},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1535092804380},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1535092804380},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1535092804380},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1535092804381},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1535092804381},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1535092804381},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1535092804381},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"4ec334200cca3c8ed7becb702c8fc3467e28b0d4","modified":1535092804382},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1535092804382},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1535092804382},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1535092804382},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1535092804382},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1535092804382},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1535092804383},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c0b5f6f095a5c192705dc45b98208d25242f8083","modified":1535092804383},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1535092804383},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1535092804383},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1535092804383},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"fada15ae00295ebd7b4d9390512ddc09ab759bf1","modified":1535092804384},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1535092804391},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1535092804391},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1535092804392},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1535092804408},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1535092804411},{"_id":"themes/next/bak.git/logs/refs/remotes/origin/HEAD","hash":"2a6d31c817504a16b370d4d1ecc7b460bc29b3b1","modified":1535092804326},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1535092804370},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1535092804370},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1535092804370},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1535092804370},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1535092804370},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1535092804370},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1535092804371},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1535092804371},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1535092804371},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1535092804372},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1535092804372},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1535092804371},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1535092804371},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1535092804372},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1535092804371},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1535092804372},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1535092804373},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1535092804373},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1535092804373},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"f1e6e6495e69c4da3e8167ffc56bfc4d17aa15e1","modified":1535092804373},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1535092804373},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1535092804373},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"82bc7fa5d38d98e98cc25f9a73189024fda25e63","modified":1535092804373},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1535092804373},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1535092804373},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1535092804373},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1535092804374},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1535092804374},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1535092804374},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"1faeb3fca899df9d033e4e6ad9a4867cdce7ef9d","modified":1535092804374},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1535092804376},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1535092804377},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1535092804376},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1535092804377},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1535092804377},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1535092804377},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1535092804377},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1535092804378},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1535092804377},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1535092804376},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1535092804378},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1535092804378},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1535092804378},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1535092804378},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1535092804378},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1535092804378},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1535092804379},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"b66aa075b48429cf3875fd02f693f378aec424da","modified":1535092804379},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1535092804374},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1535092804374},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1535092804375},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1535092804375},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1535092804375},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1535092804375},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1535092804375},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1535092804375},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1535092804375},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1535092804376},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1535092804382},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1535092804382},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1535092804383},{"_id":"themes/next/bak.git/objects/pack/pack-59ccd5c447b91c1959fc50148301893e8f07b025.pack","hash":"d3098328724ecc3d690260c6ea4ec3cba80d355b","modified":1535092804338},{"_id":"public/search.xml","hash":"9b715bd90d172fa1c5f924059c07bc64612aaa51","modified":1535098881569},{"_id":"public/atom.xml","hash":"8372240a1190438f16b33dc3a342351203fcdbc0","modified":1535098881581},{"_id":"public/about/index.html","hash":"640ebc506890f72250fb421b4402ba0c8c30112a","modified":1535098881616},{"_id":"public/categories/index.html","hash":"76b39ba44cac6f4a40c7a7dc16858ac7ca1ad645","modified":1535098881617},{"_id":"public/tags/index.html","hash":"ea670123f2577f3279b3febbcab5310cc2c6c7bb","modified":1535098881617},{"_id":"public/2018/08/24/Linux-Shell-jichu/index.html","hash":"6661639d9125fb7a14e5137add7c3b13bfe21455","modified":1535098881617},{"_id":"public/2018/08/22/tools/index.html","hash":"75eb2a40ab48518cee41c6c2a1016eb9677d02e2","modified":1535098881617},{"_id":"public/2018/08/22/hello-world/index.html","hash":"b84fa4bc58932b5af5b7000db10ff52751a7d02f","modified":1535098881617},{"_id":"public/2018/08/22/Git-changyongmingling/index.html","hash":"f2dfbed86a5de544c537b0061024b2f8854b1819","modified":1535098881617},{"_id":"public/2018/08/20/rlwrap/index.html","hash":"5aab09caa76dc8532fd9684f83259b87a5bfee50","modified":1535098881617},{"_id":"public/2018/08/20/shujukujichu1/index.html","hash":"0a2d73c11b0533427e038aeaef5d308e8fc3c77f","modified":1535098881617},{"_id":"public/2018/08/20/one/index.html","hash":"fa4a2950f70cfb40a414f1ab74de8b97f6cf22c5","modified":1535098881617},{"_id":"public/2018/08/20/gitjichupeizhi/index.html","hash":"1fa37616df01c6288b8caf342aa1c739775fd86c","modified":1535098881618},{"_id":"public/2018/08/20/limqfirst/index.html","hash":"fa4180e4a7515e574b50de3f016275d5120ef3c0","modified":1535098881618},{"_id":"public/2018/08/20/batjichu/index.html","hash":"3098cc8b2f9d86c881fb92ec9bdda9edfadccc5b","modified":1535098881618},{"_id":"public/2018/08/20/test/index.html","hash":"0a10628a5b42e4e1270cbdaa35daab990d14a0e2","modified":1535098881618},{"_id":"public/categories/life/index.html","hash":"136b07cf4ed5c45ec7eac90712633661ee8fafcd","modified":1535098881618},{"_id":"public/categories/Program/index.html","hash":"38e745292c66d6858a56b17090e68ade9b78c77d","modified":1535098881618},{"_id":"public/categories/效率工具/index.html","hash":"1cf09856aa4e0730a5f505278f9b11c3d534bcd1","modified":1535098881618},{"_id":"public/categories/Program/bat/index.html","hash":"c3f8a98d7e44470327e98b4dfd09afa8942d45d8","modified":1535098881618},{"_id":"public/categories/Program/test/index.html","hash":"665c17268a7299edcef2a5d9e2d3e7a3c1580a87","modified":1535098881618},{"_id":"public/categories/Program/Git/index.html","hash":"4ee4bb09c5a8f418e0ea20a01db5fad7e3bbab82","modified":1535098881618},{"_id":"public/categories/Program/hexo/index.html","hash":"b311dc081b24e53c51c760cf55d185eb960dd606","modified":1535098881619},{"_id":"public/categories/Program/Shell/index.html","hash":"01c0b001da1e76587b0a3877bb741a55ebe90c6f","modified":1535098881619},{"_id":"public/categories/Program/Oracle/index.html","hash":"c9cc6010a246978568be22df4c545693878a44ea","modified":1535098881619},{"_id":"public/index.html","hash":"92c2faaf6d4dabc70a26608fe909d9b66d09c952","modified":1535098881619},{"_id":"public/page/2/index.html","hash":"328521c58dfe517b2c9dd448f1d4d09ec6d29f09","modified":1535098881619},{"_id":"public/tags/Python/index.html","hash":"6a9428df7ce1a71921a78adbfd1f0d1d78fac178","modified":1535098881619},{"_id":"public/tags/tools/index.html","hash":"f48094350fb10db321d15cab000c4a5c1f3a6c22","modified":1535098881619},{"_id":"public/tags/效率工具/index.html","hash":"f3c2e57633508ab0fe667edd3caef6f19cf775d8","modified":1535098881619},{"_id":"public/tags/Shell/index.html","hash":"6d313260281282f2cf0616a2d9f9e90a267e681a","modified":1535098881619},{"_id":"public/tags/Linux/index.html","hash":"dc1dafba50e352251e61d14403054b1ea3cdab2b","modified":1535098881619},{"_id":"public/tags/Git/index.html","hash":"7147cc2a59f06e66a3f0a07eb4dc5710a32ed546","modified":1535098881620},{"_id":"public/tags/版本控制/index.html","hash":"298e1445fa31c71d0ad87b697285cb1418fccabe","modified":1535098881620},{"_id":"public/tags/bat/index.html","hash":"c01eb6da137c31d7c661637fd66c1e1469fde75c","modified":1535098881620},{"_id":"public/tags/Windows/index.html","hash":"28bcc7503c5dfad80231b90f67094bea5d241848","modified":1535098881620},{"_id":"public/tags/test/index.html","hash":"6075bad6a802f23c4c13c4fd242c240be6ecdf64","modified":1535098881620},{"_id":"public/tags/Oracle/index.html","hash":"749a6885b5dec26f277217cf53d8758dfa5c512a","modified":1535098881620},{"_id":"public/archives/index.html","hash":"346f67088faceefba05bd1fbfec3eeba1b87f887","modified":1535098881620},{"_id":"public/archives/page/2/index.html","hash":"5e84e7d9401b157bd761ea2db8873aa8190e6138","modified":1535098881620},{"_id":"public/archives/2018/index.html","hash":"23dafd943b038fb492d23d6aec0905ed08fff273","modified":1535098881620},{"_id":"public/archives/2018/page/2/index.html","hash":"cb8d4052a916a66938bfa8ba4d20666d820083ae","modified":1535098881620},{"_id":"public/archives/2018/08/index.html","hash":"ef3549fed740610884c65779a88c5570c311dff7","modified":1535098881620},{"_id":"public/archives/2018/08/page/2/index.html","hash":"1f4313d9ba617d0da1b4aa8bae39707be6f5a8d0","modified":1535098881620},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1535098881630},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1535098881630},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1535098881630},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1535098881630},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1535098881630},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1535098881630},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1535098881630},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1535098881630},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1535098881630},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1535098881630},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1535098881630},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1535098881630},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535098881631},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1535098881631},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1535098881631},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1535098881631},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1535098881631},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535098881631},{"_id":"public/2018/08/22/Git-changyongmingling/726930-5079e6da8900d0e2.jpg","hash":"a2f099798543dfca2563f3cf6c0571e1bfa75332","modified":1535098881631},{"_id":"public/2018/08/20/shujukujichu1/Image.png","hash":"1497cd005727341d9f4fc34ecf2a3b38294f4f58","modified":1535098882027},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1535098882032},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1535098882032},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1535098882032},{"_id":"public/js/src/bootstrap.js","hash":"531cdedd7fbe8cb1dab2e4328774a9f6b15b59da","modified":1535098882032},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1535098882032},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1535098882033},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1535098882033},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1535098882033},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1535098882034},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1535098882034},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1535098882034},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1535098882034},{"_id":"public/css/main.css","hash":"c68ca74b37e44d2008aaed9766def0a4646034f0","modified":1535098882034},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1535098882034},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1535098882034},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1535098882034},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1535098882034}],"Category":[{"name":"life","_id":"cjl7q8khn0004l8lro9w8rm3y"},{"name":"Program","_id":"cjl7q8khu000al8lr7pcyf1be"},{"name":"效率工具","_id":"cjl7q8khz000gl8lrn3lp09m3"},{"name":"bat","parent":"cjl7q8khu000al8lr7pcyf1be","_id":"cjl7q8kic000xl8lrkjr247v7"},{"name":"test","parent":"cjl7q8khu000al8lr7pcyf1be","_id":"cjl7q8kid0010l8lr1f186kik"},{"name":"Git","parent":"cjl7q8khu000al8lr7pcyf1be","_id":"cjl7q8kie0014l8lra7enn267"},{"name":"hexo","parent":"cjl7q8khu000al8lr7pcyf1be","_id":"cjl7q8kif0019l8lrzdg53bts"},{"name":"Shell","parent":"cjl7q8khu000al8lr7pcyf1be","_id":"cjl7q8kig001el8lrlkq0p8wb"},{"name":"Oracle","parent":"cjl7q8khu000al8lr7pcyf1be","_id":"cjl7q8kih001jl8lrlxuxp8te"}],"Data":[],"Page":[{"title":"about","date":"2018-08-20T05:16:33.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-08-20 13:16:33\n---\n","updated":"2018-08-24T06:40:04.265Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjl7q8khi0001l8lrbinq86fk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","layout":"categories","type":"categories","date":"2018-08-20T05:16:15.000Z","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\nlayout: categories\ntype: \"categories\"\ndate: 2018-08-20 13:16:15\ncomments: false\n---\n","updated":"2018-08-24T06:40:04.265Z","path":"categories/index.html","_id":"cjl7q8khm0003l8lra12cliyl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-08-20T05:16:25.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-08-20 13:16:25\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-08-24T06:40:04.265Z","path":"tags/index.html","layout":"page","_id":"cjl7q8khq0007l8lr24qpp3o1","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"第一篇文章","comments":1,"date":"2018-08-20T07:48:52.000Z","updated":"2018-08-20T07:48:52.000Z","_content":"\n","source":"_posts/2018-08-20-one.md","raw":"---\ntitle: 第一篇文章\ncomments: true\ndate: 2018-08-20 15:48:52\nupdated: 2018-08-20 15:48:52\ntags: Python\ncategories: life\n---\n\n","slug":"one","published":1,"layout":"post","photos":[],"link":"","_id":"cjl7q8khe0000l8lrvuqtxptk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"数据库基础1","comments":1,"date":"2018-08-20T09:05:48.000Z","updated":"2018-08-20T09:05:48.000Z","_content":"\n## 4.1 关系代数运算       \n\n传统的几何运算。并、差、交、笛卡尔积等。        \n专门的关系运算。选择、投影、连接等。    \n### 4.1.1 关系运算   \n\n(1)并(Union)     \n(2)差（Difference）  \n(3)交（Intersect）\n\n![图片](2018-08-20-shujukujichu1\\Image.png)\n\n\n### 4.1.2专门的关系运算        \n\n(1)选择            \nselect * from students where 性别='男'        \n(2)投影            \nselect 学号，姓名，身份证号 from students       \n(3)连接            \n连接是关系的横向结合。连接运算将两个关系模式拼接成一个更宽的关系模式，生成新关系中包含满足条件的元祖。连接过程是通过连接条件来控制的，连接条件中将出现两个表中的公共属性名，或者具有相同语义、可比的属性。连接结果是满足条件的所有记录，连接运算需要两个表作为操作对象，操作结果产生一个关系。若需要连接两个以上的表，则应当两两进行连接。一般可以描述为：JOIN <关系1> AND <关系2> WHERE <条件>SELECT *　FROM STUDENTS A INNER JOIN SECORES B ON A.学号=B.学号该命令查出学生表和成绩表中有相同学号的全部信息。 ","source":"_posts/2018-08-20-shujukujichu1.md","raw":"---\ntitle: 数据库基础1\ncomments: true\ndate: 2018-08-20 17:05:48\nupdated: 2018-08-20 17:05:48\ntags:\ncategories:\n- Program\n- test\n---\n\n## 4.1 关系代数运算       \n\n传统的几何运算。并、差、交、笛卡尔积等。        \n专门的关系运算。选择、投影、连接等。    \n### 4.1.1 关系运算   \n\n(1)并(Union)     \n(2)差（Difference）  \n(3)交（Intersect）\n\n![图片](2018-08-20-shujukujichu1\\Image.png)\n\n\n### 4.1.2专门的关系运算        \n\n(1)选择            \nselect * from students where 性别='男'        \n(2)投影            \nselect 学号，姓名，身份证号 from students       \n(3)连接            \n连接是关系的横向结合。连接运算将两个关系模式拼接成一个更宽的关系模式，生成新关系中包含满足条件的元祖。连接过程是通过连接条件来控制的，连接条件中将出现两个表中的公共属性名，或者具有相同语义、可比的属性。连接结果是满足条件的所有记录，连接运算需要两个表作为操作对象，操作结果产生一个关系。若需要连接两个以上的表，则应当两两进行连接。一般可以描述为：JOIN <关系1> AND <关系2> WHERE <条件>SELECT *　FROM STUDENTS A INNER JOIN SECORES B ON A.学号=B.学号该命令查出学生表和成绩表中有相同学号的全部信息。 ","slug":"shujukujichu1","published":1,"layout":"post","photos":[],"link":"","_id":"cjl7q8khk0002l8lrqzjv68sy","content":"<h2 id=\"4-1-关系代数运算\"><a href=\"#4-1-关系代数运算\" class=\"headerlink\" title=\"4.1 关系代数运算\"></a>4.1 关系代数运算</h2><p>传统的几何运算。并、差、交、笛卡尔积等。<br>专门的关系运算。选择、投影、连接等。    </p>\n<h3 id=\"4-1-1-关系运算\"><a href=\"#4-1-1-关系运算\" class=\"headerlink\" title=\"4.1.1 关系运算\"></a>4.1.1 关系运算</h3><p>(1)并(Union)<br>(2)差（Difference）<br>(3)交（Intersect）</p>\n<p><img src=\"2018-08-20-shujukujichu1\\Image.png\" alt=\"图片\"></p>\n<h3 id=\"4-1-2专门的关系运算\"><a href=\"#4-1-2专门的关系运算\" class=\"headerlink\" title=\"4.1.2专门的关系运算\"></a>4.1.2专门的关系运算</h3><p>(1)选择<br>select <em> from students where 性别=’男’<br>(2)投影<br>select 学号，姓名，身份证号 from students<br>(3)连接<br>连接是关系的横向结合。连接运算将两个关系模式拼接成一个更宽的关系模式，生成新关系中包含满足条件的元祖。连接过程是通过连接条件来控制的，连接条件中将出现两个表中的公共属性名，或者具有相同语义、可比的属性。连接结果是满足条件的所有记录，连接运算需要两个表作为操作对象，操作结果产生一个关系。若需要连接两个以上的表，则应当两两进行连接。一般可以描述为：JOIN &lt;关系1&gt; AND &lt;关系2&gt; WHERE &lt;条件&gt;SELECT </em>　FROM STUDENTS A INNER JOIN SECORES B ON A.学号=B.学号该命令查出学生表和成绩表中有相同学号的全部信息。 </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"4-1-关系代数运算\"><a href=\"#4-1-关系代数运算\" class=\"headerlink\" title=\"4.1 关系代数运算\"></a>4.1 关系代数运算</h2><p>传统的几何运算。并、差、交、笛卡尔积等。<br>专门的关系运算。选择、投影、连接等。    </p>\n<h3 id=\"4-1-1-关系运算\"><a href=\"#4-1-1-关系运算\" class=\"headerlink\" title=\"4.1.1 关系运算\"></a>4.1.1 关系运算</h3><p>(1)并(Union)<br>(2)差（Difference）<br>(3)交（Intersect）</p>\n<p><img src=\"2018-08-20-shujukujichu1\\Image.png\" alt=\"图片\"></p>\n<h3 id=\"4-1-2专门的关系运算\"><a href=\"#4-1-2专门的关系运算\" class=\"headerlink\" title=\"4.1.2专门的关系运算\"></a>4.1.2专门的关系运算</h3><p>(1)选择<br>select <em> from students where 性别=’男’<br>(2)投影<br>select 学号，姓名，身份证号 from students<br>(3)连接<br>连接是关系的横向结合。连接运算将两个关系模式拼接成一个更宽的关系模式，生成新关系中包含满足条件的元祖。连接过程是通过连接条件来控制的，连接条件中将出现两个表中的公共属性名，或者具有相同语义、可比的属性。连接结果是满足条件的所有记录，连接运算需要两个表作为操作对象，操作结果产生一个关系。若需要连接两个以上的表，则应当两两进行连接。一般可以描述为：JOIN &lt;关系1&gt; AND &lt;关系2&gt; WHERE &lt;条件&gt;SELECT </em>　FROM STUDENTS A INNER JOIN SECORES B ON A.学号=B.学号该命令查出学生表和成绩表中有相同学号的全部信息。 </p>\n"},{"title":"tools","comments":1,"date":"2018-08-22T14:26:12.000Z","updated":"2018-08-22T14:26:12.000Z","description":"tools&#58; 推荐 Windows 和 ios 的 apps 以及日常使用的电子产品。","_content":"\n{% cq %}\n君子生非异也，善假于物也。\n\n荀子\n{% endcq %}\n\n## 说明\n\n- __主要介绍 Windows、[iOS](#iOS) 的 Apps__（下文 Apple 指代  iOS）。\n    - 适合自己的工具，才是最好的工具，所以本文仅供参考，自行尝试最重要。\n    - 笔者是工具控，目力之内看起来还有点用的工具都会折腾过一遍。\n        - 过程中浪费了许多时间精力在很少派上用场甚至无用的工具上。\n        - 善于发现生活中关键的效率瓶颈，再根据需求寻找或创造工具就足够了。\n        - 因为折腾工具而忘记了把事做成的初心，实在是南辕北辙。\n- __App 选择原则__\n    - 「常用」的工具才值得折腾，不常用的凑合着用就行了。\n    - 「实用」最重要，美观次之，价格别太贵就行。\n    - 「稳定」：不能时常引起系统崩溃，起码提升效率的收益得超过操作系统崩溃重启的损失。\n    - 「简洁易用」：满足实际的需求即可，不需要花哨、多余的功能。\n- 参考相关文章\n    - 《[Mac 效率指南](/mac/efficiency)》\n    - 《[Mac 快捷键](/mac/shortcuts)》\n- 参考阅读\n    - [__少数派__](http://sspai.com/) - 高质量 App 推荐媒体，关于 iOS、Mac、硬件。\n    - [__Best App__](https://github.com/hzlzh/Best-App) - List in GitHub\n- 字体格式的含义\n    - ~~删除线~~ 标识的一定是我现在不用的 Apps。\n\n---\n\n## 软件\n\n### 常用\n\n- 网络访问\n\n  - Chrome\n    - 配合 [__cVim__](https://chrome.google.com/webstore/detail/cvim/ihlenndgcmojhcghmfjfneahoeklbjjh) 拓展，可在浏览器内 __使用 Vim 键位__ 浏览网页、操作浏览器！键盘党神器\n      - 可惜它无法在页面未加载完毕的情况下使用 Vim 键位，不够（[Firefox](http://www.firefox.com.cn/) + [VimFX](https://github.com/akhodakivskiy/VimFx)）极致！\n    - 用 __Inspect Element__（审查元素）配合 __Postman__ 等做 Web 开发、调试，比 Firefox 顺手。\n\n- 常用\n\n  - [__Trello__](https://trello.com/) <sup>Favorite</sup>\n\n    基于 Board 的事务管理。\n\n    - 使用 board 看板、list 列表、card 卡片等，组织事务；\n    - 使用 description 描述、comment 评论、attachment 附件等，跟踪记录事务内容；\n    - 根据 事务内容、label 标签、due date 截止期限等，考虑事务的优先次序。\n    - 我在现实管理工作项目的过程中，GitLab Issue Board 的应用，给我带来了很大的帮助。虽然那段时间很忙，但我还是有条不紊地推进了我和同事间的分工协作。自此迷上了使用 Board 的方式去管理事务。\n    - 类似的产品很多，Trello 是最简洁、好用、易上手的，这是我用它的关键原因。Slack 的服务被墙，在移动端访问不便（而 Trello 没被墙）；而国内的模仿者们则做得太复杂了，可能因为他们主攻 toB 的市场，不适合我这样的个人用户来使用，所以无爱。\n\n  - [__2Do__](https://www.2doapp.com/) <sup>Powerful</sup>\n    GTD 事务管理。\n\n    - 功能齐全、好用，用法可简可繁。快捷键完备！\n    - 推荐使用 iCloud Reminders 的 CalDAV 同步方式（支持 2Do 绝大部分特性，足以满足我的需求）；Dropbox 的同步方式虽然可以支持 2Do 的所有特性，可是需要翻墙才能同步数据，iPhone 需要长期开着 VPN 略显麻烦。所以为了稳定和省心，选择了前一种同步方式。\n\n  - [__1Password__](https://agilebits.com/onepassword) <sup>Privacy</sup>\n\n    帐号密码管理，以及私人信息的加密存储。\n\n    - 用一（两）个主密码管理所有其它密码。可生成随机密码，可记录登录网站时用的帐号密码，可自动填写表单登录网站。\n    - 以前一直用不惯，觉得用浏览器自带的自动登录和 iCloud 的 [__KeyChain Access__](https://support.apple.com/kb/PH20093?locale=zh_CN) 来记录管理帐号和密码足矣，可是不便于保存一些私人信息。工作之后，经济独立，更加注意保护个人隐私和财产安全了，要管理的私人信息多而杂乱，所以不得不借助专用的工具。\n    - 其它选择：\n      - [__KeyChain Access__](https://support.apple.com/kb/PH20093?locale=zh_CN)：macOS & iOS 原生支持，方便免费。\n      - [__Dashlane__](https://www.dashlane.com/)：好用，但贵。\n      - [__LastPass__](https://lastpass.com/)：够用，免费。\n\n  - [__Outlook__](https://outlook.live.com/owa/)\n    邮箱客户端，微软出品。\n\n    - 方便设置在邮箱服务器生效的邮件规则（因为公司邮箱用 Outlook 的服务）。\n      自动处理，屏蔽干扰，提高邮件处理效率。\n      - 将不同类型邮件归类到不同文件夹；\n      - 将可以忽略的邮件标为已读；\n      - 自动删除无用邮件。\n","source":"_posts/2018-08-22-tools.md","raw":"title: tools\ncomments: true\ndate: 2018-08-22 22:26:12\nupdated: 2018-08-22 22:26:12\ntags:  [tools,效率工具]\ncategories: 效率工具\n\ndescription: tools&#58; 推荐 Windows 和 ios 的 apps 以及日常使用的电子产品。\n---\n\n{% cq %}\n君子生非异也，善假于物也。\n\n荀子\n{% endcq %}\n\n## 说明\n\n- __主要介绍 Windows、[iOS](#iOS) 的 Apps__（下文 Apple 指代  iOS）。\n    - 适合自己的工具，才是最好的工具，所以本文仅供参考，自行尝试最重要。\n    - 笔者是工具控，目力之内看起来还有点用的工具都会折腾过一遍。\n        - 过程中浪费了许多时间精力在很少派上用场甚至无用的工具上。\n        - 善于发现生活中关键的效率瓶颈，再根据需求寻找或创造工具就足够了。\n        - 因为折腾工具而忘记了把事做成的初心，实在是南辕北辙。\n- __App 选择原则__\n    - 「常用」的工具才值得折腾，不常用的凑合着用就行了。\n    - 「实用」最重要，美观次之，价格别太贵就行。\n    - 「稳定」：不能时常引起系统崩溃，起码提升效率的收益得超过操作系统崩溃重启的损失。\n    - 「简洁易用」：满足实际的需求即可，不需要花哨、多余的功能。\n- 参考相关文章\n    - 《[Mac 效率指南](/mac/efficiency)》\n    - 《[Mac 快捷键](/mac/shortcuts)》\n- 参考阅读\n    - [__少数派__](http://sspai.com/) - 高质量 App 推荐媒体，关于 iOS、Mac、硬件。\n    - [__Best App__](https://github.com/hzlzh/Best-App) - List in GitHub\n- 字体格式的含义\n    - ~~删除线~~ 标识的一定是我现在不用的 Apps。\n\n---\n\n## 软件\n\n### 常用\n\n- 网络访问\n\n  - Chrome\n    - 配合 [__cVim__](https://chrome.google.com/webstore/detail/cvim/ihlenndgcmojhcghmfjfneahoeklbjjh) 拓展，可在浏览器内 __使用 Vim 键位__ 浏览网页、操作浏览器！键盘党神器\n      - 可惜它无法在页面未加载完毕的情况下使用 Vim 键位，不够（[Firefox](http://www.firefox.com.cn/) + [VimFX](https://github.com/akhodakivskiy/VimFx)）极致！\n    - 用 __Inspect Element__（审查元素）配合 __Postman__ 等做 Web 开发、调试，比 Firefox 顺手。\n\n- 常用\n\n  - [__Trello__](https://trello.com/) <sup>Favorite</sup>\n\n    基于 Board 的事务管理。\n\n    - 使用 board 看板、list 列表、card 卡片等，组织事务；\n    - 使用 description 描述、comment 评论、attachment 附件等，跟踪记录事务内容；\n    - 根据 事务内容、label 标签、due date 截止期限等，考虑事务的优先次序。\n    - 我在现实管理工作项目的过程中，GitLab Issue Board 的应用，给我带来了很大的帮助。虽然那段时间很忙，但我还是有条不紊地推进了我和同事间的分工协作。自此迷上了使用 Board 的方式去管理事务。\n    - 类似的产品很多，Trello 是最简洁、好用、易上手的，这是我用它的关键原因。Slack 的服务被墙，在移动端访问不便（而 Trello 没被墙）；而国内的模仿者们则做得太复杂了，可能因为他们主攻 toB 的市场，不适合我这样的个人用户来使用，所以无爱。\n\n  - [__2Do__](https://www.2doapp.com/) <sup>Powerful</sup>\n    GTD 事务管理。\n\n    - 功能齐全、好用，用法可简可繁。快捷键完备！\n    - 推荐使用 iCloud Reminders 的 CalDAV 同步方式（支持 2Do 绝大部分特性，足以满足我的需求）；Dropbox 的同步方式虽然可以支持 2Do 的所有特性，可是需要翻墙才能同步数据，iPhone 需要长期开着 VPN 略显麻烦。所以为了稳定和省心，选择了前一种同步方式。\n\n  - [__1Password__](https://agilebits.com/onepassword) <sup>Privacy</sup>\n\n    帐号密码管理，以及私人信息的加密存储。\n\n    - 用一（两）个主密码管理所有其它密码。可生成随机密码，可记录登录网站时用的帐号密码，可自动填写表单登录网站。\n    - 以前一直用不惯，觉得用浏览器自带的自动登录和 iCloud 的 [__KeyChain Access__](https://support.apple.com/kb/PH20093?locale=zh_CN) 来记录管理帐号和密码足矣，可是不便于保存一些私人信息。工作之后，经济独立，更加注意保护个人隐私和财产安全了，要管理的私人信息多而杂乱，所以不得不借助专用的工具。\n    - 其它选择：\n      - [__KeyChain Access__](https://support.apple.com/kb/PH20093?locale=zh_CN)：macOS & iOS 原生支持，方便免费。\n      - [__Dashlane__](https://www.dashlane.com/)：好用，但贵。\n      - [__LastPass__](https://lastpass.com/)：够用，免费。\n\n  - [__Outlook__](https://outlook.live.com/owa/)\n    邮箱客户端，微软出品。\n\n    - 方便设置在邮箱服务器生效的邮件规则（因为公司邮箱用 Outlook 的服务）。\n      自动处理，屏蔽干扰，提高邮件处理效率。\n      - 将不同类型邮件归类到不同文件夹；\n      - 将可以忽略的邮件标为已读；\n      - 自动删除无用邮件。\n","slug":"tools","published":1,"layout":"post","photos":[],"link":"","_id":"cjl7q8khp0006l8lr1jn3j2pc","content":"<blockquote class=\"blockquote-center\"><p>君子生非异也，善假于物也。</p>\n<p>荀子</p>\n</blockquote>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><ul>\n<li><strong>主要介绍 Windows、<a href=\"#iOS\">iOS</a> 的 Apps</strong>（下文 Apple 指代  iOS）。<ul>\n<li>适合自己的工具，才是最好的工具，所以本文仅供参考，自行尝试最重要。</li>\n<li>笔者是工具控，目力之内看起来还有点用的工具都会折腾过一遍。<ul>\n<li>过程中浪费了许多时间精力在很少派上用场甚至无用的工具上。</li>\n<li>善于发现生活中关键的效率瓶颈，再根据需求寻找或创造工具就足够了。</li>\n<li>因为折腾工具而忘记了把事做成的初心，实在是南辕北辙。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>App 选择原则</strong><ul>\n<li>「常用」的工具才值得折腾，不常用的凑合着用就行了。</li>\n<li>「实用」最重要，美观次之，价格别太贵就行。</li>\n<li>「稳定」：不能时常引起系统崩溃，起码提升效率的收益得超过操作系统崩溃重启的损失。</li>\n<li>「简洁易用」：满足实际的需求即可，不需要花哨、多余的功能。</li>\n</ul>\n</li>\n<li>参考相关文章<ul>\n<li>《<a href=\"/mac/efficiency\">Mac 效率指南</a>》</li>\n<li>《<a href=\"/mac/shortcuts\">Mac 快捷键</a>》</li>\n</ul>\n</li>\n<li>参考阅读<ul>\n<li><a href=\"http://sspai.com/\" target=\"_blank\" rel=\"noopener\"><strong>少数派</strong></a> - 高质量 App 推荐媒体，关于 iOS、Mac、硬件。</li>\n<li><a href=\"https://github.com/hzlzh/Best-App\" target=\"_blank\" rel=\"noopener\"><strong>Best App</strong></a> - List in GitHub</li>\n</ul>\n</li>\n<li>字体格式的含义<ul>\n<li><del>删除线</del> 标识的一定是我现在不用的 Apps。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h2><h3 id=\"常用\"><a href=\"#常用\" class=\"headerlink\" title=\"常用\"></a>常用</h3><ul>\n<li><p>网络访问</p>\n<ul>\n<li>Chrome<ul>\n<li>配合 <a href=\"https://chrome.google.com/webstore/detail/cvim/ihlenndgcmojhcghmfjfneahoeklbjjh\" target=\"_blank\" rel=\"noopener\"><strong>cVim</strong></a> 拓展，可在浏览器内 <strong>使用 Vim 键位</strong> 浏览网页、操作浏览器！键盘党神器<ul>\n<li>可惜它无法在页面未加载完毕的情况下使用 Vim 键位，不够（<a href=\"http://www.firefox.com.cn/\" target=\"_blank\" rel=\"noopener\">Firefox</a> + <a href=\"https://github.com/akhodakivskiy/VimFx\" target=\"_blank\" rel=\"noopener\">VimFX</a>）极致！</li>\n</ul>\n</li>\n<li>用 <strong>Inspect Element</strong>（审查元素）配合 <strong>Postman</strong> 等做 Web 开发、调试，比 Firefox 顺手。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>常用</p>\n<ul>\n<li><p><a href=\"https://trello.com/\" target=\"_blank\" rel=\"noopener\"><strong>Trello</strong></a> <sup>Favorite</sup></p>\n<p>基于 Board 的事务管理。</p>\n<ul>\n<li>使用 board 看板、list 列表、card 卡片等，组织事务；</li>\n<li>使用 description 描述、comment 评论、attachment 附件等，跟踪记录事务内容；</li>\n<li>根据 事务内容、label 标签、due date 截止期限等，考虑事务的优先次序。</li>\n<li>我在现实管理工作项目的过程中，GitLab Issue Board 的应用，给我带来了很大的帮助。虽然那段时间很忙，但我还是有条不紊地推进了我和同事间的分工协作。自此迷上了使用 Board 的方式去管理事务。</li>\n<li>类似的产品很多，Trello 是最简洁、好用、易上手的，这是我用它的关键原因。Slack 的服务被墙，在移动端访问不便（而 Trello 没被墙）；而国内的模仿者们则做得太复杂了，可能因为他们主攻 toB 的市场，不适合我这样的个人用户来使用，所以无爱。</li>\n</ul>\n</li>\n<li><p><a href=\"https://www.2doapp.com/\" target=\"_blank\" rel=\"noopener\"><strong>2Do</strong></a> <sup>Powerful</sup><br>GTD 事务管理。</p>\n<ul>\n<li>功能齐全、好用，用法可简可繁。快捷键完备！</li>\n<li>推荐使用 iCloud Reminders 的 CalDAV 同步方式（支持 2Do 绝大部分特性，足以满足我的需求）；Dropbox 的同步方式虽然可以支持 2Do 的所有特性，可是需要翻墙才能同步数据，iPhone 需要长期开着 VPN 略显麻烦。所以为了稳定和省心，选择了前一种同步方式。</li>\n</ul>\n</li>\n<li><p><a href=\"https://agilebits.com/onepassword\" target=\"_blank\" rel=\"noopener\"><strong>1Password</strong></a> <sup>Privacy</sup></p>\n<p>帐号密码管理，以及私人信息的加密存储。</p>\n<ul>\n<li>用一（两）个主密码管理所有其它密码。可生成随机密码，可记录登录网站时用的帐号密码，可自动填写表单登录网站。</li>\n<li>以前一直用不惯，觉得用浏览器自带的自动登录和 iCloud 的 <a href=\"https://support.apple.com/kb/PH20093?locale=zh_CN\" target=\"_blank\" rel=\"noopener\"><strong>KeyChain Access</strong></a> 来记录管理帐号和密码足矣，可是不便于保存一些私人信息。工作之后，经济独立，更加注意保护个人隐私和财产安全了，要管理的私人信息多而杂乱，所以不得不借助专用的工具。</li>\n<li>其它选择：<ul>\n<li><a href=\"https://support.apple.com/kb/PH20093?locale=zh_CN\" target=\"_blank\" rel=\"noopener\"><strong>KeyChain Access</strong></a>：macOS &amp; iOS 原生支持，方便免费。</li>\n<li><a href=\"https://www.dashlane.com/\" target=\"_blank\" rel=\"noopener\"><strong>Dashlane</strong></a>：好用，但贵。</li>\n<li><a href=\"https://lastpass.com/\" target=\"_blank\" rel=\"noopener\"><strong>LastPass</strong></a>：够用，免费。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><a href=\"https://outlook.live.com/owa/\" target=\"_blank\" rel=\"noopener\"><strong>Outlook</strong></a><br>邮箱客户端，微软出品。</p>\n<ul>\n<li>方便设置在邮箱服务器生效的邮件规则（因为公司邮箱用 Outlook 的服务）。<br>自动处理，屏蔽干扰，提高邮件处理效率。<ul>\n<li>将不同类型邮件归类到不同文件夹；</li>\n<li>将可以忽略的邮件标为已读；</li>\n<li>自动删除无用邮件。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote class=\"blockquote-center\"><p>君子生非异也，善假于物也。</p>\n<p>荀子</p>\n</blockquote>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><ul>\n<li><strong>主要介绍 Windows、<a href=\"#iOS\">iOS</a> 的 Apps</strong>（下文 Apple 指代  iOS）。<ul>\n<li>适合自己的工具，才是最好的工具，所以本文仅供参考，自行尝试最重要。</li>\n<li>笔者是工具控，目力之内看起来还有点用的工具都会折腾过一遍。<ul>\n<li>过程中浪费了许多时间精力在很少派上用场甚至无用的工具上。</li>\n<li>善于发现生活中关键的效率瓶颈，再根据需求寻找或创造工具就足够了。</li>\n<li>因为折腾工具而忘记了把事做成的初心，实在是南辕北辙。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>App 选择原则</strong><ul>\n<li>「常用」的工具才值得折腾，不常用的凑合着用就行了。</li>\n<li>「实用」最重要，美观次之，价格别太贵就行。</li>\n<li>「稳定」：不能时常引起系统崩溃，起码提升效率的收益得超过操作系统崩溃重启的损失。</li>\n<li>「简洁易用」：满足实际的需求即可，不需要花哨、多余的功能。</li>\n</ul>\n</li>\n<li>参考相关文章<ul>\n<li>《<a href=\"/mac/efficiency\">Mac 效率指南</a>》</li>\n<li>《<a href=\"/mac/shortcuts\">Mac 快捷键</a>》</li>\n</ul>\n</li>\n<li>参考阅读<ul>\n<li><a href=\"http://sspai.com/\" target=\"_blank\" rel=\"noopener\"><strong>少数派</strong></a> - 高质量 App 推荐媒体，关于 iOS、Mac、硬件。</li>\n<li><a href=\"https://github.com/hzlzh/Best-App\" target=\"_blank\" rel=\"noopener\"><strong>Best App</strong></a> - List in GitHub</li>\n</ul>\n</li>\n<li>字体格式的含义<ul>\n<li><del>删除线</del> 标识的一定是我现在不用的 Apps。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h2><h3 id=\"常用\"><a href=\"#常用\" class=\"headerlink\" title=\"常用\"></a>常用</h3><ul>\n<li><p>网络访问</p>\n<ul>\n<li>Chrome<ul>\n<li>配合 <a href=\"https://chrome.google.com/webstore/detail/cvim/ihlenndgcmojhcghmfjfneahoeklbjjh\" target=\"_blank\" rel=\"noopener\"><strong>cVim</strong></a> 拓展，可在浏览器内 <strong>使用 Vim 键位</strong> 浏览网页、操作浏览器！键盘党神器<ul>\n<li>可惜它无法在页面未加载完毕的情况下使用 Vim 键位，不够（<a href=\"http://www.firefox.com.cn/\" target=\"_blank\" rel=\"noopener\">Firefox</a> + <a href=\"https://github.com/akhodakivskiy/VimFx\" target=\"_blank\" rel=\"noopener\">VimFX</a>）极致！</li>\n</ul>\n</li>\n<li>用 <strong>Inspect Element</strong>（审查元素）配合 <strong>Postman</strong> 等做 Web 开发、调试，比 Firefox 顺手。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>常用</p>\n<ul>\n<li><p><a href=\"https://trello.com/\" target=\"_blank\" rel=\"noopener\"><strong>Trello</strong></a> <sup>Favorite</sup></p>\n<p>基于 Board 的事务管理。</p>\n<ul>\n<li>使用 board 看板、list 列表、card 卡片等，组织事务；</li>\n<li>使用 description 描述、comment 评论、attachment 附件等，跟踪记录事务内容；</li>\n<li>根据 事务内容、label 标签、due date 截止期限等，考虑事务的优先次序。</li>\n<li>我在现实管理工作项目的过程中，GitLab Issue Board 的应用，给我带来了很大的帮助。虽然那段时间很忙，但我还是有条不紊地推进了我和同事间的分工协作。自此迷上了使用 Board 的方式去管理事务。</li>\n<li>类似的产品很多，Trello 是最简洁、好用、易上手的，这是我用它的关键原因。Slack 的服务被墙，在移动端访问不便（而 Trello 没被墙）；而国内的模仿者们则做得太复杂了，可能因为他们主攻 toB 的市场，不适合我这样的个人用户来使用，所以无爱。</li>\n</ul>\n</li>\n<li><p><a href=\"https://www.2doapp.com/\" target=\"_blank\" rel=\"noopener\"><strong>2Do</strong></a> <sup>Powerful</sup><br>GTD 事务管理。</p>\n<ul>\n<li>功能齐全、好用，用法可简可繁。快捷键完备！</li>\n<li>推荐使用 iCloud Reminders 的 CalDAV 同步方式（支持 2Do 绝大部分特性，足以满足我的需求）；Dropbox 的同步方式虽然可以支持 2Do 的所有特性，可是需要翻墙才能同步数据，iPhone 需要长期开着 VPN 略显麻烦。所以为了稳定和省心，选择了前一种同步方式。</li>\n</ul>\n</li>\n<li><p><a href=\"https://agilebits.com/onepassword\" target=\"_blank\" rel=\"noopener\"><strong>1Password</strong></a> <sup>Privacy</sup></p>\n<p>帐号密码管理，以及私人信息的加密存储。</p>\n<ul>\n<li>用一（两）个主密码管理所有其它密码。可生成随机密码，可记录登录网站时用的帐号密码，可自动填写表单登录网站。</li>\n<li>以前一直用不惯，觉得用浏览器自带的自动登录和 iCloud 的 <a href=\"https://support.apple.com/kb/PH20093?locale=zh_CN\" target=\"_blank\" rel=\"noopener\"><strong>KeyChain Access</strong></a> 来记录管理帐号和密码足矣，可是不便于保存一些私人信息。工作之后，经济独立，更加注意保护个人隐私和财产安全了，要管理的私人信息多而杂乱，所以不得不借助专用的工具。</li>\n<li>其它选择：<ul>\n<li><a href=\"https://support.apple.com/kb/PH20093?locale=zh_CN\" target=\"_blank\" rel=\"noopener\"><strong>KeyChain Access</strong></a>：macOS &amp; iOS 原生支持，方便免费。</li>\n<li><a href=\"https://www.dashlane.com/\" target=\"_blank\" rel=\"noopener\"><strong>Dashlane</strong></a>：好用，但贵。</li>\n<li><a href=\"https://lastpass.com/\" target=\"_blank\" rel=\"noopener\"><strong>LastPass</strong></a>：够用，免费。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><a href=\"https://outlook.live.com/owa/\" target=\"_blank\" rel=\"noopener\"><strong>Outlook</strong></a><br>邮箱客户端，微软出品。</p>\n<ul>\n<li>方便设置在邮箱服务器生效的邮件规则（因为公司邮箱用 Outlook 的服务）。<br>自动处理，屏蔽干扰，提高邮件处理效率。<ul>\n<li>将不同类型邮件归类到不同文件夹；</li>\n<li>将可以忽略的邮件标为已读；</li>\n<li>自动删除无用邮件。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Linux Shell  编程基础","date":"2018-08-24T15:13:56.000Z","updated":"2018-08-24T15:26:12.000Z","description":"Linux&#58; 本文介绍 Linux 常用 Shell 命令及简单 Shell 脚本。","_content":"## 第一讲\n\nzh_CN.GB18030\n`cat /etc/shells` 可以查看系统的 shell 种类。`echo $SHELL` 查看当前使用的shell。在当前shell中运行其它shell，例：\n\n```bash\n# /bin/csh ls -lh。 \nchomod u=rwx,g+w,o+r file \nchown -R jack /etc/test/ #把这个目录下所有的子目录和文件的拥有者都改变成jack\n```\n\n把这个目录下所有的子目录和文件的拥有者都改变成jack。\n\n`chown jack.jack /etc/test/ -R`\numask   文件   目录\n0\t6\t7\n1\t5\t6\n2\t4\t5\n3\t3\t4\n4\t2\t3\n5\t1\t2\n6\t0\t1\n7\t0\t0\n/etc/profile 文件中可以设定 umask 值。\n\n`alias ll='ls -alh'`\n\n`cat $HOME/.bashrc` , 别名都放在这个文件中。\n\n命令替换：`ls \\`cat myfile\\` -al`，这个反引号就是1左边的键，把myfile的内容输出到ls的输入。\n后台运行：# nohup tar -czf abc.tar.gz /etc/abc/ &。jobs -l查看后台运行情况。\n模式匹配：ls *.txt -l。\n\n## 第二讲\n\n本地变量在用户现在的shell生命期的脚本中使用，例在当前shell中设置变量，ABC=123，然后exit退出当前shell，再进入系统用set指令(显示本地变量)发现ABC变量无。readonly ABC，把ABC设置成只读变量。只是用readonly指令显示当前shell中有哪些只读变量。\n\n环境变量用于所有用户进程（经常称为子进程）。登录进程称为父进程，shell中执行的用户进程均称为子进程。不像本地变量(只用于现在的shell)环境变量可用于所有子进程，这包括编辑器，脚本和应用。 \n$HOME/.bash_profile(/etc/profile)\nexport，例：export ABC=\"shell program\"，把ABC这个变量变成环境变量。直接输入export也可以查看环境变量有哪些。readonly ABC，把环境变量ABC变成只读的。\n\n变量替换：\n${var name}\t显示实际值到var name\n${var name:+value}\t如果设置了var name，则显示其值value，否则为空\n${var name:?value}\t如果未设置var name，显示用户定义错误信息value\n${var name:-value}\t如果未设置var name，显示其值value，如果设置了var name则显示var name的值\n${var name:=value}\t如果未设置var name，设置其值并显示，如果设置了var name则显示var name的值\nenv\nunset ABC，删除ABC变量，但是用readonly声明的变量是不能被unset的。\n\n位置变量：先看下面的脚本\n\n```bash\n#!/bin/bash\n#parms\necho \"program name is $0\"\necho \"1 parm is $1\"\necho \"2 parm is $2\"\necho \"3 parm is $3\"\necho \"4 parm is $4\"\n```\n\n然后运行这个脚本：./parms a b c d，就会显示结果,$0表示脚本名称，$1-9分别表示位置变量名，在运行脚本时代入脚本中。\n再例如：\n\n```bash\n#!/bin/bash\n#parm.sh\nfind /home/chinaitlab/shell -name $1 -print\n```\n\n然后运行这个脚本: `./parm.sh abc.txt` 。\n\n标准变量：bash 默认建立了一些标准环境变量，可在 /etc/profile 中定义。\n EXINIT，运行 vi 时初始化设置一些参数\nHOME\nIFS\nLOGNAME\nMAIL\nMAILCHECK\nMAILPATH\nPATH\nPS1\nPS2\nSHELL\nTERMINFO\nTERM\nTZ\nEDITOR\nPWD\nMANPATH\n\n特殊变量：\n$#(传递到脚本的参数个数)\n$*(以一个单字符串显示所有向脚本传递的参数。与位置变量不同，此选项参数可超过9个)\n$$(脚本运行的当前进程ID号)\n$!(后台运行的最后一个进程的进程ID号)\n$@(与$#相同，但是使用时加引号，并在引号中返回每个参数)\n$-(显示shell使用的当前选项，与set命令功能相同)\n$?(显示最后命令的推出状态。0表示没有错误，其它任何值表明有错误)\n\n影响变量的命令：\ndeclare\n-设置或显示变量\n-f 只显示函数名\n-r 创建只读变量(declare和typeset)\n-x 创建转出变量\n-i 创建整数变量\n- 使用+替代-，可以颠倒选项的含义\n  export\n  -用于创建传给予shell的变量(环境变量)\n- --表明选项结束，所有后续参数都是实参\n- -f表明在\"名-值\"对中的名字是函数名\n- -n把全局变量转换成局部变量，换句话说，命令的变量不再传给shell\n- -p显示全局变量列表\n  unset\n- 用于取消变量的定义\n- --表明选项结束\n- -f删除只读变量，但不能取消从shell环境中删除指定的变量和函数如：PATH，PS1，PS2，PPID，UID，EUID等的设置。\n  shift[n]\n- 用于移动位置变量，调整位置变量，使$3的值赋予$2,$2的值赋予$1。\n  typeset\n  -用于显示或设置变量\n  -是declare的同义词\n\n引号：\n使用双引号可以引用除字符$,`(反引号),\\外的任意字符或字符串。例：echo -e \"ert, $SHELL'\\n* china`echo itlab`\"。\n单引号会忽略其中所有的特殊含义的字符，例：echo 'ert, $SHELL * china`echo itlab`'。\n反引号用于设置系统命令的输出到变量，shell将反引号中的内容作为一个系统命令，并执行其内容。\n反斜杠：如果一个字符有特殊含义，反斜杠防止shell误解其含义，即屏蔽其特殊含义，这些字符有特殊含义： $,*,+,&,\",|,?,^例：echo *，显示当前目录下的所有文件名，echo \\*，则显示*。\n\n运算符类型：\n按位运算符\t~,<<,>>,&,|,^\n运算符\t\t说明\n~op1\t\t反运算符，把op1中所有的二进制为1变为0，0变为1\nop1<<op2\t左移运算符，把op1中的二进制位向左移动op2位，忽略最左端移出的各位，最右端的各位补0值，每做一次按位左移就有实现op1乘以2。\nop1>>op2\t右移运算符，把op1中的二进制位向右移动op2位，忽略最右端移出的各位，最左端的各位补0值，每做一次按位右移就有实现op1除以2。\nop1&op2\t\t与比较运算符，op1和op2对应位，对于每个二进制位来说，如果二者该位都是1，则结果为1，否则为0。\nop1^op2\t\t异或运算符，op1和op2对应位，对于每个二进制位来说，如果二者该位互补，则结果为1否则为0。\nop1|op2\t\t或运算符。\n$[]表示形式告诉shell对方括号中的表达式求值，例：echo $[2+8]，echo $[2>>8]，echo $[2<<4]，echo $[2^4]，echo $[~3]。\n逻辑运算符：&&,||,>,==,<,!=例：echo $[2&&2]，echo $[1||0]。\n赋值运算符：=,+=,-=,*=,/=,%=,&=,^=,|=,<<=,>>=\nlet $count=$count+$change\nlet $count+=$change\n$[]可以接受不同基数的数字\n- [ base#n ] n表示基数从2到36的任何基数，例：echo $[10#8+1]，8进制的10加上1，结果为9。\n\n## 第三讲\n\necho [option] string\n\n- e解析转义字符\n- -n回车不换行，linux系统默认回车换行，例：echo \"hello\"和echo -n \"hello\"的区别。\n- string中的转义符(\\c,\\f,\\t,\\n)，\\c表示回车不换行，\\f表示禁止，\\t表示跳格(tab)，\\n表示回车换行\n  例：\n  ```bash\n  #!/bin/bash\n  #echod\n  echo -e \"This echo's 3 new lines\\n\\n\\n\"\n  echo \"OK\"\n  echo\n  echo \"This echo's 3 new lines\\n\\n\\n\"\n  echo \"The log files have all been done\">mylogfile.txt\n  ```\n\nread语句可以从键盘或文件的某一行文本中读入信息，并将其赋给一个变量。\nread var1 var2...\n-如果只指定了一个变量，那么read将会把所有的输入赋给该变量，直至遇到第一个文件结束符或回车；如果给出了多个变量，他们按顺序分别被赋予不同的变量。shell将用空格作为变量之间的分隔符。\n例：\n#!/bin/bash\n#readname\necho -n \"First name:\"\nread firstname\necho -n \"Last name:\"\nread lastname\necho -e \"Your First Name is :${firstname}\\n\"\necho -e \"Your Last Name is :${lastname}\\n\"\n\ncat可显示文件内容，创建文件还可以显示控制字符。\ncat [options] file1 file2...\n- -v显示控制字符\n  使用cat命令时要注意，它不会在文件分页符处停下来，它会一下显示完整个文件，如果希望每次显示一页，可以使用more。例：cat file1 file2 file3，会在屏幕上同时显示三个文件的内容，cat file1 file2 file3>file123，会把这三个文件的内容合并到一个文件file123中，cat -v dos.txt，显示这个windows下生成的文件，并显示控制字符(这些控制字符是在windows生成这个文件时加入的)。\n  管道举例：df -k|awk '{print $1}'|grep -v \"Filesystem\"。\n  tee命令把输出的一个副本输送到标准输出，另一个副本拷贝到相应的文件中。\n  tee -a files\n- 如果希望在看到输出的同时，也将其存入一个文件，那么这个命令再合适不过了，一般用于管道之后，-a参数表示追加写入files中，如果没有-a参数，则覆盖写入这个文件中。例：who | tee -a who.out。\n\n标准输入输出和错误\n在shell中执行命令时，每个进程都和三个打开的文件相联系，并使用文件描述符来引用这些文件，由于文件描述符不容易记忆，shell同时给出了相应的文件名。\n文件\t\t\t文件描述符\n输入文件-标准输入\t0(缺省是键盘，也可以是文件或其它命令的输出)\n输出文件-标准输出\t1(缺省是屏幕，也可以是文件)\n错误输出文件-标准错误\t2(缺省是屏幕，也可以是文件)\n系统中实际上有12个文件描述符，可以任意使用文件描述符3到9。\n\n文件重定向\ncommand > file\t\t把标准输出重定向到一个新文件中\ncommand >> file\t\t把标准输出重定向到一个文件中(追加)\ncommand 1 > file\t把标准输出重定向到一个文件中\ncommand > file 2>&1\t把标准输出和标准错误一起重定向到一个文件中\ncommand 2 > file\t把标准错误重定向到一个文件中\ncommand 2>> file\t把标准输出重定向到一个文件中(追加)\ncommand >> file 2>&1\t把标准输出和标准错误一起重定向到一个文件中(追加)\ncommand < file > file2\tcommand命令以file作为标准输入，file2文件作为标准输出\ncommand < file\t\tcommand命令以file作为输入\ncommand << dclimiter\t从标准输入中读入，直至遇到dclimiter分界符\ncommand < &m\t\t把文件描述符m作为标准输入\ncommand > &m\t\t把标准输出重定向到文件描述符m中\ncommand < &-\t\t关闭标准输入\n例：>nullfile，创建一个新的空文件。sort < file，把file作为输入源，排序然后输出到屏幕上。sort < name.txt > name.out。cat account_new.txt account_old.txt 1>accounts.out 2>accounts.err，account_new.txt存在，account_old.txt不存在，那么accounts.out将包含account_new.txt的内容，不会包含account_old.txt的内容，account_old.txt不存在的错误信息会写入accounts.err中。\n合并标准输出和标准错误的时候，切忌shell是从左至右分析相应的命令，例：grep \"standard\" standard.txt > grep.out 2>&1。\n\nexec命令可以用来替代当前shell；换句话说，并没有启动子shell，使用这一命令时任何现有环境都会被清除，并重新启动一个shell。\nexec command\n-其中的command通常是一个shell脚本。\n对文件描述符进行操作的时候(也只有在这时)，它不会覆盖你当前的shell。\n\n文件描述符：\n3-9文件描述符\nexec与文件描述符的结合\n例：\n#!/bin/bash\n#file_desc\nexec 3<&0 0<name.txt\nread line1\nread line2\nexec 0<&3\necho $line1\necho $line2\n\n## 第四讲 控制流结构\n```bash\nif 条件1\nthen\n\t命令1\nelif 条件2\nthen\n\t命令2\nelse\n\t命令3\nfi\n```\n例：\n\n```bash\n#!/bin/bash\n#if test\nif [ \"10\" -lt \"12\" ]\nthen\n   echo \"yes,10 is less than 12\"\nfi\n```\n\n可以使用man test获得条件的帮助。\n再例：\n\n```bash\n#!/bin/bash\n#iftest2\necho -n \"Enter your name:\"\nread NAME\nif [ \"$NAME\" == \"\" ];then\n\techo \"You did not enter your name\"\nfi\n```\n\n再例：\n\n```bash\n#!/bin/bash\n#ifcp\nif cp myfile.bak myfile;then\necho \"good copy\"\nelse echo \"basename $0:error could not copy files\" >&2\nfi\n```\n\n再例：\n\n```bash\n#!/bin/bash\n#ifelif\necho -n \"Enter your name:\"\nread NAME\nif [ -z $NAME ] || [ \"$NAME\" = \"\" ];then\n\techo \"you do not enter a name.\"\nelif [ \"$NAME\" = \"root\" ];then\n\techo \"hello root\"\nelif [ \"$NAME\" = \"chinaitlab\" ];then\n\techo \"hello chinaitlab\"\nelse\n\techo \"you are not root or chinaitlab,but hi,$NAME\"\nfi\n```\n\ncase语句格式: \n\n```bash\ncase 值 in\n模式1)\n\t命令1\n\t;;\n模式2)\n\t命令2\n\t;;\nesac\n```\n\ncase取值后面必须为单词in，每一个模式必须以右括号结束。取值可以为变量或常数，匹配发现取值符合某一模式后，其间所有命令开始执行直至;;。模式匹配符*表示任意字符,?表示任意单字符，[..]表示类或范围中任意字符。\n例：\n\n```bash\n#!/bin/bash\n#case select \necho -n \"Enter a number from 1 to 3:\"\nread ANS\ncase $ANS in\n1)\n\techo \"you select 1\"\n\t;;\n2)\n\techo \"you select 2\"\n\t;;\n3)\n\techo \"you select 3\"\n\t;;\nY|y)\n\techo \"you select $ANS\"\n\t;;\n*)\n\techo \"basename $0:This is not between 1 and 3\" >&2\n\texit;\n\t;;\nesac\n```\n\nfor循环格式：\n\n```bash\nfor 变量名 in 列表\ndo\n\t命令1\n\t命令2\ndone\n```\n\n当变量值在列表里，for循环即执行一次所有命令，使用变量名访问列表中取值。命令可为任何有效的shell命令和语句。变量名为任何单词。In列表用法是可选的，如果不用它，for循环使用命令行的位置参数。in列表可以包含替换，字符串和文件名。\n例：\n\n```bash\n#!/bin/bash\n#forlist1\nfor loop in 1 2 3 4 5\ndo\n\techo $loop\ndone\n```\n\n再例：\n\n```bash \n#!/bin/bash\n#forlist2\nfor loop in \"orange red blue grey\"\ndo\n  echo $loop\ndone\n```\n\n再例：\n```bash\n#!/bin/bash\n#forlist2\nfor loop in `cat myfile`\ndo\n  echo $loop\ndone\nuntil循环格式：\nuntil 条件\ndo\n  命令1\n  命令2\n  ...\ndone\n```\n注：条件可为任意测试条件，测试发生在循环末尾，因此循环至少执行一次。\n例：\n```bash\n#!/bin/bash\n#until_mon\n#监控分区\nPart=\"/backup\"\n#得到磁盘使用的百分比\nLOOK_OUT=`df|grep \"$Part\"|awk '{print $5}'|sed 's/%//g'`\necho $LOOK_OUT\nuntil [\"$LOOK_OUT\" gt \"90\"]\ndo\n  echo \"FileSystem /backup is nearly full\" |mail root\n  LOOK_OUT=`df|grep \"$Part\"|awk '{print $5}'|sed 's/%//g'`\n  sleep 3600\ndone\n```\n然后# nohup ./dfuntil &让这个程序在后台运行，一小时检测一次看这个分区的空间占用率是否大于90%。\n\nwhile格式：\n```bash\nwhile 命令\ndo\n  命令1\n  命令2\n  ...\ndone\n```\n注：在while和do之间虽然通常只使用一个命令，但可以放几个命令，命令通常用作测试条件。\n例：\n```bash\n#!/bin/bash\n#whileread\necho \"按住<ctrl>+D退出输入。\"\nwhile echo -n \"输入你最喜欢的电影：\";read FILM\ndo\n\techo \"Yeah.${FILM}是一部好电影！\"\ndone\n```\n再例：\n```bash\n#!/bin/bash\n#whileread\nwhile read LINE\ndo\n\techo $LINE\ndone <names.txt\n```\n把names.txt这个文件的内容按每行输出到屏幕。\nbreak与continue：\nbreak[n]\n-退出循环，如果是在一个嵌入循环里，可以指定n来跳出的循环个数。\n例：\n```bash\n#!/bin/bash\n#breakout\nwhile :\ndo\n  echo -n \"Enter any number[1..5]:\"\n  read ANS\n  case $ANS in\n  1|2|3|4|5)\n\techo \"you enter a number between 1 and 5.\"\n\t;;\n  *)\n\techo \"wrong number,bye.\"\n\tbreak\n\t;;\n  esac\ndone\n```\n再例：\n```bash\n#!/bin/bash\n#breakout\nwhile :\ndo\n  echo -n \"Enter any number[1..5]:\"\n  read ANS\n  case $ANS in\n  1|2|3|4|5)\n\techo \"you enter a number between 1 and 5.\"\n\t;;\n  *)\n\techo -n \"wrong number,continue(y/n)?:\"\n\tread IS_CONTINUE\n\tcase $IS_CONTINUE in\n\t\ty|yes|Y|YES)\n\t\t\tcontinue\n\t\t\t;;\n\t\t*)\n\t\t\tbreak\n\t\t\t;;\n\tesac\n  esac\ndone\n```\n## 第五讲\n\n正则表达式：一种用来描述文本模式的特殊语法，由普通字符(a到z)以及特殊字符(称为元字符，如/,*,?等)\n匹配的字符串\n文本过滤工具在某种模式下都支持正则表达式\n基本元字符集及含义\n字符\t含义\n^\t只匹配行首\n$\t只匹配行尾\n\n*\t匹配0个或多个此单字符\n  ]\t只匹配[]内字符，可以是一个单字符，也可以是字符序列。可以使用-表示[]内字符序列范围，如用[1-5]代替[12345]。\n  \t只用来屏蔽一个元字符的特殊含义\n  \t只匹配任意单字符\n  attern\\{n\\}\t只用来匹配前面pattern出现次数。n为次数\n  attern\\{n,\\}\t含义同上，但次数最少为n\n  attern\\{n,m\\}\t含义同上，但pattern出现次数在n与m之间。\n    例：\n    ^d\n  rwxrwxrw-\t匹配\n  rw-rw-rw\t不匹配\n    ^...1\n  482XC56D\t不匹配\n  442XW7134\t不匹配\n  451ABC123\t匹配\n  D11XC9871\t匹配\n    trouble$--匹配以单词trouble结尾的所有字符\n    ^$--匹配空行\n    ^.$--匹配包含一个字符的行\n    用\\屏蔽一个特殊字符，特殊字符有\",',||,^,*,.,+等，\\*\\.pas正则表达式中匹配以*.pas结尾的所有字符或文件。\n\n逗号将括弧内要匹配的不同字符串分开，用-表示一个字符串范围\n[0123456789]或[0-9]：任意一个数字\n[a-z]：任意小写字母\n[A-Z a-z]：任意大小写字母\n[A-Z a-z 0-9]：任意字母或数字\n[S,s]：匹配大小写s\n\nA\\{2\\}B：A出现2次：AAB\nA\\{4,\\}B：A最少出现4次，AAAAB，AAAAAB...\nA\\{2,4\\}B：A出现次数范围2-4次，AAB，AAAB，AAAAB\n[0-9]\\{3\\}\\.[0-9]\\{3\\}\\.[0-9]\\{3\\}\\.[0-9]\\{3\\}：匹配IP地址\n\nfind命令形式\nfind pathname -option [-print -exec -ok]\n-pathname查找路径，例如用.来表示当前目录，用/表示系统根目录。-print，find命令将匹配的文件输出到标准输出。-exec，find命令对匹配的文件执行该参数所给出的shell命令，相应命令的形式为'command'{} \\;'，注意{}和\\；之间的空格。-ok和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前都会给出提示，让用户来确定是否执行。\nfind命令的一般形式：\n-name按照文件名找文件\n-perm按照文件权限来找文件\n-user按照文件属主来找文件\n-group按照文件所属的组来找文件\n-mtime -n +n按照文件的更改时间来查找文件。-n表示文件更改时间距现在n天以内，+n表示文件更改时间距现在n天以前。find命令还有-atime和-ctime选项，但他们都和-mtime选项相似\n-size n[c]查找文件长度为n块的文件，带有c时表示文件长度以字节计。\n-nogroup查找无有效所属组的文件，即该文件所属的组在/etc/groups中不存在。\n-nouser查找无有效属主的文件，即该文件的属主在/etc/passwd中不存在。\n-newer file1 ! -newer file2查找更改时间比文件file1新但比文件file2旧的文件。\n-type查找某一类的文件，比如：b块设备文件，d目录，c字符设备文件，p管道文件，l符号链接文件，f普通文件。\n\n举例：\n-name：可以使用某种文件名模式来匹配文件，记住要用引号将文件名模式引起来，例：\nfind -name \"*.txt\" -print，没有路径表示查找当前路径。find ./ -name \"*.txt\" -print。find ./ -name \"[A-Z]*\" -print，find /etc -name \"host*\" -print。\n-perm：find . -perm 755 -print。\n-user和-nouser：find `pwd` -user root -print。find `pwd` -nouser -print。\n-group和-nogroup：find ./ -group itlab -print，find / -nogroup -print。\n-mtime：find /var -mtime -5 -print，find /var -mtime +3 -print。\n-newer：find `pwd` -newer \"myfile\" ! -newer \"myfile123\" -print。\n-type：find /etc -type d -print。\n-size：find . -size +1000000c -print查找文件大小大于1000000字节的文件，find . -size +10 -print，查找大小大于10块的文件。\n-depth：使用find命令时，可能希望先匹配所有的文件，再在子目录中查找，find / -name \"con.file\" -depth -print。\n-exec或ok：find . -type f -exec ls -l {} \\;\nfind . -name \"*.log\" -mtime +5 -ok rm{} \\;\n-xargs:在使用find命令的-exec选项处理匹配到的文件时，find命令将所有匹配到的文件一起传递给exec，不幸的是有些系统对能够传递给exec的命令长度有限制，这样在find命令运行几分钟后就会出现溢出错误。错误信息通常是“参数列太长”或“参数列溢出”，这就是xargs命令的用处所在，特别是与find命令一起使用。exec会发起多个进程，而xargs不会多个，只有一个。例：find ./ -perm -7 -print | xargs chmod o-w，\nfind ./ -type f -print | xargs file。\n\ngrep介绍\n对文本文件进行模式查找，grep有三种变形\n-Grep：标准grep命令\n-Egrep：扩展grep，支持基本及扩展的正则表达式\n-Fgrep：快速grep\ngrep一般格式为：\n-grep[选项]基本正则表达式[文件]\n-字符串参数(基本正则表达式)最好采用双引号，一是以防被误解为shell命令，二是可以用来查找多个单词组成的字符串。\ngrep命令选项：\n-c：只输出匹配行的计数\n-i：不区分大小写(只适用于单字符)\n-h：查询多文件时不显示文件名\n-H：显示文件名\n-l：查询多文件时只输出包含匹配字符的文件名\n-n：显示匹配行及行号\n-s：不显示不存在或无匹配文本的错误信息\n-v：显示不包含匹配文本的所有行\n例：\ngrep \"jenny\" *.txt\ngrep \"sort it\" *\ngrep -c \"2004\" myfile\ngrep -n \"2004\" myfile\ngrep -i \"Jul\" myfile\ngrep -v \"2004:22\" myfile\ngrep \"2004:22:5[0-9]\" myfile\ngrep \"^[^210]\" myfile，查找行首不是2或1或0的行。\ngrep \"[5-8][6-9][0-2]\" myfile\ngrep \"4\\{2\\}\" myfile\ngrep \"4\\{2,\\}\" myfile\ngrep \"4\\{2,4\\}\" myfile\ngrep \"^$\" myfile\ngrep \"\\?\" myfile\ngrep \"^d\" myfile\ngrep \"^[^d]\" myfile\n\ngrep命令类名类等价的正则表达式\n[[:upper:]][A-Z]\n[[:alnum:]][0-9a-zA-Z]\n[[:lower:]][a-z]\n[[:space:]]\t空格或tab键\n[[:digit:]][0-9]\n[[:alpha:]][a-zA-Z]\n例：grep \"5[[:digit:]][[:digit:]]\" myfile\n\nawk介绍\n可从文件或字符串中基于指定规则浏览和抽取信息，是一种自解释的编程语言，三种方式调用awk：\n-命令行方式：\n\tawk [-F field-spearator]'command' input-files，field-spearator默认是空格。\n-awk脚本\n\t所有awk命令插入一个文件，并使awk程序可执行，然后用awk命令解释器作为脚本的首行，以便通过键入脚本名称来调用它。\n-awk命令插入一个单独文件\n\tawk -f awk-script-file input-files\n\nawk脚本由各种操作和模式组成\n模式和动作：\n    -模式部分决定动作语句何时出发及出发事件。(BEGIN,END)\n    -动作对数据进行处理，放在大括号{}内指明。(input)\n分隔符，域和记录：\n    -awk执行时，其浏览域标记为$1,$2...$n。这种方法称为域标识。$0为所有域，即这条记录。\n    -注意执行时不要混淆符号$和shell提示符$，他们是不同的。\n例：awk '{print $0}' score.txt | tee score.out。\nawk -F . '{print $0}' score.txt |tee score.out。\nawk '{print $1 \"\\t\"$4}' score.txt。\nawk 'BEGIN {print \"Name Maths\\n------\"} {print $1\"\\t\"$4} END {print \"end-of-report\"}' score.txt。\n\nawk中的特殊元字符：+和？，+表示匹配任意字符，？表示匹配单个字符。\n匹配操作符：~(表示匹配),!~(表示不匹配)，要匹配的内容放在两个\\之间。\ncat score.txt|awk '$0 ~/218.79.131.96/'。\nawk '$0 !~/218.79.131.96/' score.txt。\nawk '{if($1==\"218.79.131.96\") print $0}' score.txt。\n\nsed介绍\nsed不与初始化文件打交道，它操作的只是一个拷贝，然后所有的改动如果没有重定向到一个文件，将输出到屏幕。sed是一种重要的文本过滤工具，使用一行命令或使用管道与grep与awk相结合。非交互性文本流编辑。调用sed有三种方式：\n-使用sed命令行格式\n   sed [选项] sed命令 输入文件\n-使用sed脚本文件，格式为：\n   sed [选贤] -f sed脚本文件 输入文件\n-sed脚本文件[选项] 输入文件\n-不管是使用shell命令行方式或脚本文件方式，如果没有指定输入文件，sed从标准输入中接受输入，一般是键盘或重定向结果。\nsed命令选项：\n-n不打印\n-c下一命令是编辑命令\n-f如果正在调用sed脚本文件\n\nsed在文件中查找文本的方式\n-使用行号，可以是一个简单数字或是一个行号范围\n-使用正则表达式\nx\t\t\tx为一行号\nx,y\t\t\t表示行号范围从x到y\n/pattern/\t\t查询包含模式的行\n/pattern/pattern/\t查询包含两个模式的行\npattern/,x\t\t在给定的行号上查询包含模式的行\nx,/pattern/\t\t通过行号和模式查询匹配行\nx,y!\t\t\t查询不包含指定行号x和y的行 \n基本sed编辑命令：\np\t打印匹配行\n=\t显示文件行号\na\\\t在定位行号后附加新文本信息\ni\\\t在定位行号后插入新文本信息\nd\t删除定位行\nc\\\t用新文本替换定位文本\ns\t使用替换模式替换相应模式\nr\t从另一个文件中读文本\nw\t写文本到一个文件\nq\t第一个模式匹配完成后退出或立即退出\nl\t显示与八进制ASCII代码等价的控制字符\n{}\t在定位行执行的命令组\nn\t从另一个文件中读文本下一行，并附加在下一行\ng\t将模式2粘贴到/pattern n/\ny\t传送字符\n\n例：\nsed '2p' score.txt，单引号中的是命令，打印score.txt这个文件的第二行，这里全部打印，因为没有加-n，这样匹配到的和没匹配到的都打印。\nsed -n '2p' score.txt，-n表示不打印没匹配到的，只打印第二行。\nsed -n '1,4p' score.txt，打印1~4行。\nsed -n '/los/p' myfile.txt，打印包含los字符的所有行。\nsed -n '4,/los/p' myfile.txt，从第四行开始匹配到第一个los结束，如果los在第六行，那么从第四行到第六行都打印，如果下面还有los也不打印了。\nsed -n '/^$/=' myfile.txt，显示空行的行号。\nsed -n -e '/^$/p' -e '/^$/=' myfile，打印空白行打印行号。\nsed -n '/chinaitlab/a\\shenzhen' myfile.txt。\nsed -n '/chinaitlab/i\\shenzhen' myfile.txt。\nsed -n '/chinaitlab/c\\chinaitlab shenzhen' myfile.txt。\nsed '1,2d' myfile.txt，把第一第二行删除。\nsed 's/chinaitlab/chinaitlab shenzhen/g' myfile.txt，当有多个chinaitlab时，加g表示全部替换。\nsed -n 's/chinaitlab/& hello/p' myfile.txt， 在匹配到的所有的chinaitlab的后面加 hello。\nsed -n 's/chinaitlab/hello &/p' myfile.txt，在匹配到的所有的chinaitlab的前面加 hello。\nsed 'lr ctrl.txt' myfile.txt。\nsed 'china/q' myfile.txt。\nsed -n '/china/l' myfile.txt。\n\n合并与分割\nsort[options] files\n-许多不同的域按不同的列顺序分类\n-c测试文件是否已经分类\n-m合并两个分类文件\n-u删除所有复制行\n-o存储sort结果的输出文件名\n-t域分隔符：用非空格或tab键分割域\n+n n为域号，使用此域号开始分类\nn指定分类是域上的数字分类项\n-r比较求逆\n\n例：\nsort -c myfile，检查这个文件是否已经排序。\nsort -u myfile，\n\n\n\n\n\n## 第六讲shell函数\n\n定义函数格式：\n函数名()\n{\n命令1\n...\n}\nfunction 函数名()\n{\n...\n}\n函数可以放在同一个文件中作为一段代码，也可以放在只包含函数的单独文件中。\n#!/bin/bash\n#hellofun\nfunction hello()\n{\necho \"hello,today is `date`\"\nreturn 0\n}\necho \"now going to the function hello\"\nhello\necho \"back from the function\"\n\n参数传递：向函数传递参数就像在脚本中使用位置变量$1,$2...$9\n例：\n#!/bin/bash\n#func\nfunction hello()\n{\necho \"Hello,$1 today is `date`\"\n}\necho \"now going to the function hello\"\nhello chinaitlab\necho \"back from the function\"\n\n函数文件\n#!/bin/bash\n#func\n#source function\n. hellofun\necho \"now going to the function hello\"\nhello\necho \"back from the function\"\n\n#!/bin/bash\n#hellofun\nfunction hello()\n{\necho \"Hello, today is `date`\"\nreturn 0\n}\n\n检查载入函数和删除函数\n察看载入函数set\n删除函数unset\n例：\n#!/bin/bash\n#func\n#source function\n. hellofun\nset #察看加载的函数和变量信息\necho \"now going to the function hello\"\nunset hello#删除这个函数\nhello\necho \"back from the function\"\n\n函数返回值：\n#!/bin/bash\n#hellofun\nfunction hello()\n{\necho \"Hello, today is `date`\"\nreturn 0\n}\n#!/bin/bash\n#func\necho \"now going to the function hello\"\nhello\necho $?\necho \"back from the function\"\n\n## 第七讲脚本参数传递\n\nshift命令,每次讲参数位置向左偏移n位。\n#!/bin/bash\n#opt2\nusage()\n{\necho \"usage:`basename $0` filenames\"\n}\ntotalline=0\nif[ $# -lt 2 ];then\n\tusage\n\texit#退出系统，下面的代码不执行\nfi\nwhile [ $# -ne 0]#参数个数不等于0\ndo\nline=`cat $1|wc -l`\necho \"$1:${line}\"\ntotalline=$[$totalline+$line]\nshift#调用shift时$#(参数个数)也跟着减1\ndone\necho \"-----------\"\necho \"total:${totalline}\"\n\ngetopts获得多个命令行参数\n#!/bin/bash\nALL=false\nHELP=false\nFILE=false\nVERBOSE=false\nwhile getopts ahfvc OPTION\ndo\n\tcase $OPTION in\n\ta)\n\t\tALL=true\n\t\techo \"ALL IS $ALL\"\n\t\t;;\n\th)\n\t\tHELP=true\n\t\techo \"HELP is $HELP\"\n\t\t;;\n\tf)\n\t\tFILE=true\n\t\techo \"FILE is $FILE\"\n\t\t;;\n\tv)\n\t\tVERBOSE=true\n\t\techo \"VERBOSE is $VERBOSE\"\n\t\t;;\n\tc)\n\t\techo \"c value is $c\"\n\t\t;;\n\t\\?)\n\t\techo \"`basename $0` -[a h f v] -[c value] file \"\n\t\t;;\n\tesac\ndone","source":"_posts/2018-08-23-Linux-Shell-jichu.md","raw":"title: Linux Shell  编程基础\ndate: 2018-08-24 23:13:56\nupdated: 2018-08-24 23:26:12\ntags: [Shell, Linux]\ncategories: \n\n- Program \n- Shell\ndescription: Linux&#58; 本文介绍 Linux 常用 Shell 命令及简单 Shell 脚本。\n---\n## 第一讲\n\nzh_CN.GB18030\n`cat /etc/shells` 可以查看系统的 shell 种类。`echo $SHELL` 查看当前使用的shell。在当前shell中运行其它shell，例：\n\n```bash\n# /bin/csh ls -lh。 \nchomod u=rwx,g+w,o+r file \nchown -R jack /etc/test/ #把这个目录下所有的子目录和文件的拥有者都改变成jack\n```\n\n把这个目录下所有的子目录和文件的拥有者都改变成jack。\n\n`chown jack.jack /etc/test/ -R`\numask   文件   目录\n0\t6\t7\n1\t5\t6\n2\t4\t5\n3\t3\t4\n4\t2\t3\n5\t1\t2\n6\t0\t1\n7\t0\t0\n/etc/profile 文件中可以设定 umask 值。\n\n`alias ll='ls -alh'`\n\n`cat $HOME/.bashrc` , 别名都放在这个文件中。\n\n命令替换：`ls \\`cat myfile\\` -al`，这个反引号就是1左边的键，把myfile的内容输出到ls的输入。\n后台运行：# nohup tar -czf abc.tar.gz /etc/abc/ &。jobs -l查看后台运行情况。\n模式匹配：ls *.txt -l。\n\n## 第二讲\n\n本地变量在用户现在的shell生命期的脚本中使用，例在当前shell中设置变量，ABC=123，然后exit退出当前shell，再进入系统用set指令(显示本地变量)发现ABC变量无。readonly ABC，把ABC设置成只读变量。只是用readonly指令显示当前shell中有哪些只读变量。\n\n环境变量用于所有用户进程（经常称为子进程）。登录进程称为父进程，shell中执行的用户进程均称为子进程。不像本地变量(只用于现在的shell)环境变量可用于所有子进程，这包括编辑器，脚本和应用。 \n$HOME/.bash_profile(/etc/profile)\nexport，例：export ABC=\"shell program\"，把ABC这个变量变成环境变量。直接输入export也可以查看环境变量有哪些。readonly ABC，把环境变量ABC变成只读的。\n\n变量替换：\n${var name}\t显示实际值到var name\n${var name:+value}\t如果设置了var name，则显示其值value，否则为空\n${var name:?value}\t如果未设置var name，显示用户定义错误信息value\n${var name:-value}\t如果未设置var name，显示其值value，如果设置了var name则显示var name的值\n${var name:=value}\t如果未设置var name，设置其值并显示，如果设置了var name则显示var name的值\nenv\nunset ABC，删除ABC变量，但是用readonly声明的变量是不能被unset的。\n\n位置变量：先看下面的脚本\n\n```bash\n#!/bin/bash\n#parms\necho \"program name is $0\"\necho \"1 parm is $1\"\necho \"2 parm is $2\"\necho \"3 parm is $3\"\necho \"4 parm is $4\"\n```\n\n然后运行这个脚本：./parms a b c d，就会显示结果,$0表示脚本名称，$1-9分别表示位置变量名，在运行脚本时代入脚本中。\n再例如：\n\n```bash\n#!/bin/bash\n#parm.sh\nfind /home/chinaitlab/shell -name $1 -print\n```\n\n然后运行这个脚本: `./parm.sh abc.txt` 。\n\n标准变量：bash 默认建立了一些标准环境变量，可在 /etc/profile 中定义。\n EXINIT，运行 vi 时初始化设置一些参数\nHOME\nIFS\nLOGNAME\nMAIL\nMAILCHECK\nMAILPATH\nPATH\nPS1\nPS2\nSHELL\nTERMINFO\nTERM\nTZ\nEDITOR\nPWD\nMANPATH\n\n特殊变量：\n$#(传递到脚本的参数个数)\n$*(以一个单字符串显示所有向脚本传递的参数。与位置变量不同，此选项参数可超过9个)\n$$(脚本运行的当前进程ID号)\n$!(后台运行的最后一个进程的进程ID号)\n$@(与$#相同，但是使用时加引号，并在引号中返回每个参数)\n$-(显示shell使用的当前选项，与set命令功能相同)\n$?(显示最后命令的推出状态。0表示没有错误，其它任何值表明有错误)\n\n影响变量的命令：\ndeclare\n-设置或显示变量\n-f 只显示函数名\n-r 创建只读变量(declare和typeset)\n-x 创建转出变量\n-i 创建整数变量\n- 使用+替代-，可以颠倒选项的含义\n  export\n  -用于创建传给予shell的变量(环境变量)\n- --表明选项结束，所有后续参数都是实参\n- -f表明在\"名-值\"对中的名字是函数名\n- -n把全局变量转换成局部变量，换句话说，命令的变量不再传给shell\n- -p显示全局变量列表\n  unset\n- 用于取消变量的定义\n- --表明选项结束\n- -f删除只读变量，但不能取消从shell环境中删除指定的变量和函数如：PATH，PS1，PS2，PPID，UID，EUID等的设置。\n  shift[n]\n- 用于移动位置变量，调整位置变量，使$3的值赋予$2,$2的值赋予$1。\n  typeset\n  -用于显示或设置变量\n  -是declare的同义词\n\n引号：\n使用双引号可以引用除字符$,`(反引号),\\外的任意字符或字符串。例：echo -e \"ert, $SHELL'\\n* china`echo itlab`\"。\n单引号会忽略其中所有的特殊含义的字符，例：echo 'ert, $SHELL * china`echo itlab`'。\n反引号用于设置系统命令的输出到变量，shell将反引号中的内容作为一个系统命令，并执行其内容。\n反斜杠：如果一个字符有特殊含义，反斜杠防止shell误解其含义，即屏蔽其特殊含义，这些字符有特殊含义： $,*,+,&,\",|,?,^例：echo *，显示当前目录下的所有文件名，echo \\*，则显示*。\n\n运算符类型：\n按位运算符\t~,<<,>>,&,|,^\n运算符\t\t说明\n~op1\t\t反运算符，把op1中所有的二进制为1变为0，0变为1\nop1<<op2\t左移运算符，把op1中的二进制位向左移动op2位，忽略最左端移出的各位，最右端的各位补0值，每做一次按位左移就有实现op1乘以2。\nop1>>op2\t右移运算符，把op1中的二进制位向右移动op2位，忽略最右端移出的各位，最左端的各位补0值，每做一次按位右移就有实现op1除以2。\nop1&op2\t\t与比较运算符，op1和op2对应位，对于每个二进制位来说，如果二者该位都是1，则结果为1，否则为0。\nop1^op2\t\t异或运算符，op1和op2对应位，对于每个二进制位来说，如果二者该位互补，则结果为1否则为0。\nop1|op2\t\t或运算符。\n$[]表示形式告诉shell对方括号中的表达式求值，例：echo $[2+8]，echo $[2>>8]，echo $[2<<4]，echo $[2^4]，echo $[~3]。\n逻辑运算符：&&,||,>,==,<,!=例：echo $[2&&2]，echo $[1||0]。\n赋值运算符：=,+=,-=,*=,/=,%=,&=,^=,|=,<<=,>>=\nlet $count=$count+$change\nlet $count+=$change\n$[]可以接受不同基数的数字\n- [ base#n ] n表示基数从2到36的任何基数，例：echo $[10#8+1]，8进制的10加上1，结果为9。\n\n## 第三讲\n\necho [option] string\n\n- e解析转义字符\n- -n回车不换行，linux系统默认回车换行，例：echo \"hello\"和echo -n \"hello\"的区别。\n- string中的转义符(\\c,\\f,\\t,\\n)，\\c表示回车不换行，\\f表示禁止，\\t表示跳格(tab)，\\n表示回车换行\n  例：\n  ```bash\n  #!/bin/bash\n  #echod\n  echo -e \"This echo's 3 new lines\\n\\n\\n\"\n  echo \"OK\"\n  echo\n  echo \"This echo's 3 new lines\\n\\n\\n\"\n  echo \"The log files have all been done\">mylogfile.txt\n  ```\n\nread语句可以从键盘或文件的某一行文本中读入信息，并将其赋给一个变量。\nread var1 var2...\n-如果只指定了一个变量，那么read将会把所有的输入赋给该变量，直至遇到第一个文件结束符或回车；如果给出了多个变量，他们按顺序分别被赋予不同的变量。shell将用空格作为变量之间的分隔符。\n例：\n#!/bin/bash\n#readname\necho -n \"First name:\"\nread firstname\necho -n \"Last name:\"\nread lastname\necho -e \"Your First Name is :${firstname}\\n\"\necho -e \"Your Last Name is :${lastname}\\n\"\n\ncat可显示文件内容，创建文件还可以显示控制字符。\ncat [options] file1 file2...\n- -v显示控制字符\n  使用cat命令时要注意，它不会在文件分页符处停下来，它会一下显示完整个文件，如果希望每次显示一页，可以使用more。例：cat file1 file2 file3，会在屏幕上同时显示三个文件的内容，cat file1 file2 file3>file123，会把这三个文件的内容合并到一个文件file123中，cat -v dos.txt，显示这个windows下生成的文件，并显示控制字符(这些控制字符是在windows生成这个文件时加入的)。\n  管道举例：df -k|awk '{print $1}'|grep -v \"Filesystem\"。\n  tee命令把输出的一个副本输送到标准输出，另一个副本拷贝到相应的文件中。\n  tee -a files\n- 如果希望在看到输出的同时，也将其存入一个文件，那么这个命令再合适不过了，一般用于管道之后，-a参数表示追加写入files中，如果没有-a参数，则覆盖写入这个文件中。例：who | tee -a who.out。\n\n标准输入输出和错误\n在shell中执行命令时，每个进程都和三个打开的文件相联系，并使用文件描述符来引用这些文件，由于文件描述符不容易记忆，shell同时给出了相应的文件名。\n文件\t\t\t文件描述符\n输入文件-标准输入\t0(缺省是键盘，也可以是文件或其它命令的输出)\n输出文件-标准输出\t1(缺省是屏幕，也可以是文件)\n错误输出文件-标准错误\t2(缺省是屏幕，也可以是文件)\n系统中实际上有12个文件描述符，可以任意使用文件描述符3到9。\n\n文件重定向\ncommand > file\t\t把标准输出重定向到一个新文件中\ncommand >> file\t\t把标准输出重定向到一个文件中(追加)\ncommand 1 > file\t把标准输出重定向到一个文件中\ncommand > file 2>&1\t把标准输出和标准错误一起重定向到一个文件中\ncommand 2 > file\t把标准错误重定向到一个文件中\ncommand 2>> file\t把标准输出重定向到一个文件中(追加)\ncommand >> file 2>&1\t把标准输出和标准错误一起重定向到一个文件中(追加)\ncommand < file > file2\tcommand命令以file作为标准输入，file2文件作为标准输出\ncommand < file\t\tcommand命令以file作为输入\ncommand << dclimiter\t从标准输入中读入，直至遇到dclimiter分界符\ncommand < &m\t\t把文件描述符m作为标准输入\ncommand > &m\t\t把标准输出重定向到文件描述符m中\ncommand < &-\t\t关闭标准输入\n例：>nullfile，创建一个新的空文件。sort < file，把file作为输入源，排序然后输出到屏幕上。sort < name.txt > name.out。cat account_new.txt account_old.txt 1>accounts.out 2>accounts.err，account_new.txt存在，account_old.txt不存在，那么accounts.out将包含account_new.txt的内容，不会包含account_old.txt的内容，account_old.txt不存在的错误信息会写入accounts.err中。\n合并标准输出和标准错误的时候，切忌shell是从左至右分析相应的命令，例：grep \"standard\" standard.txt > grep.out 2>&1。\n\nexec命令可以用来替代当前shell；换句话说，并没有启动子shell，使用这一命令时任何现有环境都会被清除，并重新启动一个shell。\nexec command\n-其中的command通常是一个shell脚本。\n对文件描述符进行操作的时候(也只有在这时)，它不会覆盖你当前的shell。\n\n文件描述符：\n3-9文件描述符\nexec与文件描述符的结合\n例：\n#!/bin/bash\n#file_desc\nexec 3<&0 0<name.txt\nread line1\nread line2\nexec 0<&3\necho $line1\necho $line2\n\n## 第四讲 控制流结构\n```bash\nif 条件1\nthen\n\t命令1\nelif 条件2\nthen\n\t命令2\nelse\n\t命令3\nfi\n```\n例：\n\n```bash\n#!/bin/bash\n#if test\nif [ \"10\" -lt \"12\" ]\nthen\n   echo \"yes,10 is less than 12\"\nfi\n```\n\n可以使用man test获得条件的帮助。\n再例：\n\n```bash\n#!/bin/bash\n#iftest2\necho -n \"Enter your name:\"\nread NAME\nif [ \"$NAME\" == \"\" ];then\n\techo \"You did not enter your name\"\nfi\n```\n\n再例：\n\n```bash\n#!/bin/bash\n#ifcp\nif cp myfile.bak myfile;then\necho \"good copy\"\nelse echo \"basename $0:error could not copy files\" >&2\nfi\n```\n\n再例：\n\n```bash\n#!/bin/bash\n#ifelif\necho -n \"Enter your name:\"\nread NAME\nif [ -z $NAME ] || [ \"$NAME\" = \"\" ];then\n\techo \"you do not enter a name.\"\nelif [ \"$NAME\" = \"root\" ];then\n\techo \"hello root\"\nelif [ \"$NAME\" = \"chinaitlab\" ];then\n\techo \"hello chinaitlab\"\nelse\n\techo \"you are not root or chinaitlab,but hi,$NAME\"\nfi\n```\n\ncase语句格式: \n\n```bash\ncase 值 in\n模式1)\n\t命令1\n\t;;\n模式2)\n\t命令2\n\t;;\nesac\n```\n\ncase取值后面必须为单词in，每一个模式必须以右括号结束。取值可以为变量或常数，匹配发现取值符合某一模式后，其间所有命令开始执行直至;;。模式匹配符*表示任意字符,?表示任意单字符，[..]表示类或范围中任意字符。\n例：\n\n```bash\n#!/bin/bash\n#case select \necho -n \"Enter a number from 1 to 3:\"\nread ANS\ncase $ANS in\n1)\n\techo \"you select 1\"\n\t;;\n2)\n\techo \"you select 2\"\n\t;;\n3)\n\techo \"you select 3\"\n\t;;\nY|y)\n\techo \"you select $ANS\"\n\t;;\n*)\n\techo \"basename $0:This is not between 1 and 3\" >&2\n\texit;\n\t;;\nesac\n```\n\nfor循环格式：\n\n```bash\nfor 变量名 in 列表\ndo\n\t命令1\n\t命令2\ndone\n```\n\n当变量值在列表里，for循环即执行一次所有命令，使用变量名访问列表中取值。命令可为任何有效的shell命令和语句。变量名为任何单词。In列表用法是可选的，如果不用它，for循环使用命令行的位置参数。in列表可以包含替换，字符串和文件名。\n例：\n\n```bash\n#!/bin/bash\n#forlist1\nfor loop in 1 2 3 4 5\ndo\n\techo $loop\ndone\n```\n\n再例：\n\n```bash \n#!/bin/bash\n#forlist2\nfor loop in \"orange red blue grey\"\ndo\n  echo $loop\ndone\n```\n\n再例：\n```bash\n#!/bin/bash\n#forlist2\nfor loop in `cat myfile`\ndo\n  echo $loop\ndone\nuntil循环格式：\nuntil 条件\ndo\n  命令1\n  命令2\n  ...\ndone\n```\n注：条件可为任意测试条件，测试发生在循环末尾，因此循环至少执行一次。\n例：\n```bash\n#!/bin/bash\n#until_mon\n#监控分区\nPart=\"/backup\"\n#得到磁盘使用的百分比\nLOOK_OUT=`df|grep \"$Part\"|awk '{print $5}'|sed 's/%//g'`\necho $LOOK_OUT\nuntil [\"$LOOK_OUT\" gt \"90\"]\ndo\n  echo \"FileSystem /backup is nearly full\" |mail root\n  LOOK_OUT=`df|grep \"$Part\"|awk '{print $5}'|sed 's/%//g'`\n  sleep 3600\ndone\n```\n然后# nohup ./dfuntil &让这个程序在后台运行，一小时检测一次看这个分区的空间占用率是否大于90%。\n\nwhile格式：\n```bash\nwhile 命令\ndo\n  命令1\n  命令2\n  ...\ndone\n```\n注：在while和do之间虽然通常只使用一个命令，但可以放几个命令，命令通常用作测试条件。\n例：\n```bash\n#!/bin/bash\n#whileread\necho \"按住<ctrl>+D退出输入。\"\nwhile echo -n \"输入你最喜欢的电影：\";read FILM\ndo\n\techo \"Yeah.${FILM}是一部好电影！\"\ndone\n```\n再例：\n```bash\n#!/bin/bash\n#whileread\nwhile read LINE\ndo\n\techo $LINE\ndone <names.txt\n```\n把names.txt这个文件的内容按每行输出到屏幕。\nbreak与continue：\nbreak[n]\n-退出循环，如果是在一个嵌入循环里，可以指定n来跳出的循环个数。\n例：\n```bash\n#!/bin/bash\n#breakout\nwhile :\ndo\n  echo -n \"Enter any number[1..5]:\"\n  read ANS\n  case $ANS in\n  1|2|3|4|5)\n\techo \"you enter a number between 1 and 5.\"\n\t;;\n  *)\n\techo \"wrong number,bye.\"\n\tbreak\n\t;;\n  esac\ndone\n```\n再例：\n```bash\n#!/bin/bash\n#breakout\nwhile :\ndo\n  echo -n \"Enter any number[1..5]:\"\n  read ANS\n  case $ANS in\n  1|2|3|4|5)\n\techo \"you enter a number between 1 and 5.\"\n\t;;\n  *)\n\techo -n \"wrong number,continue(y/n)?:\"\n\tread IS_CONTINUE\n\tcase $IS_CONTINUE in\n\t\ty|yes|Y|YES)\n\t\t\tcontinue\n\t\t\t;;\n\t\t*)\n\t\t\tbreak\n\t\t\t;;\n\tesac\n  esac\ndone\n```\n## 第五讲\n\n正则表达式：一种用来描述文本模式的特殊语法，由普通字符(a到z)以及特殊字符(称为元字符，如/,*,?等)\n匹配的字符串\n文本过滤工具在某种模式下都支持正则表达式\n基本元字符集及含义\n字符\t含义\n^\t只匹配行首\n$\t只匹配行尾\n\n*\t匹配0个或多个此单字符\n  ]\t只匹配[]内字符，可以是一个单字符，也可以是字符序列。可以使用-表示[]内字符序列范围，如用[1-5]代替[12345]。\n  \t只用来屏蔽一个元字符的特殊含义\n  \t只匹配任意单字符\n  attern\\{n\\}\t只用来匹配前面pattern出现次数。n为次数\n  attern\\{n,\\}\t含义同上，但次数最少为n\n  attern\\{n,m\\}\t含义同上，但pattern出现次数在n与m之间。\n    例：\n    ^d\n  rwxrwxrw-\t匹配\n  rw-rw-rw\t不匹配\n    ^...1\n  482XC56D\t不匹配\n  442XW7134\t不匹配\n  451ABC123\t匹配\n  D11XC9871\t匹配\n    trouble$--匹配以单词trouble结尾的所有字符\n    ^$--匹配空行\n    ^.$--匹配包含一个字符的行\n    用\\屏蔽一个特殊字符，特殊字符有\",',||,^,*,.,+等，\\*\\.pas正则表达式中匹配以*.pas结尾的所有字符或文件。\n\n逗号将括弧内要匹配的不同字符串分开，用-表示一个字符串范围\n[0123456789]或[0-9]：任意一个数字\n[a-z]：任意小写字母\n[A-Z a-z]：任意大小写字母\n[A-Z a-z 0-9]：任意字母或数字\n[S,s]：匹配大小写s\n\nA\\{2\\}B：A出现2次：AAB\nA\\{4,\\}B：A最少出现4次，AAAAB，AAAAAB...\nA\\{2,4\\}B：A出现次数范围2-4次，AAB，AAAB，AAAAB\n[0-9]\\{3\\}\\.[0-9]\\{3\\}\\.[0-9]\\{3\\}\\.[0-9]\\{3\\}：匹配IP地址\n\nfind命令形式\nfind pathname -option [-print -exec -ok]\n-pathname查找路径，例如用.来表示当前目录，用/表示系统根目录。-print，find命令将匹配的文件输出到标准输出。-exec，find命令对匹配的文件执行该参数所给出的shell命令，相应命令的形式为'command'{} \\;'，注意{}和\\；之间的空格。-ok和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前都会给出提示，让用户来确定是否执行。\nfind命令的一般形式：\n-name按照文件名找文件\n-perm按照文件权限来找文件\n-user按照文件属主来找文件\n-group按照文件所属的组来找文件\n-mtime -n +n按照文件的更改时间来查找文件。-n表示文件更改时间距现在n天以内，+n表示文件更改时间距现在n天以前。find命令还有-atime和-ctime选项，但他们都和-mtime选项相似\n-size n[c]查找文件长度为n块的文件，带有c时表示文件长度以字节计。\n-nogroup查找无有效所属组的文件，即该文件所属的组在/etc/groups中不存在。\n-nouser查找无有效属主的文件，即该文件的属主在/etc/passwd中不存在。\n-newer file1 ! -newer file2查找更改时间比文件file1新但比文件file2旧的文件。\n-type查找某一类的文件，比如：b块设备文件，d目录，c字符设备文件，p管道文件，l符号链接文件，f普通文件。\n\n举例：\n-name：可以使用某种文件名模式来匹配文件，记住要用引号将文件名模式引起来，例：\nfind -name \"*.txt\" -print，没有路径表示查找当前路径。find ./ -name \"*.txt\" -print。find ./ -name \"[A-Z]*\" -print，find /etc -name \"host*\" -print。\n-perm：find . -perm 755 -print。\n-user和-nouser：find `pwd` -user root -print。find `pwd` -nouser -print。\n-group和-nogroup：find ./ -group itlab -print，find / -nogroup -print。\n-mtime：find /var -mtime -5 -print，find /var -mtime +3 -print。\n-newer：find `pwd` -newer \"myfile\" ! -newer \"myfile123\" -print。\n-type：find /etc -type d -print。\n-size：find . -size +1000000c -print查找文件大小大于1000000字节的文件，find . -size +10 -print，查找大小大于10块的文件。\n-depth：使用find命令时，可能希望先匹配所有的文件，再在子目录中查找，find / -name \"con.file\" -depth -print。\n-exec或ok：find . -type f -exec ls -l {} \\;\nfind . -name \"*.log\" -mtime +5 -ok rm{} \\;\n-xargs:在使用find命令的-exec选项处理匹配到的文件时，find命令将所有匹配到的文件一起传递给exec，不幸的是有些系统对能够传递给exec的命令长度有限制，这样在find命令运行几分钟后就会出现溢出错误。错误信息通常是“参数列太长”或“参数列溢出”，这就是xargs命令的用处所在，特别是与find命令一起使用。exec会发起多个进程，而xargs不会多个，只有一个。例：find ./ -perm -7 -print | xargs chmod o-w，\nfind ./ -type f -print | xargs file。\n\ngrep介绍\n对文本文件进行模式查找，grep有三种变形\n-Grep：标准grep命令\n-Egrep：扩展grep，支持基本及扩展的正则表达式\n-Fgrep：快速grep\ngrep一般格式为：\n-grep[选项]基本正则表达式[文件]\n-字符串参数(基本正则表达式)最好采用双引号，一是以防被误解为shell命令，二是可以用来查找多个单词组成的字符串。\ngrep命令选项：\n-c：只输出匹配行的计数\n-i：不区分大小写(只适用于单字符)\n-h：查询多文件时不显示文件名\n-H：显示文件名\n-l：查询多文件时只输出包含匹配字符的文件名\n-n：显示匹配行及行号\n-s：不显示不存在或无匹配文本的错误信息\n-v：显示不包含匹配文本的所有行\n例：\ngrep \"jenny\" *.txt\ngrep \"sort it\" *\ngrep -c \"2004\" myfile\ngrep -n \"2004\" myfile\ngrep -i \"Jul\" myfile\ngrep -v \"2004:22\" myfile\ngrep \"2004:22:5[0-9]\" myfile\ngrep \"^[^210]\" myfile，查找行首不是2或1或0的行。\ngrep \"[5-8][6-9][0-2]\" myfile\ngrep \"4\\{2\\}\" myfile\ngrep \"4\\{2,\\}\" myfile\ngrep \"4\\{2,4\\}\" myfile\ngrep \"^$\" myfile\ngrep \"\\?\" myfile\ngrep \"^d\" myfile\ngrep \"^[^d]\" myfile\n\ngrep命令类名类等价的正则表达式\n[[:upper:]][A-Z]\n[[:alnum:]][0-9a-zA-Z]\n[[:lower:]][a-z]\n[[:space:]]\t空格或tab键\n[[:digit:]][0-9]\n[[:alpha:]][a-zA-Z]\n例：grep \"5[[:digit:]][[:digit:]]\" myfile\n\nawk介绍\n可从文件或字符串中基于指定规则浏览和抽取信息，是一种自解释的编程语言，三种方式调用awk：\n-命令行方式：\n\tawk [-F field-spearator]'command' input-files，field-spearator默认是空格。\n-awk脚本\n\t所有awk命令插入一个文件，并使awk程序可执行，然后用awk命令解释器作为脚本的首行，以便通过键入脚本名称来调用它。\n-awk命令插入一个单独文件\n\tawk -f awk-script-file input-files\n\nawk脚本由各种操作和模式组成\n模式和动作：\n    -模式部分决定动作语句何时出发及出发事件。(BEGIN,END)\n    -动作对数据进行处理，放在大括号{}内指明。(input)\n分隔符，域和记录：\n    -awk执行时，其浏览域标记为$1,$2...$n。这种方法称为域标识。$0为所有域，即这条记录。\n    -注意执行时不要混淆符号$和shell提示符$，他们是不同的。\n例：awk '{print $0}' score.txt | tee score.out。\nawk -F . '{print $0}' score.txt |tee score.out。\nawk '{print $1 \"\\t\"$4}' score.txt。\nawk 'BEGIN {print \"Name Maths\\n------\"} {print $1\"\\t\"$4} END {print \"end-of-report\"}' score.txt。\n\nawk中的特殊元字符：+和？，+表示匹配任意字符，？表示匹配单个字符。\n匹配操作符：~(表示匹配),!~(表示不匹配)，要匹配的内容放在两个\\之间。\ncat score.txt|awk '$0 ~/218.79.131.96/'。\nawk '$0 !~/218.79.131.96/' score.txt。\nawk '{if($1==\"218.79.131.96\") print $0}' score.txt。\n\nsed介绍\nsed不与初始化文件打交道，它操作的只是一个拷贝，然后所有的改动如果没有重定向到一个文件，将输出到屏幕。sed是一种重要的文本过滤工具，使用一行命令或使用管道与grep与awk相结合。非交互性文本流编辑。调用sed有三种方式：\n-使用sed命令行格式\n   sed [选项] sed命令 输入文件\n-使用sed脚本文件，格式为：\n   sed [选贤] -f sed脚本文件 输入文件\n-sed脚本文件[选项] 输入文件\n-不管是使用shell命令行方式或脚本文件方式，如果没有指定输入文件，sed从标准输入中接受输入，一般是键盘或重定向结果。\nsed命令选项：\n-n不打印\n-c下一命令是编辑命令\n-f如果正在调用sed脚本文件\n\nsed在文件中查找文本的方式\n-使用行号，可以是一个简单数字或是一个行号范围\n-使用正则表达式\nx\t\t\tx为一行号\nx,y\t\t\t表示行号范围从x到y\n/pattern/\t\t查询包含模式的行\n/pattern/pattern/\t查询包含两个模式的行\npattern/,x\t\t在给定的行号上查询包含模式的行\nx,/pattern/\t\t通过行号和模式查询匹配行\nx,y!\t\t\t查询不包含指定行号x和y的行 \n基本sed编辑命令：\np\t打印匹配行\n=\t显示文件行号\na\\\t在定位行号后附加新文本信息\ni\\\t在定位行号后插入新文本信息\nd\t删除定位行\nc\\\t用新文本替换定位文本\ns\t使用替换模式替换相应模式\nr\t从另一个文件中读文本\nw\t写文本到一个文件\nq\t第一个模式匹配完成后退出或立即退出\nl\t显示与八进制ASCII代码等价的控制字符\n{}\t在定位行执行的命令组\nn\t从另一个文件中读文本下一行，并附加在下一行\ng\t将模式2粘贴到/pattern n/\ny\t传送字符\n\n例：\nsed '2p' score.txt，单引号中的是命令，打印score.txt这个文件的第二行，这里全部打印，因为没有加-n，这样匹配到的和没匹配到的都打印。\nsed -n '2p' score.txt，-n表示不打印没匹配到的，只打印第二行。\nsed -n '1,4p' score.txt，打印1~4行。\nsed -n '/los/p' myfile.txt，打印包含los字符的所有行。\nsed -n '4,/los/p' myfile.txt，从第四行开始匹配到第一个los结束，如果los在第六行，那么从第四行到第六行都打印，如果下面还有los也不打印了。\nsed -n '/^$/=' myfile.txt，显示空行的行号。\nsed -n -e '/^$/p' -e '/^$/=' myfile，打印空白行打印行号。\nsed -n '/chinaitlab/a\\shenzhen' myfile.txt。\nsed -n '/chinaitlab/i\\shenzhen' myfile.txt。\nsed -n '/chinaitlab/c\\chinaitlab shenzhen' myfile.txt。\nsed '1,2d' myfile.txt，把第一第二行删除。\nsed 's/chinaitlab/chinaitlab shenzhen/g' myfile.txt，当有多个chinaitlab时，加g表示全部替换。\nsed -n 's/chinaitlab/& hello/p' myfile.txt， 在匹配到的所有的chinaitlab的后面加 hello。\nsed -n 's/chinaitlab/hello &/p' myfile.txt，在匹配到的所有的chinaitlab的前面加 hello。\nsed 'lr ctrl.txt' myfile.txt。\nsed 'china/q' myfile.txt。\nsed -n '/china/l' myfile.txt。\n\n合并与分割\nsort[options] files\n-许多不同的域按不同的列顺序分类\n-c测试文件是否已经分类\n-m合并两个分类文件\n-u删除所有复制行\n-o存储sort结果的输出文件名\n-t域分隔符：用非空格或tab键分割域\n+n n为域号，使用此域号开始分类\nn指定分类是域上的数字分类项\n-r比较求逆\n\n例：\nsort -c myfile，检查这个文件是否已经排序。\nsort -u myfile，\n\n\n\n\n\n## 第六讲shell函数\n\n定义函数格式：\n函数名()\n{\n命令1\n...\n}\nfunction 函数名()\n{\n...\n}\n函数可以放在同一个文件中作为一段代码，也可以放在只包含函数的单独文件中。\n#!/bin/bash\n#hellofun\nfunction hello()\n{\necho \"hello,today is `date`\"\nreturn 0\n}\necho \"now going to the function hello\"\nhello\necho \"back from the function\"\n\n参数传递：向函数传递参数就像在脚本中使用位置变量$1,$2...$9\n例：\n#!/bin/bash\n#func\nfunction hello()\n{\necho \"Hello,$1 today is `date`\"\n}\necho \"now going to the function hello\"\nhello chinaitlab\necho \"back from the function\"\n\n函数文件\n#!/bin/bash\n#func\n#source function\n. hellofun\necho \"now going to the function hello\"\nhello\necho \"back from the function\"\n\n#!/bin/bash\n#hellofun\nfunction hello()\n{\necho \"Hello, today is `date`\"\nreturn 0\n}\n\n检查载入函数和删除函数\n察看载入函数set\n删除函数unset\n例：\n#!/bin/bash\n#func\n#source function\n. hellofun\nset #察看加载的函数和变量信息\necho \"now going to the function hello\"\nunset hello#删除这个函数\nhello\necho \"back from the function\"\n\n函数返回值：\n#!/bin/bash\n#hellofun\nfunction hello()\n{\necho \"Hello, today is `date`\"\nreturn 0\n}\n#!/bin/bash\n#func\necho \"now going to the function hello\"\nhello\necho $?\necho \"back from the function\"\n\n## 第七讲脚本参数传递\n\nshift命令,每次讲参数位置向左偏移n位。\n#!/bin/bash\n#opt2\nusage()\n{\necho \"usage:`basename $0` filenames\"\n}\ntotalline=0\nif[ $# -lt 2 ];then\n\tusage\n\texit#退出系统，下面的代码不执行\nfi\nwhile [ $# -ne 0]#参数个数不等于0\ndo\nline=`cat $1|wc -l`\necho \"$1:${line}\"\ntotalline=$[$totalline+$line]\nshift#调用shift时$#(参数个数)也跟着减1\ndone\necho \"-----------\"\necho \"total:${totalline}\"\n\ngetopts获得多个命令行参数\n#!/bin/bash\nALL=false\nHELP=false\nFILE=false\nVERBOSE=false\nwhile getopts ahfvc OPTION\ndo\n\tcase $OPTION in\n\ta)\n\t\tALL=true\n\t\techo \"ALL IS $ALL\"\n\t\t;;\n\th)\n\t\tHELP=true\n\t\techo \"HELP is $HELP\"\n\t\t;;\n\tf)\n\t\tFILE=true\n\t\techo \"FILE is $FILE\"\n\t\t;;\n\tv)\n\t\tVERBOSE=true\n\t\techo \"VERBOSE is $VERBOSE\"\n\t\t;;\n\tc)\n\t\techo \"c value is $c\"\n\t\t;;\n\t\\?)\n\t\techo \"`basename $0` -[a h f v] -[c value] file \"\n\t\t;;\n\tesac\ndone","slug":"Linux-Shell-jichu","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7q8khr0008l8lr41vmctkr","content":"<h2 id=\"第一讲\"><a href=\"#第一讲\" class=\"headerlink\" title=\"第一讲\"></a>第一讲</h2><p>zh_CN.GB18030<br><code>cat /etc/shells</code> 可以查看系统的 shell 种类。<code>echo $SHELL</code> 查看当前使用的shell。在当前shell中运行其它shell，例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /bin/csh ls -lh。 </span></span><br><span class=\"line\">chomod u=rwx,g+w,o+r file </span><br><span class=\"line\">chown -R jack /etc/<span class=\"built_in\">test</span>/ <span class=\"comment\">#把这个目录下所有的子目录和文件的拥有者都改变成jack</span></span><br></pre></td></tr></table></figure>\n<p>把这个目录下所有的子目录和文件的拥有者都改变成jack。</p>\n<p><code>chown jack.jack /etc/test/ -R</code><br>umask   文件   目录<br>0    6    7<br>1    5    6<br>2    4    5<br>3    3    4<br>4    2    3<br>5    1    2<br>6    0    1<br>7    0    0<br>/etc/profile 文件中可以设定 umask 值。</p>\n<p><code>alias ll=&#39;ls -alh&#39;</code></p>\n<p><code>cat $HOME/.bashrc</code> , 别名都放在这个文件中。</p>\n<p>命令替换：<code>ls \\</code>cat myfile` -al`，这个反引号就是1左边的键，把myfile的内容输出到ls的输入。<br>后台运行：# nohup tar -czf abc.tar.gz /etc/abc/ &amp;。jobs -l查看后台运行情况。<br>模式匹配：ls *.txt -l。</p>\n<h2 id=\"第二讲\"><a href=\"#第二讲\" class=\"headerlink\" title=\"第二讲\"></a>第二讲</h2><p>本地变量在用户现在的shell生命期的脚本中使用，例在当前shell中设置变量，ABC=123，然后exit退出当前shell，再进入系统用set指令(显示本地变量)发现ABC变量无。readonly ABC，把ABC设置成只读变量。只是用readonly指令显示当前shell中有哪些只读变量。</p>\n<p>环境变量用于所有用户进程（经常称为子进程）。登录进程称为父进程，shell中执行的用户进程均称为子进程。不像本地变量(只用于现在的shell)环境变量可用于所有子进程，这包括编辑器，脚本和应用。<br>$HOME/.bash_profile(/etc/profile)<br>export，例：export ABC=”shell program”，把ABC这个变量变成环境变量。直接输入export也可以查看环境变量有哪些。readonly ABC，把环境变量ABC变成只读的。</p>\n<p>变量替换：<br>${var name}    显示实际值到var name<br>${var name:+value}    如果设置了var name，则显示其值value，否则为空<br>${var name:?value}    如果未设置var name，显示用户定义错误信息value<br>${var name:-value}    如果未设置var name，显示其值value，如果设置了var name则显示var name的值<br>${var name:=value}    如果未设置var name，设置其值并显示，如果设置了var name则显示var name的值<br>env<br>unset ABC，删除ABC变量，但是用readonly声明的变量是不能被unset的。</p>\n<p>位置变量：先看下面的脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#parms</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"program name is <span class=\"variable\">$0</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"1 parm is <span class=\"variable\">$1</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"2 parm is <span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"3 parm is <span class=\"variable\">$3</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"4 parm is <span class=\"variable\">$4</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>然后运行这个脚本：./parms a b c d，就会显示结果,$0表示脚本名称，$1-9分别表示位置变量名，在运行脚本时代入脚本中。<br>再例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#parm.sh</span></span><br><span class=\"line\">find /home/chinaitlab/shell -name <span class=\"variable\">$1</span> -<span class=\"built_in\">print</span></span><br></pre></td></tr></table></figure>\n<p>然后运行这个脚本: <code>./parm.sh abc.txt</code> 。</p>\n<p>标准变量：bash 默认建立了一些标准环境变量，可在 /etc/profile 中定义。<br> EXINIT，运行 vi 时初始化设置一些参数<br>HOME<br>IFS<br>LOGNAME<br>MAIL<br>MAILCHECK<br>MAILPATH<br>PATH<br>PS1<br>PS2<br>SHELL<br>TERMINFO<br>TERM<br>TZ<br>EDITOR<br>PWD<br>MANPATH</p>\n<p>特殊变量：<br>$#(传递到脚本的参数个数)<br>$*(以一个单字符串显示所有向脚本传递的参数。与位置变量不同，此选项参数可超过9个)<br>$$(脚本运行的当前进程ID号)<br>$!(后台运行的最后一个进程的进程ID号)<br>$@(与$#相同，但是使用时加引号，并在引号中返回每个参数)<br>$-(显示shell使用的当前选项，与set命令功能相同)<br>$?(显示最后命令的推出状态。0表示没有错误，其它任何值表明有错误)</p>\n<p>影响变量的命令：<br>declare<br>-设置或显示变量<br>-f 只显示函数名<br>-r 创建只读变量(declare和typeset)<br>-x 创建转出变量<br>-i 创建整数变量</p>\n<ul>\n<li>使用+替代-，可以颠倒选项的含义<br>export<br>-用于创建传给予shell的变量(环境变量)</li>\n<li>–表明选项结束，所有后续参数都是实参</li>\n<li>-f表明在”名-值”对中的名字是函数名</li>\n<li>-n把全局变量转换成局部变量，换句话说，命令的变量不再传给shell</li>\n<li>-p显示全局变量列表<br>unset</li>\n<li>用于取消变量的定义</li>\n<li>–表明选项结束</li>\n<li>-f删除只读变量，但不能取消从shell环境中删除指定的变量和函数如：PATH，PS1，PS2，PPID，UID，EUID等的设置。<br>shift[n]</li>\n<li>用于移动位置变量，调整位置变量，使$3的值赋予$2,$2的值赋予$1。<br>typeset<br>-用于显示或设置变量<br>-是declare的同义词</li>\n</ul>\n<p>引号：<br>使用双引号可以引用除字符$,<code>(反引号),\\外的任意字符或字符串。例：echo -e &quot;ert, $SHELL&#39;\\n* china</code>echo itlab<code>&quot;。\n单引号会忽略其中所有的特殊含义的字符，例：echo &#39;ert, $SHELL * china</code>echo itlab`’。<br>反引号用于设置系统命令的输出到变量，shell将反引号中的内容作为一个系统命令，并执行其内容。<br>反斜杠：如果一个字符有特殊含义，反斜杠防止shell误解其含义，即屏蔽其特殊含义，这些字符有特殊含义： $,<em>,+,&amp;,”,|,?,^例：echo </em>，显示当前目录下的所有文件名，echo *，则显示*。</p>\n<p>运算符类型：<br>按位运算符    ~,&lt;&lt;,&gt;&gt;,&amp;,|,^<br>运算符        说明<br>~op1        反运算符，把op1中所有的二进制为1变为0，0变为1<br>op1&lt;<op2 左移运算符，把op1中的二进制位向左移动op2位，忽略最左端移出的各位，最右端的各位补0值，每做一次按位左移就有实现op1乘以2。=\"\" op1=\"\">&gt;op2    右移运算符，把op1中的二进制位向右移动op2位，忽略最右端移出的各位，最左端的各位补0值，每做一次按位右移就有实现op1除以2。<br>op1&amp;op2        与比较运算符，op1和op2对应位，对于每个二进制位来说，如果二者该位都是1，则结果为1，否则为0。<br>op1^op2        异或运算符，op1和op2对应位，对于每个二进制位来说，如果二者该位互补，则结果为1否则为0。<br>op1|op2        或运算符。<br>$[]表示形式告诉shell对方括号中的表达式求值，例：echo $[2+8]，echo $[2&gt;&gt;8]，echo $[2&lt;&lt;4]，echo $[2^4]，echo $[~3]。<br>逻辑运算符：&amp;&amp;,||,&gt;,==,&lt;,!=例：echo $[2&amp;&amp;2]，echo $[1||0]。<br>赋值运算符：=,+=,-=,*=,/=,%=,&amp;=,^=,|=,&lt;&lt;=,&gt;&gt;=<br>let $count=$count+$change<br>let $count+=$change<br>$[]可以接受不同基数的数字</op2></p>\n<ul>\n<li>[ base#n ] n表示基数从2到36的任何基数，例：echo $[10#8+1]，8进制的10加上1，结果为9。</li>\n</ul>\n<h2 id=\"第三讲\"><a href=\"#第三讲\" class=\"headerlink\" title=\"第三讲\"></a>第三讲</h2><p>echo [option] string</p>\n<ul>\n<li>e解析转义字符</li>\n<li>-n回车不换行，linux系统默认回车换行，例：echo “hello”和echo -n “hello”的区别。</li>\n<li>string中的转义符(\\c,\\f,\\t,\\n)，\\c表示回车不换行，\\f表示禁止，\\t表示跳格(tab)，\\n表示回车换行<br>例：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#echod</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"This echo's 3 new lines\\n\\n\\n\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"OK\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"This echo's 3 new lines\\n\\n\\n\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"The log files have all been done\"</span>&gt;mylogfile.txt</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>read语句可以从键盘或文件的某一行文本中读入信息，并将其赋给一个变量。<br>read var1 var2…<br>-如果只指定了一个变量，那么read将会把所有的输入赋给该变量，直至遇到第一个文件结束符或回车；如果给出了多个变量，他们按顺序分别被赋予不同的变量。shell将用空格作为变量之间的分隔符。<br>例：</p>\n<p>#!/bin/bash</p>\n<p>#readname<br>echo -n “First name:”<br>read firstname<br>echo -n “Last name:”<br>read lastname<br>echo -e “Your First Name is :${firstname}\\n”<br>echo -e “Your Last Name is :${lastname}\\n”</p>\n<p>cat可显示文件内容，创建文件还可以显示控制字符。<br>cat [options] file1 file2…</p>\n<ul>\n<li>-v显示控制字符<br>使用cat命令时要注意，它不会在文件分页符处停下来，它会一下显示完整个文件，如果希望每次显示一页，可以使用more。例：cat file1 file2 file3，会在屏幕上同时显示三个文件的内容，cat file1 file2 file3&gt;file123，会把这三个文件的内容合并到一个文件file123中，cat -v dos.txt，显示这个windows下生成的文件，并显示控制字符(这些控制字符是在windows生成这个文件时加入的)。<br>管道举例：df -k|awk ‘{print $1}’|grep -v “Filesystem”。<br>tee命令把输出的一个副本输送到标准输出，另一个副本拷贝到相应的文件中。<br>tee -a files</li>\n<li>如果希望在看到输出的同时，也将其存入一个文件，那么这个命令再合适不过了，一般用于管道之后，-a参数表示追加写入files中，如果没有-a参数，则覆盖写入这个文件中。例：who | tee -a who.out。</li>\n</ul>\n<p>标准输入输出和错误<br>在shell中执行命令时，每个进程都和三个打开的文件相联系，并使用文件描述符来引用这些文件，由于文件描述符不容易记忆，shell同时给出了相应的文件名。<br>文件            文件描述符<br>输入文件-标准输入    0(缺省是键盘，也可以是文件或其它命令的输出)<br>输出文件-标准输出    1(缺省是屏幕，也可以是文件)<br>错误输出文件-标准错误    2(缺省是屏幕，也可以是文件)<br>系统中实际上有12个文件描述符，可以任意使用文件描述符3到9。</p>\n<p>文件重定向<br>command &gt; file        把标准输出重定向到一个新文件中<br>command &gt;&gt; file        把标准输出重定向到一个文件中(追加)<br>command 1 &gt; file    把标准输出重定向到一个文件中<br>command &gt; file 2&gt;&amp;1    把标准输出和标准错误一起重定向到一个文件中<br>command 2 &gt; file    把标准错误重定向到一个文件中<br>command 2&gt;&gt; file    把标准输出重定向到一个文件中(追加)<br>command &gt;&gt; file 2&gt;&amp;1    把标准输出和标准错误一起重定向到一个文件中(追加)<br>command &lt; file &gt; file2    command命令以file作为标准输入，file2文件作为标准输出<br>command &lt; file        command命令以file作为输入<br>command &lt;&lt; dclimiter    从标准输入中读入，直至遇到dclimiter分界符<br>command &lt; &amp;m        把文件描述符m作为标准输入<br>command &gt; &amp;m        把标准输出重定向到文件描述符m中<br>command &lt; &amp;-        关闭标准输入<br>例：&gt;nullfile，创建一个新的空文件。sort &lt; file，把file作为输入源，排序然后输出到屏幕上。sort &lt; name.txt &gt; name.out。cat account_new.txt account_old.txt 1&gt;accounts.out 2&gt;accounts.err，account_new.txt存在，account_old.txt不存在，那么accounts.out将包含account_new.txt的内容，不会包含account_old.txt的内容，account_old.txt不存在的错误信息会写入accounts.err中。<br>合并标准输出和标准错误的时候，切忌shell是从左至右分析相应的命令，例：grep “standard” standard.txt &gt; grep.out 2&gt;&amp;1。</p>\n<p>exec命令可以用来替代当前shell；换句话说，并没有启动子shell，使用这一命令时任何现有环境都会被清除，并重新启动一个shell。<br>exec command<br>-其中的command通常是一个shell脚本。<br>对文件描述符进行操作的时候(也只有在这时)，它不会覆盖你当前的shell。</p>\n<p>文件描述符：<br>3-9文件描述符<br>exec与文件描述符的结合<br>例：</p>\n<p>#!/bin/bash</p>\n<p>#file_desc<br>exec 3&lt;&amp;0 0&lt;name.txt<br>read line1<br>read line2<br>exec 0&lt;&amp;3<br>echo $line1<br>echo $line2</p>\n<h2 id=\"第四讲-控制流结构\"><a href=\"#第四讲-控制流结构\" class=\"headerlink\" title=\"第四讲 控制流结构\"></a>第四讲 控制流结构</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件1</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">\t命令1</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 条件2</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">\t命令2</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\t命令3</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#if test</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"10\"</span> -lt <span class=\"string\">\"12\"</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"yes,10 is less than 12\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>可以使用man test获得条件的帮助。<br>再例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#iftest2</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">\"Enter your name:\"</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> NAME</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$NAME</span>\"</span> == <span class=\"string\">\"\"</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"You did not enter your name\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>再例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#ifcp</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> cp myfile.bak myfile;<span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"good copy\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"built_in\">echo</span> <span class=\"string\">\"basename <span class=\"variable\">$0</span>:error could not copy files\"</span> &gt;&amp;2</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>再例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#ifelif</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">\"Enter your name:\"</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> NAME</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"variable\">$NAME</span> ] || [ <span class=\"string\">\"<span class=\"variable\">$NAME</span>\"</span> = <span class=\"string\">\"\"</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"you do not enter a name.\"</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"string\">\"<span class=\"variable\">$NAME</span>\"</span> = <span class=\"string\">\"root\"</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"hello root\"</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"string\">\"<span class=\"variable\">$NAME</span>\"</span> = <span class=\"string\">\"chinaitlab\"</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"hello chinaitlab\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"you are not root or chinaitlab,but hi,<span class=\"variable\">$NAME</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>case语句格式: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> 值 <span class=\"keyword\">in</span></span><br><span class=\"line\">模式1)</span><br><span class=\"line\">\t命令1</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">模式2)</span><br><span class=\"line\">\t命令2</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n<p>case取值后面必须为单词in，每一个模式必须以右括号结束。取值可以为变量或常数，匹配发现取值符合某一模式后，其间所有命令开始执行直至;;。模式匹配符*表示任意字符,?表示任意单字符，[..]表示类或范围中任意字符。<br>例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#case select </span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">\"Enter a number from 1 to 3:\"</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> ANS</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$ANS</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">1)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"you select 1\"</span></span><br><span class=\"line\">\t;;</span><br><span class=\"line\">2)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"you select 2\"</span></span><br><span class=\"line\">\t;;</span><br><span class=\"line\">3)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"you select 3\"</span></span><br><span class=\"line\">\t;;</span><br><span class=\"line\">Y|y)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"you select <span class=\"variable\">$ANS</span>\"</span></span><br><span class=\"line\">\t;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"basename <span class=\"variable\">$0</span>:This is not between 1 and 3\"</span> &gt;&amp;2</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n<p>for循环格式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> 变量名 <span class=\"keyword\">in</span> 列表</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t命令1</span><br><span class=\"line\">\t命令2</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>当变量值在列表里，for循环即执行一次所有命令，使用变量名访问列表中取值。命令可为任何有效的shell命令和语句。变量名为任何单词。In列表用法是可选的，如果不用它，for循环使用命令行的位置参数。in列表可以包含替换，字符串和文件名。<br>例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#forlist1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> loop <span class=\"keyword\">in</span> 1 2 3 4 5</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$loop</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>再例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#forlist2</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> loop <span class=\"keyword\">in</span> <span class=\"string\">\"orange red blue grey\"</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$loop</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>再例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#forlist2</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> loop <span class=\"keyword\">in</span> `cat myfile`</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$loop</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">until循环格式：</span><br><span class=\"line\">until 条件</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  命令1</span><br><span class=\"line\">  命令2</span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>注：条件可为任意测试条件，测试发生在循环末尾，因此循环至少执行一次。<br>例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#until_mon</span></span><br><span class=\"line\"><span class=\"comment\">#监控分区</span></span><br><span class=\"line\">Part=<span class=\"string\">\"/backup\"</span></span><br><span class=\"line\"><span class=\"comment\">#得到磁盘使用的百分比</span></span><br><span class=\"line\">LOOK_OUT=`df|grep <span class=\"string\">\"<span class=\"variable\">$Part</span>\"</span>|awk <span class=\"string\">'&#123;print $5&#125;'</span>|sed <span class=\"string\">'s/%//g'</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$LOOK_OUT</span></span><br><span class=\"line\">until [<span class=\"string\">\"<span class=\"variable\">$LOOK_OUT</span>\"</span> gt <span class=\"string\">\"90\"</span>]</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"FileSystem /backup is nearly full\"</span> |mail root</span><br><span class=\"line\">  LOOK_OUT=`df|grep <span class=\"string\">\"<span class=\"variable\">$Part</span>\"</span>|awk <span class=\"string\">'&#123;print $5&#125;'</span>|sed <span class=\"string\">'s/%//g'</span>`</span><br><span class=\"line\">  sleep 3600</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>然后# nohup ./dfuntil &amp;让这个程序在后台运行，一小时检测一次看这个分区的空间占用率是否大于90%。</p>\n<p>while格式：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> 命令</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  命令1</span><br><span class=\"line\">  命令2</span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>注：在while和do之间虽然通常只使用一个命令，但可以放几个命令，命令通常用作测试条件。<br>例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#whileread</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"按住&lt;ctrl&gt;+D退出输入。\"</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">echo</span> -n <span class=\"string\">\"输入你最喜欢的电影：\"</span>;<span class=\"built_in\">read</span> FILM</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"Yeah.<span class=\"variable\">$&#123;FILM&#125;</span>是一部好电影！\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>再例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#whileread</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> LINE</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$LINE</span></span><br><span class=\"line\"><span class=\"keyword\">done</span> &lt;names.txt</span><br></pre></td></tr></table></figure></p>\n<p>把names.txt这个文件的内容按每行输出到屏幕。<br>break与continue：<br>break[n]<br>-退出循环，如果是在一个嵌入循环里，可以指定n来跳出的循环个数。<br>例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#breakout</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> :</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"Enter any number[1..5]:\"</span></span><br><span class=\"line\">  <span class=\"built_in\">read</span> ANS</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"variable\">$ANS</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  1|2|3|4|5)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"you enter a number between 1 and 5.\"</span></span><br><span class=\"line\">\t;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"wrong number,bye.\"</span></span><br><span class=\"line\">\t<span class=\"built_in\">break</span></span><br><span class=\"line\">\t;;</span><br><span class=\"line\">  <span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>再例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#breakout</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> :</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"Enter any number[1..5]:\"</span></span><br><span class=\"line\">  <span class=\"built_in\">read</span> ANS</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"variable\">$ANS</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  1|2|3|4|5)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"you enter a number between 1 and 5.\"</span></span><br><span class=\"line\">\t;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> -n <span class=\"string\">\"wrong number,continue(y/n)?:\"</span></span><br><span class=\"line\">\t<span class=\"built_in\">read</span> IS_CONTINUE</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"variable\">$IS_CONTINUE</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t\ty|yes|Y|YES)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">continue</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t*)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">break</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t<span class=\"keyword\">esac</span></span><br><span class=\"line\">  <span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第五讲\"><a href=\"#第五讲\" class=\"headerlink\" title=\"第五讲\"></a>第五讲</h2><p>正则表达式：一种用来描述文本模式的特殊语法，由普通字符(a到z)以及特殊字符(称为元字符，如/,*,?等)<br>匹配的字符串<br>文本过滤工具在某种模式下都支持正则表达式<br>基本元字符集及含义<br>字符    含义<br>^    只匹配行首<br>$    只匹配行尾</p>\n<ul>\n<li>匹配0个或多个此单字符<br>]    只匹配[]内字符，可以是一个单字符，也可以是字符序列。可以使用-表示[]内字符序列范围，如用[1-5]代替[12345]。<br> 只用来屏蔽一个元字符的特殊含义<br> 只匹配任意单字符<br>attern{n}    只用来匹配前面pattern出现次数。n为次数<br>attern{n,}    含义同上，但次数最少为n<br>attern{n,m}    含义同上，但pattern出现次数在n与m之间。<br>例：<br>^d<br>rwxrwxrw-    匹配<br>rw-rw-rw    不匹配<br>^…1<br>482XC56D    不匹配<br>442XW7134    不匹配<br>451ABC123    匹配<br>D11XC9871    匹配<br>trouble$–匹配以单词trouble结尾的所有字符<br>^$–匹配空行<br>^.$–匹配包含一个字符的行<br>用\\屏蔽一个特殊字符，特殊字符有”,’,||,^,<em>,.,+等，\\</em>.pas正则表达式中匹配以*.pas结尾的所有字符或文件。</li>\n</ul>\n<p>逗号将括弧内要匹配的不同字符串分开，用-表示一个字符串范围<br>[0123456789]或[0-9]：任意一个数字<br>[a-z]：任意小写字母<br>[A-Z a-z]：任意大小写字母<br>[A-Z a-z 0-9]：任意字母或数字<br>[S,s]：匹配大小写s</p>\n<p>A{2}B：A出现2次：AAB<br>A{4,}B：A最少出现4次，AAAAB，AAAAAB…<br>A{2,4}B：A出现次数范围2-4次，AAB，AAAB，AAAAB<br>[0-9]{3}.[0-9]{3}.[0-9]{3}.[0-9]{3}：匹配IP地址</p>\n<p>find命令形式<br>find pathname -option [-print -exec -ok]<br>-pathname查找路径，例如用.来表示当前目录，用/表示系统根目录。-print，find命令将匹配的文件输出到标准输出。-exec，find命令对匹配的文件执行该参数所给出的shell命令，相应命令的形式为’command’{} \\;’，注意{}和\\；之间的空格。-ok和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前都会给出提示，让用户来确定是否执行。<br>find命令的一般形式：<br>-name按照文件名找文件<br>-perm按照文件权限来找文件<br>-user按照文件属主来找文件<br>-group按照文件所属的组来找文件<br>-mtime -n +n按照文件的更改时间来查找文件。-n表示文件更改时间距现在n天以内，+n表示文件更改时间距现在n天以前。find命令还有-atime和-ctime选项，但他们都和-mtime选项相似<br>-size n[c]查找文件长度为n块的文件，带有c时表示文件长度以字节计。<br>-nogroup查找无有效所属组的文件，即该文件所属的组在/etc/groups中不存在。<br>-nouser查找无有效属主的文件，即该文件的属主在/etc/passwd中不存在。<br>-newer file1 ! -newer file2查找更改时间比文件file1新但比文件file2旧的文件。<br>-type查找某一类的文件，比如：b块设备文件，d目录，c字符设备文件，p管道文件，l符号链接文件，f普通文件。</p>\n<p>举例：<br>-name：可以使用某种文件名模式来匹配文件，记住要用引号将文件名模式引起来，例：<br>find -name “<em>.txt” -print，没有路径表示查找当前路径。find ./ -name “</em>.txt” -print。find ./ -name “[A-Z]<em>“ -print，find /etc -name “host</em>“ -print。<br>-perm：find . -perm 755 -print。<br>-user和-nouser：find <code>pwd</code> -user root -print。find <code>pwd</code> -nouser -print。<br>-group和-nogroup：find ./ -group itlab -print，find / -nogroup -print。<br>-mtime：find /var -mtime -5 -print，find /var -mtime +3 -print。<br>-newer：find <code>pwd</code> -newer “myfile” ! -newer “myfile123” -print。<br>-type：find /etc -type d -print。<br>-size：find . -size +1000000c -print查找文件大小大于1000000字节的文件，find . -size +10 -print，查找大小大于10块的文件。<br>-depth：使用find命令时，可能希望先匹配所有的文件，再在子目录中查找，find / -name “con.file” -depth -print。<br>-exec或ok：find . -type f -exec ls -l {} \\;<br>find . -name “*.log” -mtime +5 -ok rm{} \\;<br>-xargs:在使用find命令的-exec选项处理匹配到的文件时，find命令将所有匹配到的文件一起传递给exec，不幸的是有些系统对能够传递给exec的命令长度有限制，这样在find命令运行几分钟后就会出现溢出错误。错误信息通常是“参数列太长”或“参数列溢出”，这就是xargs命令的用处所在，特别是与find命令一起使用。exec会发起多个进程，而xargs不会多个，只有一个。例：find ./ -perm -7 -print | xargs chmod o-w，<br>find ./ -type f -print | xargs file。</p>\n<p>grep介绍<br>对文本文件进行模式查找，grep有三种变形<br>-Grep：标准grep命令<br>-Egrep：扩展grep，支持基本及扩展的正则表达式<br>-Fgrep：快速grep<br>grep一般格式为：<br>-grep[选项]基本正则表达式[文件]<br>-字符串参数(基本正则表达式)最好采用双引号，一是以防被误解为shell命令，二是可以用来查找多个单词组成的字符串。<br>grep命令选项：<br>-c：只输出匹配行的计数<br>-i：不区分大小写(只适用于单字符)<br>-h：查询多文件时不显示文件名<br>-H：显示文件名<br>-l：查询多文件时只输出包含匹配字符的文件名<br>-n：显示匹配行及行号<br>-s：不显示不存在或无匹配文本的错误信息<br>-v：显示不包含匹配文本的所有行<br>例：<br>grep “jenny” <em>.txt<br>grep “sort it” </em><br>grep -c “2004” myfile<br>grep -n “2004” myfile<br>grep -i “Jul” myfile<br>grep -v “2004:22” myfile<br>grep “2004:22:5[0-9]” myfile<br>grep “^[^210]” myfile，查找行首不是2或1或0的行。<br>grep “[5-8][6-9][0-2]” myfile<br>grep “4{2}“ myfile<br>grep “4{2,}“ myfile<br>grep “4{2,4}“ myfile<br>grep “^$” myfile<br>grep “\\?” myfile<br>grep “^d” myfile<br>grep “^[^d]” myfile</p>\n<p>grep命令类名类等价的正则表达式<br>[[:upper:]][A-Z]<br>[[:alnum:]][0-9a-zA-Z]<br>[[:lower:]][a-z]<br>[[:space:]]    空格或tab键<br>[[:digit:]][0-9]<br>[[:alpha:]][a-zA-Z]<br>例：grep “5[[:digit:]][[:digit:]]” myfile</p>\n<p>awk介绍<br>可从文件或字符串中基于指定规则浏览和抽取信息，是一种自解释的编程语言，三种方式调用awk：<br>-命令行方式：<br>    awk [-F field-spearator]’command’ input-files，field-spearator默认是空格。<br>-awk脚本<br>    所有awk命令插入一个文件，并使awk程序可执行，然后用awk命令解释器作为脚本的首行，以便通过键入脚本名称来调用它。<br>-awk命令插入一个单独文件<br>    awk -f awk-script-file input-files</p>\n<p>awk脚本由各种操作和模式组成<br>模式和动作：<br>    -模式部分决定动作语句何时出发及出发事件。(BEGIN,END)<br>    -动作对数据进行处理，放在大括号{}内指明。(input)<br>分隔符，域和记录：<br>    -awk执行时，其浏览域标记为$1,$2…$n。这种方法称为域标识。$0为所有域，即这条记录。<br>    -注意执行时不要混淆符号$和shell提示符$，他们是不同的。<br>例：awk ‘{print $0}’ score.txt | tee score.out。<br>awk -F . ‘{print $0}’ score.txt |tee score.out。<br>awk ‘{print $1 “\\t”$4}’ score.txt。<br>awk ‘BEGIN {print “Name Maths\\n——“} {print $1”\\t”$4} END {print “end-of-report”}’ score.txt。</p>\n<p>awk中的特殊元字符：+和？，+表示匹配任意字符，？表示匹配单个字符。<br>匹配操作符：~(表示匹配),!~(表示不匹配)，要匹配的内容放在两个\\之间。<br>cat score.txt|awk ‘$0 ~/218.79.131.96/‘。<br>awk ‘$0 !~/218.79.131.96/‘ score.txt。<br>awk ‘{if($1==”218.79.131.96”) print $0}’ score.txt。</p>\n<p>sed介绍<br>sed不与初始化文件打交道，它操作的只是一个拷贝，然后所有的改动如果没有重定向到一个文件，将输出到屏幕。sed是一种重要的文本过滤工具，使用一行命令或使用管道与grep与awk相结合。非交互性文本流编辑。调用sed有三种方式：<br>-使用sed命令行格式<br>   sed [选项] sed命令 输入文件<br>-使用sed脚本文件，格式为：<br>   sed [选贤] -f sed脚本文件 输入文件<br>-sed脚本文件[选项] 输入文件<br>-不管是使用shell命令行方式或脚本文件方式，如果没有指定输入文件，sed从标准输入中接受输入，一般是键盘或重定向结果。<br>sed命令选项：<br>-n不打印<br>-c下一命令是编辑命令<br>-f如果正在调用sed脚本文件</p>\n<p>sed在文件中查找文本的方式<br>-使用行号，可以是一个简单数字或是一个行号范围<br>-使用正则表达式<br>x            x为一行号<br>x,y            表示行号范围从x到y<br>/pattern/        查询包含模式的行<br>/pattern/pattern/    查询包含两个模式的行<br>pattern/,x        在给定的行号上查询包含模式的行<br>x,/pattern/        通过行号和模式查询匹配行<br>x,y!            查询不包含指定行号x和y的行<br>基本sed编辑命令：<br>p    打印匹配行<br>=    显示文件行号<br>a\\    在定位行号后附加新文本信息<br>i\\    在定位行号后插入新文本信息<br>d    删除定位行<br>c\\    用新文本替换定位文本<br>s    使用替换模式替换相应模式<br>r    从另一个文件中读文本<br>w    写文本到一个文件<br>q    第一个模式匹配完成后退出或立即退出<br>l    显示与八进制ASCII代码等价的控制字符<br>{}    在定位行执行的命令组<br>n    从另一个文件中读文本下一行，并附加在下一行<br>g    将模式2粘贴到/pattern n/<br>y    传送字符</p>\n<p>例：<br>sed ‘2p’ score.txt，单引号中的是命令，打印score.txt这个文件的第二行，这里全部打印，因为没有加-n，这样匹配到的和没匹配到的都打印。<br>sed -n ‘2p’ score.txt，-n表示不打印没匹配到的，只打印第二行。<br>sed -n ‘1,4p’ score.txt，打印1~4行。<br>sed -n ‘/los/p’ myfile.txt，打印包含los字符的所有行。<br>sed -n ‘4,/los/p’ myfile.txt，从第四行开始匹配到第一个los结束，如果los在第六行，那么从第四行到第六行都打印，如果下面还有los也不打印了。<br>sed -n ‘/^$/=’ myfile.txt，显示空行的行号。<br>sed -n -e ‘/^$/p’ -e ‘/^$/=’ myfile，打印空白行打印行号。<br>sed -n ‘/chinaitlab/a\\shenzhen’ myfile.txt。<br>sed -n ‘/chinaitlab/i\\shenzhen’ myfile.txt。<br>sed -n ‘/chinaitlab/c\\chinaitlab shenzhen’ myfile.txt。<br>sed ‘1,2d’ myfile.txt，把第一第二行删除。<br>sed ‘s/chinaitlab/chinaitlab shenzhen/g’ myfile.txt，当有多个chinaitlab时，加g表示全部替换。<br>sed -n ‘s/chinaitlab/&amp; hello/p’ myfile.txt， 在匹配到的所有的chinaitlab的后面加 hello。<br>sed -n ‘s/chinaitlab/hello &amp;/p’ myfile.txt，在匹配到的所有的chinaitlab的前面加 hello。<br>sed ‘lr ctrl.txt’ myfile.txt。<br>sed ‘china/q’ myfile.txt。<br>sed -n ‘/china/l’ myfile.txt。</p>\n<p>合并与分割<br>sort[options] files<br>-许多不同的域按不同的列顺序分类<br>-c测试文件是否已经分类<br>-m合并两个分类文件<br>-u删除所有复制行<br>-o存储sort结果的输出文件名<br>-t域分隔符：用非空格或tab键分割域<br>+n n为域号，使用此域号开始分类<br>n指定分类是域上的数字分类项<br>-r比较求逆</p>\n<p>例：<br>sort -c myfile，检查这个文件是否已经排序。<br>sort -u myfile，</p>\n<h2 id=\"第六讲shell函数\"><a href=\"#第六讲shell函数\" class=\"headerlink\" title=\"第六讲shell函数\"></a>第六讲shell函数</h2><p>定义函数格式：<br>函数名()<br>{<br>命令1<br>…<br>}<br>function 函数名()<br>{<br>…<br>}<br>函数可以放在同一个文件中作为一段代码，也可以放在只包含函数的单独文件中。</p>\n<p>#!/bin/bash</p>\n<p>#hellofun<br>function hello()<br>{<br>echo “hello,today is <code>date</code>“<br>return 0<br>}<br>echo “now going to the function hello”<br>hello<br>echo “back from the function”</p>\n<p>参数传递：向函数传递参数就像在脚本中使用位置变量$1,$2…$9<br>例：</p>\n<p>#!/bin/bash</p>\n<p>#func<br>function hello()<br>{<br>echo “Hello,$1 today is <code>date</code>“<br>}<br>echo “now going to the function hello”<br>hello chinaitlab<br>echo “back from the function”</p>\n<p>函数文件</p>\n<p>#!/bin/bash</p>\n<p>#func</p>\n<p>#source function<br>. hellofun<br>echo “now going to the function hello”<br>hello<br>echo “back from the function”</p>\n<p>#!/bin/bash</p>\n<p>#hellofun<br>function hello()<br>{<br>echo “Hello, today is <code>date</code>“<br>return 0<br>}</p>\n<p>检查载入函数和删除函数<br>察看载入函数set<br>删除函数unset<br>例：</p>\n<p>#!/bin/bash</p>\n<p>#func</p>\n<p>#source function<br>. hellofun<br>set #察看加载的函数和变量信息<br>echo “now going to the function hello”<br>unset hello#删除这个函数<br>hello<br>echo “back from the function”</p>\n<p>函数返回值：</p>\n<p>#!/bin/bash</p>\n<p>#hellofun<br>function hello()<br>{<br>echo “Hello, today is <code>date</code>“<br>return 0<br>}</p>\n<p>#!/bin/bash</p>\n<p>#func<br>echo “now going to the function hello”<br>hello<br>echo $?<br>echo “back from the function”</p>\n<h2 id=\"第七讲脚本参数传递\"><a href=\"#第七讲脚本参数传递\" class=\"headerlink\" title=\"第七讲脚本参数传递\"></a>第七讲脚本参数传递</h2><p>shift命令,每次讲参数位置向左偏移n位。</p>\n<p>#!/bin/bash</p>\n<p>#opt2<br>usage()<br>{<br>echo “usage:<code>basename $0</code> filenames”<br>}<br>totalline=0<br>if[ $# -lt 2 ];then<br>    usage<br>    exit#退出系统，下面的代码不执行<br>fi<br>while [ $# -ne 0]#参数个数不等于0<br>do<br>line=<code>cat $1|wc -l</code><br>echo “$1:${line}”<br>totalline=$[$totalline+$line]<br>shift#调用shift时$#(参数个数)也跟着减1<br>done<br>echo “———–”<br>echo “total:${totalline}”</p>\n<p>getopts获得多个命令行参数</p>\n<p>#!/bin/bash<br>ALL=false<br>HELP=false<br>FILE=false<br>VERBOSE=false<br>while getopts ahfvc OPTION<br>do<br>    case $OPTION in<br>    a)<br>        ALL=true<br>        echo “ALL IS $ALL”<br>        ;;<br>    h)<br>        HELP=true<br>        echo “HELP is $HELP”<br>        ;;<br>    f)<br>        FILE=true<br>        echo “FILE is $FILE”<br>        ;;<br>    v)<br>        VERBOSE=true<br>        echo “VERBOSE is $VERBOSE”<br>        ;;<br>    c)<br>        echo “c value is $c”<br>        ;;<br>    \\?)<br>        echo “<code>basename $0</code> -[a h f v] -[c value] file “<br>        ;;<br>    esac<br>done</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第一讲\"><a href=\"#第一讲\" class=\"headerlink\" title=\"第一讲\"></a>第一讲</h2><p>zh_CN.GB18030<br><code>cat /etc/shells</code> 可以查看系统的 shell 种类。<code>echo $SHELL</code> 查看当前使用的shell。在当前shell中运行其它shell，例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /bin/csh ls -lh。 </span></span><br><span class=\"line\">chomod u=rwx,g+w,o+r file </span><br><span class=\"line\">chown -R jack /etc/<span class=\"built_in\">test</span>/ <span class=\"comment\">#把这个目录下所有的子目录和文件的拥有者都改变成jack</span></span><br></pre></td></tr></table></figure>\n<p>把这个目录下所有的子目录和文件的拥有者都改变成jack。</p>\n<p><code>chown jack.jack /etc/test/ -R</code><br>umask   文件   目录<br>0    6    7<br>1    5    6<br>2    4    5<br>3    3    4<br>4    2    3<br>5    1    2<br>6    0    1<br>7    0    0<br>/etc/profile 文件中可以设定 umask 值。</p>\n<p><code>alias ll=&#39;ls -alh&#39;</code></p>\n<p><code>cat $HOME/.bashrc</code> , 别名都放在这个文件中。</p>\n<p>命令替换：<code>ls \\</code>cat myfile` -al`，这个反引号就是1左边的键，把myfile的内容输出到ls的输入。<br>后台运行：# nohup tar -czf abc.tar.gz /etc/abc/ &amp;。jobs -l查看后台运行情况。<br>模式匹配：ls *.txt -l。</p>\n<h2 id=\"第二讲\"><a href=\"#第二讲\" class=\"headerlink\" title=\"第二讲\"></a>第二讲</h2><p>本地变量在用户现在的shell生命期的脚本中使用，例在当前shell中设置变量，ABC=123，然后exit退出当前shell，再进入系统用set指令(显示本地变量)发现ABC变量无。readonly ABC，把ABC设置成只读变量。只是用readonly指令显示当前shell中有哪些只读变量。</p>\n<p>环境变量用于所有用户进程（经常称为子进程）。登录进程称为父进程，shell中执行的用户进程均称为子进程。不像本地变量(只用于现在的shell)环境变量可用于所有子进程，这包括编辑器，脚本和应用。<br>$HOME/.bash_profile(/etc/profile)<br>export，例：export ABC=”shell program”，把ABC这个变量变成环境变量。直接输入export也可以查看环境变量有哪些。readonly ABC，把环境变量ABC变成只读的。</p>\n<p>变量替换：<br>${var name}    显示实际值到var name<br>${var name:+value}    如果设置了var name，则显示其值value，否则为空<br>${var name:?value}    如果未设置var name，显示用户定义错误信息value<br>${var name:-value}    如果未设置var name，显示其值value，如果设置了var name则显示var name的值<br>${var name:=value}    如果未设置var name，设置其值并显示，如果设置了var name则显示var name的值<br>env<br>unset ABC，删除ABC变量，但是用readonly声明的变量是不能被unset的。</p>\n<p>位置变量：先看下面的脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#parms</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"program name is <span class=\"variable\">$0</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"1 parm is <span class=\"variable\">$1</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"2 parm is <span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"3 parm is <span class=\"variable\">$3</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"4 parm is <span class=\"variable\">$4</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>然后运行这个脚本：./parms a b c d，就会显示结果,$0表示脚本名称，$1-9分别表示位置变量名，在运行脚本时代入脚本中。<br>再例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#parm.sh</span></span><br><span class=\"line\">find /home/chinaitlab/shell -name <span class=\"variable\">$1</span> -<span class=\"built_in\">print</span></span><br></pre></td></tr></table></figure>\n<p>然后运行这个脚本: <code>./parm.sh abc.txt</code> 。</p>\n<p>标准变量：bash 默认建立了一些标准环境变量，可在 /etc/profile 中定义。<br> EXINIT，运行 vi 时初始化设置一些参数<br>HOME<br>IFS<br>LOGNAME<br>MAIL<br>MAILCHECK<br>MAILPATH<br>PATH<br>PS1<br>PS2<br>SHELL<br>TERMINFO<br>TERM<br>TZ<br>EDITOR<br>PWD<br>MANPATH</p>\n<p>特殊变量：<br>$#(传递到脚本的参数个数)<br>$*(以一个单字符串显示所有向脚本传递的参数。与位置变量不同，此选项参数可超过9个)<br>$$(脚本运行的当前进程ID号)<br>$!(后台运行的最后一个进程的进程ID号)<br>$@(与$#相同，但是使用时加引号，并在引号中返回每个参数)<br>$-(显示shell使用的当前选项，与set命令功能相同)<br>$?(显示最后命令的推出状态。0表示没有错误，其它任何值表明有错误)</p>\n<p>影响变量的命令：<br>declare<br>-设置或显示变量<br>-f 只显示函数名<br>-r 创建只读变量(declare和typeset)<br>-x 创建转出变量<br>-i 创建整数变量</p>\n<ul>\n<li>使用+替代-，可以颠倒选项的含义<br>export<br>-用于创建传给予shell的变量(环境变量)</li>\n<li>–表明选项结束，所有后续参数都是实参</li>\n<li>-f表明在”名-值”对中的名字是函数名</li>\n<li>-n把全局变量转换成局部变量，换句话说，命令的变量不再传给shell</li>\n<li>-p显示全局变量列表<br>unset</li>\n<li>用于取消变量的定义</li>\n<li>–表明选项结束</li>\n<li>-f删除只读变量，但不能取消从shell环境中删除指定的变量和函数如：PATH，PS1，PS2，PPID，UID，EUID等的设置。<br>shift[n]</li>\n<li>用于移动位置变量，调整位置变量，使$3的值赋予$2,$2的值赋予$1。<br>typeset<br>-用于显示或设置变量<br>-是declare的同义词</li>\n</ul>\n<p>引号：<br>使用双引号可以引用除字符$,<code>(反引号),\\外的任意字符或字符串。例：echo -e &quot;ert, $SHELL&#39;\\n* china</code>echo itlab<code>&quot;。\n单引号会忽略其中所有的特殊含义的字符，例：echo &#39;ert, $SHELL * china</code>echo itlab`’。<br>反引号用于设置系统命令的输出到变量，shell将反引号中的内容作为一个系统命令，并执行其内容。<br>反斜杠：如果一个字符有特殊含义，反斜杠防止shell误解其含义，即屏蔽其特殊含义，这些字符有特殊含义： $,<em>,+,&amp;,”,|,?,^例：echo </em>，显示当前目录下的所有文件名，echo *，则显示*。</p>\n<p>运算符类型：<br>按位运算符    ~,&lt;&lt;,&gt;&gt;,&amp;,|,^<br>运算符        说明<br>~op1        反运算符，把op1中所有的二进制为1变为0，0变为1<br>op1&lt;<op2 左移运算符，把op1中的二进制位向左移动op2位，忽略最左端移出的各位，最右端的各位补0值，每做一次按位左移就有实现op1乘以2。=\"\" op1=\"\">&gt;op2    右移运算符，把op1中的二进制位向右移动op2位，忽略最右端移出的各位，最左端的各位补0值，每做一次按位右移就有实现op1除以2。<br>op1&amp;op2        与比较运算符，op1和op2对应位，对于每个二进制位来说，如果二者该位都是1，则结果为1，否则为0。<br>op1^op2        异或运算符，op1和op2对应位，对于每个二进制位来说，如果二者该位互补，则结果为1否则为0。<br>op1|op2        或运算符。<br>$[]表示形式告诉shell对方括号中的表达式求值，例：echo $[2+8]，echo $[2&gt;&gt;8]，echo $[2&lt;&lt;4]，echo $[2^4]，echo $[~3]。<br>逻辑运算符：&amp;&amp;,||,&gt;,==,&lt;,!=例：echo $[2&amp;&amp;2]，echo $[1||0]。<br>赋值运算符：=,+=,-=,*=,/=,%=,&amp;=,^=,|=,&lt;&lt;=,&gt;&gt;=<br>let $count=$count+$change<br>let $count+=$change<br>$[]可以接受不同基数的数字</op2></p>\n<ul>\n<li>[ base#n ] n表示基数从2到36的任何基数，例：echo $[10#8+1]，8进制的10加上1，结果为9。</li>\n</ul>\n<h2 id=\"第三讲\"><a href=\"#第三讲\" class=\"headerlink\" title=\"第三讲\"></a>第三讲</h2><p>echo [option] string</p>\n<ul>\n<li>e解析转义字符</li>\n<li>-n回车不换行，linux系统默认回车换行，例：echo “hello”和echo -n “hello”的区别。</li>\n<li>string中的转义符(\\c,\\f,\\t,\\n)，\\c表示回车不换行，\\f表示禁止，\\t表示跳格(tab)，\\n表示回车换行<br>例：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#echod</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">\"This echo's 3 new lines\\n\\n\\n\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"OK\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"This echo's 3 new lines\\n\\n\\n\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"The log files have all been done\"</span>&gt;mylogfile.txt</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>read语句可以从键盘或文件的某一行文本中读入信息，并将其赋给一个变量。<br>read var1 var2…<br>-如果只指定了一个变量，那么read将会把所有的输入赋给该变量，直至遇到第一个文件结束符或回车；如果给出了多个变量，他们按顺序分别被赋予不同的变量。shell将用空格作为变量之间的分隔符。<br>例：</p>\n<p>#!/bin/bash</p>\n<p>#readname<br>echo -n “First name:”<br>read firstname<br>echo -n “Last name:”<br>read lastname<br>echo -e “Your First Name is :${firstname}\\n”<br>echo -e “Your Last Name is :${lastname}\\n”</p>\n<p>cat可显示文件内容，创建文件还可以显示控制字符。<br>cat [options] file1 file2…</p>\n<ul>\n<li>-v显示控制字符<br>使用cat命令时要注意，它不会在文件分页符处停下来，它会一下显示完整个文件，如果希望每次显示一页，可以使用more。例：cat file1 file2 file3，会在屏幕上同时显示三个文件的内容，cat file1 file2 file3&gt;file123，会把这三个文件的内容合并到一个文件file123中，cat -v dos.txt，显示这个windows下生成的文件，并显示控制字符(这些控制字符是在windows生成这个文件时加入的)。<br>管道举例：df -k|awk ‘{print $1}’|grep -v “Filesystem”。<br>tee命令把输出的一个副本输送到标准输出，另一个副本拷贝到相应的文件中。<br>tee -a files</li>\n<li>如果希望在看到输出的同时，也将其存入一个文件，那么这个命令再合适不过了，一般用于管道之后，-a参数表示追加写入files中，如果没有-a参数，则覆盖写入这个文件中。例：who | tee -a who.out。</li>\n</ul>\n<p>标准输入输出和错误<br>在shell中执行命令时，每个进程都和三个打开的文件相联系，并使用文件描述符来引用这些文件，由于文件描述符不容易记忆，shell同时给出了相应的文件名。<br>文件            文件描述符<br>输入文件-标准输入    0(缺省是键盘，也可以是文件或其它命令的输出)<br>输出文件-标准输出    1(缺省是屏幕，也可以是文件)<br>错误输出文件-标准错误    2(缺省是屏幕，也可以是文件)<br>系统中实际上有12个文件描述符，可以任意使用文件描述符3到9。</p>\n<p>文件重定向<br>command &gt; file        把标准输出重定向到一个新文件中<br>command &gt;&gt; file        把标准输出重定向到一个文件中(追加)<br>command 1 &gt; file    把标准输出重定向到一个文件中<br>command &gt; file 2&gt;&amp;1    把标准输出和标准错误一起重定向到一个文件中<br>command 2 &gt; file    把标准错误重定向到一个文件中<br>command 2&gt;&gt; file    把标准输出重定向到一个文件中(追加)<br>command &gt;&gt; file 2&gt;&amp;1    把标准输出和标准错误一起重定向到一个文件中(追加)<br>command &lt; file &gt; file2    command命令以file作为标准输入，file2文件作为标准输出<br>command &lt; file        command命令以file作为输入<br>command &lt;&lt; dclimiter    从标准输入中读入，直至遇到dclimiter分界符<br>command &lt; &amp;m        把文件描述符m作为标准输入<br>command &gt; &amp;m        把标准输出重定向到文件描述符m中<br>command &lt; &amp;-        关闭标准输入<br>例：&gt;nullfile，创建一个新的空文件。sort &lt; file，把file作为输入源，排序然后输出到屏幕上。sort &lt; name.txt &gt; name.out。cat account_new.txt account_old.txt 1&gt;accounts.out 2&gt;accounts.err，account_new.txt存在，account_old.txt不存在，那么accounts.out将包含account_new.txt的内容，不会包含account_old.txt的内容，account_old.txt不存在的错误信息会写入accounts.err中。<br>合并标准输出和标准错误的时候，切忌shell是从左至右分析相应的命令，例：grep “standard” standard.txt &gt; grep.out 2&gt;&amp;1。</p>\n<p>exec命令可以用来替代当前shell；换句话说，并没有启动子shell，使用这一命令时任何现有环境都会被清除，并重新启动一个shell。<br>exec command<br>-其中的command通常是一个shell脚本。<br>对文件描述符进行操作的时候(也只有在这时)，它不会覆盖你当前的shell。</p>\n<p>文件描述符：<br>3-9文件描述符<br>exec与文件描述符的结合<br>例：</p>\n<p>#!/bin/bash</p>\n<p>#file_desc<br>exec 3&lt;&amp;0 0&lt;name.txt<br>read line1<br>read line2<br>exec 0&lt;&amp;3<br>echo $line1<br>echo $line2</p>\n<h2 id=\"第四讲-控制流结构\"><a href=\"#第四讲-控制流结构\" class=\"headerlink\" title=\"第四讲 控制流结构\"></a>第四讲 控制流结构</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件1</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">\t命令1</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 条件2</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">\t命令2</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\t命令3</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#if test</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"10\"</span> -lt <span class=\"string\">\"12\"</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">   <span class=\"built_in\">echo</span> <span class=\"string\">\"yes,10 is less than 12\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>可以使用man test获得条件的帮助。<br>再例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#iftest2</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">\"Enter your name:\"</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> NAME</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$NAME</span>\"</span> == <span class=\"string\">\"\"</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"You did not enter your name\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>再例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#ifcp</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> cp myfile.bak myfile;<span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"good copy\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"built_in\">echo</span> <span class=\"string\">\"basename <span class=\"variable\">$0</span>:error could not copy files\"</span> &gt;&amp;2</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>再例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#ifelif</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">\"Enter your name:\"</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> NAME</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"variable\">$NAME</span> ] || [ <span class=\"string\">\"<span class=\"variable\">$NAME</span>\"</span> = <span class=\"string\">\"\"</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"you do not enter a name.\"</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"string\">\"<span class=\"variable\">$NAME</span>\"</span> = <span class=\"string\">\"root\"</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"hello root\"</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"string\">\"<span class=\"variable\">$NAME</span>\"</span> = <span class=\"string\">\"chinaitlab\"</span> ];<span class=\"keyword\">then</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"hello chinaitlab\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"you are not root or chinaitlab,but hi,<span class=\"variable\">$NAME</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<p>case语句格式: </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> 值 <span class=\"keyword\">in</span></span><br><span class=\"line\">模式1)</span><br><span class=\"line\">\t命令1</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">模式2)</span><br><span class=\"line\">\t命令2</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n<p>case取值后面必须为单词in，每一个模式必须以右括号结束。取值可以为变量或常数，匹配发现取值符合某一模式后，其间所有命令开始执行直至;;。模式匹配符*表示任意字符,?表示任意单字符，[..]表示类或范围中任意字符。<br>例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#case select </span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -n <span class=\"string\">\"Enter a number from 1 to 3:\"</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> ANS</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$ANS</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">1)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"you select 1\"</span></span><br><span class=\"line\">\t;;</span><br><span class=\"line\">2)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"you select 2\"</span></span><br><span class=\"line\">\t;;</span><br><span class=\"line\">3)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"you select 3\"</span></span><br><span class=\"line\">\t;;</span><br><span class=\"line\">Y|y)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"you select <span class=\"variable\">$ANS</span>\"</span></span><br><span class=\"line\">\t;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"basename <span class=\"variable\">$0</span>:This is not between 1 and 3\"</span> &gt;&amp;2</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br></pre></td></tr></table></figure>\n<p>for循环格式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> 变量名 <span class=\"keyword\">in</span> 列表</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t命令1</span><br><span class=\"line\">\t命令2</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>当变量值在列表里，for循环即执行一次所有命令，使用变量名访问列表中取值。命令可为任何有效的shell命令和语句。变量名为任何单词。In列表用法是可选的，如果不用它，for循环使用命令行的位置参数。in列表可以包含替换，字符串和文件名。<br>例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#forlist1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> loop <span class=\"keyword\">in</span> 1 2 3 4 5</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$loop</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>再例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#forlist2</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> loop <span class=\"keyword\">in</span> <span class=\"string\">\"orange red blue grey\"</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$loop</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>再例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#forlist2</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> loop <span class=\"keyword\">in</span> `cat myfile`</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$loop</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">until循环格式：</span><br><span class=\"line\">until 条件</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  命令1</span><br><span class=\"line\">  命令2</span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>注：条件可为任意测试条件，测试发生在循环末尾，因此循环至少执行一次。<br>例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#until_mon</span></span><br><span class=\"line\"><span class=\"comment\">#监控分区</span></span><br><span class=\"line\">Part=<span class=\"string\">\"/backup\"</span></span><br><span class=\"line\"><span class=\"comment\">#得到磁盘使用的百分比</span></span><br><span class=\"line\">LOOK_OUT=`df|grep <span class=\"string\">\"<span class=\"variable\">$Part</span>\"</span>|awk <span class=\"string\">'&#123;print $5&#125;'</span>|sed <span class=\"string\">'s/%//g'</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$LOOK_OUT</span></span><br><span class=\"line\">until [<span class=\"string\">\"<span class=\"variable\">$LOOK_OUT</span>\"</span> gt <span class=\"string\">\"90\"</span>]</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"FileSystem /backup is nearly full\"</span> |mail root</span><br><span class=\"line\">  LOOK_OUT=`df|grep <span class=\"string\">\"<span class=\"variable\">$Part</span>\"</span>|awk <span class=\"string\">'&#123;print $5&#125;'</span>|sed <span class=\"string\">'s/%//g'</span>`</span><br><span class=\"line\">  sleep 3600</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>然后# nohup ./dfuntil &amp;让这个程序在后台运行，一小时检测一次看这个分区的空间占用率是否大于90%。</p>\n<p>while格式：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> 命令</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  命令1</span><br><span class=\"line\">  命令2</span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>注：在while和do之间虽然通常只使用一个命令，但可以放几个命令，命令通常用作测试条件。<br>例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#whileread</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"按住&lt;ctrl&gt;+D退出输入。\"</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">echo</span> -n <span class=\"string\">\"输入你最喜欢的电影：\"</span>;<span class=\"built_in\">read</span> FILM</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"Yeah.<span class=\"variable\">$&#123;FILM&#125;</span>是一部好电影！\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>再例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#whileread</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> LINE</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"variable\">$LINE</span></span><br><span class=\"line\"><span class=\"keyword\">done</span> &lt;names.txt</span><br></pre></td></tr></table></figure></p>\n<p>把names.txt这个文件的内容按每行输出到屏幕。<br>break与continue：<br>break[n]<br>-退出循环，如果是在一个嵌入循环里，可以指定n来跳出的循环个数。<br>例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#breakout</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> :</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"Enter any number[1..5]:\"</span></span><br><span class=\"line\">  <span class=\"built_in\">read</span> ANS</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"variable\">$ANS</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  1|2|3|4|5)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"you enter a number between 1 and 5.\"</span></span><br><span class=\"line\">\t;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"wrong number,bye.\"</span></span><br><span class=\"line\">\t<span class=\"built_in\">break</span></span><br><span class=\"line\">\t;;</span><br><span class=\"line\">  <span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>再例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#breakout</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> :</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"Enter any number[1..5]:\"</span></span><br><span class=\"line\">  <span class=\"built_in\">read</span> ANS</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"variable\">$ANS</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  1|2|3|4|5)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> <span class=\"string\">\"you enter a number between 1 and 5.\"</span></span><br><span class=\"line\">\t;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">\t<span class=\"built_in\">echo</span> -n <span class=\"string\">\"wrong number,continue(y/n)?:\"</span></span><br><span class=\"line\">\t<span class=\"built_in\">read</span> IS_CONTINUE</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"variable\">$IS_CONTINUE</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">\t\ty|yes|Y|YES)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">continue</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t\t*)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">break</span></span><br><span class=\"line\">\t\t\t;;</span><br><span class=\"line\">\t<span class=\"keyword\">esac</span></span><br><span class=\"line\">  <span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第五讲\"><a href=\"#第五讲\" class=\"headerlink\" title=\"第五讲\"></a>第五讲</h2><p>正则表达式：一种用来描述文本模式的特殊语法，由普通字符(a到z)以及特殊字符(称为元字符，如/,*,?等)<br>匹配的字符串<br>文本过滤工具在某种模式下都支持正则表达式<br>基本元字符集及含义<br>字符    含义<br>^    只匹配行首<br>$    只匹配行尾</p>\n<ul>\n<li>匹配0个或多个此单字符<br>]    只匹配[]内字符，可以是一个单字符，也可以是字符序列。可以使用-表示[]内字符序列范围，如用[1-5]代替[12345]。<br> 只用来屏蔽一个元字符的特殊含义<br> 只匹配任意单字符<br>attern{n}    只用来匹配前面pattern出现次数。n为次数<br>attern{n,}    含义同上，但次数最少为n<br>attern{n,m}    含义同上，但pattern出现次数在n与m之间。<br>例：<br>^d<br>rwxrwxrw-    匹配<br>rw-rw-rw    不匹配<br>^…1<br>482XC56D    不匹配<br>442XW7134    不匹配<br>451ABC123    匹配<br>D11XC9871    匹配<br>trouble$–匹配以单词trouble结尾的所有字符<br>^$–匹配空行<br>^.$–匹配包含一个字符的行<br>用\\屏蔽一个特殊字符，特殊字符有”,’,||,^,<em>,.,+等，\\</em>.pas正则表达式中匹配以*.pas结尾的所有字符或文件。</li>\n</ul>\n<p>逗号将括弧内要匹配的不同字符串分开，用-表示一个字符串范围<br>[0123456789]或[0-9]：任意一个数字<br>[a-z]：任意小写字母<br>[A-Z a-z]：任意大小写字母<br>[A-Z a-z 0-9]：任意字母或数字<br>[S,s]：匹配大小写s</p>\n<p>A{2}B：A出现2次：AAB<br>A{4,}B：A最少出现4次，AAAAB，AAAAAB…<br>A{2,4}B：A出现次数范围2-4次，AAB，AAAB，AAAAB<br>[0-9]{3}.[0-9]{3}.[0-9]{3}.[0-9]{3}：匹配IP地址</p>\n<p>find命令形式<br>find pathname -option [-print -exec -ok]<br>-pathname查找路径，例如用.来表示当前目录，用/表示系统根目录。-print，find命令将匹配的文件输出到标准输出。-exec，find命令对匹配的文件执行该参数所给出的shell命令，相应命令的形式为’command’{} \\;’，注意{}和\\；之间的空格。-ok和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前都会给出提示，让用户来确定是否执行。<br>find命令的一般形式：<br>-name按照文件名找文件<br>-perm按照文件权限来找文件<br>-user按照文件属主来找文件<br>-group按照文件所属的组来找文件<br>-mtime -n +n按照文件的更改时间来查找文件。-n表示文件更改时间距现在n天以内，+n表示文件更改时间距现在n天以前。find命令还有-atime和-ctime选项，但他们都和-mtime选项相似<br>-size n[c]查找文件长度为n块的文件，带有c时表示文件长度以字节计。<br>-nogroup查找无有效所属组的文件，即该文件所属的组在/etc/groups中不存在。<br>-nouser查找无有效属主的文件，即该文件的属主在/etc/passwd中不存在。<br>-newer file1 ! -newer file2查找更改时间比文件file1新但比文件file2旧的文件。<br>-type查找某一类的文件，比如：b块设备文件，d目录，c字符设备文件，p管道文件，l符号链接文件，f普通文件。</p>\n<p>举例：<br>-name：可以使用某种文件名模式来匹配文件，记住要用引号将文件名模式引起来，例：<br>find -name “<em>.txt” -print，没有路径表示查找当前路径。find ./ -name “</em>.txt” -print。find ./ -name “[A-Z]<em>“ -print，find /etc -name “host</em>“ -print。<br>-perm：find . -perm 755 -print。<br>-user和-nouser：find <code>pwd</code> -user root -print。find <code>pwd</code> -nouser -print。<br>-group和-nogroup：find ./ -group itlab -print，find / -nogroup -print。<br>-mtime：find /var -mtime -5 -print，find /var -mtime +3 -print。<br>-newer：find <code>pwd</code> -newer “myfile” ! -newer “myfile123” -print。<br>-type：find /etc -type d -print。<br>-size：find . -size +1000000c -print查找文件大小大于1000000字节的文件，find . -size +10 -print，查找大小大于10块的文件。<br>-depth：使用find命令时，可能希望先匹配所有的文件，再在子目录中查找，find / -name “con.file” -depth -print。<br>-exec或ok：find . -type f -exec ls -l {} \\;<br>find . -name “*.log” -mtime +5 -ok rm{} \\;<br>-xargs:在使用find命令的-exec选项处理匹配到的文件时，find命令将所有匹配到的文件一起传递给exec，不幸的是有些系统对能够传递给exec的命令长度有限制，这样在find命令运行几分钟后就会出现溢出错误。错误信息通常是“参数列太长”或“参数列溢出”，这就是xargs命令的用处所在，特别是与find命令一起使用。exec会发起多个进程，而xargs不会多个，只有一个。例：find ./ -perm -7 -print | xargs chmod o-w，<br>find ./ -type f -print | xargs file。</p>\n<p>grep介绍<br>对文本文件进行模式查找，grep有三种变形<br>-Grep：标准grep命令<br>-Egrep：扩展grep，支持基本及扩展的正则表达式<br>-Fgrep：快速grep<br>grep一般格式为：<br>-grep[选项]基本正则表达式[文件]<br>-字符串参数(基本正则表达式)最好采用双引号，一是以防被误解为shell命令，二是可以用来查找多个单词组成的字符串。<br>grep命令选项：<br>-c：只输出匹配行的计数<br>-i：不区分大小写(只适用于单字符)<br>-h：查询多文件时不显示文件名<br>-H：显示文件名<br>-l：查询多文件时只输出包含匹配字符的文件名<br>-n：显示匹配行及行号<br>-s：不显示不存在或无匹配文本的错误信息<br>-v：显示不包含匹配文本的所有行<br>例：<br>grep “jenny” <em>.txt<br>grep “sort it” </em><br>grep -c “2004” myfile<br>grep -n “2004” myfile<br>grep -i “Jul” myfile<br>grep -v “2004:22” myfile<br>grep “2004:22:5[0-9]” myfile<br>grep “^[^210]” myfile，查找行首不是2或1或0的行。<br>grep “[5-8][6-9][0-2]” myfile<br>grep “4{2}“ myfile<br>grep “4{2,}“ myfile<br>grep “4{2,4}“ myfile<br>grep “^$” myfile<br>grep “\\?” myfile<br>grep “^d” myfile<br>grep “^[^d]” myfile</p>\n<p>grep命令类名类等价的正则表达式<br>[[:upper:]][A-Z]<br>[[:alnum:]][0-9a-zA-Z]<br>[[:lower:]][a-z]<br>[[:space:]]    空格或tab键<br>[[:digit:]][0-9]<br>[[:alpha:]][a-zA-Z]<br>例：grep “5[[:digit:]][[:digit:]]” myfile</p>\n<p>awk介绍<br>可从文件或字符串中基于指定规则浏览和抽取信息，是一种自解释的编程语言，三种方式调用awk：<br>-命令行方式：<br>    awk [-F field-spearator]’command’ input-files，field-spearator默认是空格。<br>-awk脚本<br>    所有awk命令插入一个文件，并使awk程序可执行，然后用awk命令解释器作为脚本的首行，以便通过键入脚本名称来调用它。<br>-awk命令插入一个单独文件<br>    awk -f awk-script-file input-files</p>\n<p>awk脚本由各种操作和模式组成<br>模式和动作：<br>    -模式部分决定动作语句何时出发及出发事件。(BEGIN,END)<br>    -动作对数据进行处理，放在大括号{}内指明。(input)<br>分隔符，域和记录：<br>    -awk执行时，其浏览域标记为$1,$2…$n。这种方法称为域标识。$0为所有域，即这条记录。<br>    -注意执行时不要混淆符号$和shell提示符$，他们是不同的。<br>例：awk ‘{print $0}’ score.txt | tee score.out。<br>awk -F . ‘{print $0}’ score.txt |tee score.out。<br>awk ‘{print $1 “\\t”$4}’ score.txt。<br>awk ‘BEGIN {print “Name Maths\\n——“} {print $1”\\t”$4} END {print “end-of-report”}’ score.txt。</p>\n<p>awk中的特殊元字符：+和？，+表示匹配任意字符，？表示匹配单个字符。<br>匹配操作符：~(表示匹配),!~(表示不匹配)，要匹配的内容放在两个\\之间。<br>cat score.txt|awk ‘$0 ~/218.79.131.96/‘。<br>awk ‘$0 !~/218.79.131.96/‘ score.txt。<br>awk ‘{if($1==”218.79.131.96”) print $0}’ score.txt。</p>\n<p>sed介绍<br>sed不与初始化文件打交道，它操作的只是一个拷贝，然后所有的改动如果没有重定向到一个文件，将输出到屏幕。sed是一种重要的文本过滤工具，使用一行命令或使用管道与grep与awk相结合。非交互性文本流编辑。调用sed有三种方式：<br>-使用sed命令行格式<br>   sed [选项] sed命令 输入文件<br>-使用sed脚本文件，格式为：<br>   sed [选贤] -f sed脚本文件 输入文件<br>-sed脚本文件[选项] 输入文件<br>-不管是使用shell命令行方式或脚本文件方式，如果没有指定输入文件，sed从标准输入中接受输入，一般是键盘或重定向结果。<br>sed命令选项：<br>-n不打印<br>-c下一命令是编辑命令<br>-f如果正在调用sed脚本文件</p>\n<p>sed在文件中查找文本的方式<br>-使用行号，可以是一个简单数字或是一个行号范围<br>-使用正则表达式<br>x            x为一行号<br>x,y            表示行号范围从x到y<br>/pattern/        查询包含模式的行<br>/pattern/pattern/    查询包含两个模式的行<br>pattern/,x        在给定的行号上查询包含模式的行<br>x,/pattern/        通过行号和模式查询匹配行<br>x,y!            查询不包含指定行号x和y的行<br>基本sed编辑命令：<br>p    打印匹配行<br>=    显示文件行号<br>a\\    在定位行号后附加新文本信息<br>i\\    在定位行号后插入新文本信息<br>d    删除定位行<br>c\\    用新文本替换定位文本<br>s    使用替换模式替换相应模式<br>r    从另一个文件中读文本<br>w    写文本到一个文件<br>q    第一个模式匹配完成后退出或立即退出<br>l    显示与八进制ASCII代码等价的控制字符<br>{}    在定位行执行的命令组<br>n    从另一个文件中读文本下一行，并附加在下一行<br>g    将模式2粘贴到/pattern n/<br>y    传送字符</p>\n<p>例：<br>sed ‘2p’ score.txt，单引号中的是命令，打印score.txt这个文件的第二行，这里全部打印，因为没有加-n，这样匹配到的和没匹配到的都打印。<br>sed -n ‘2p’ score.txt，-n表示不打印没匹配到的，只打印第二行。<br>sed -n ‘1,4p’ score.txt，打印1~4行。<br>sed -n ‘/los/p’ myfile.txt，打印包含los字符的所有行。<br>sed -n ‘4,/los/p’ myfile.txt，从第四行开始匹配到第一个los结束，如果los在第六行，那么从第四行到第六行都打印，如果下面还有los也不打印了。<br>sed -n ‘/^$/=’ myfile.txt，显示空行的行号。<br>sed -n -e ‘/^$/p’ -e ‘/^$/=’ myfile，打印空白行打印行号。<br>sed -n ‘/chinaitlab/a\\shenzhen’ myfile.txt。<br>sed -n ‘/chinaitlab/i\\shenzhen’ myfile.txt。<br>sed -n ‘/chinaitlab/c\\chinaitlab shenzhen’ myfile.txt。<br>sed ‘1,2d’ myfile.txt，把第一第二行删除。<br>sed ‘s/chinaitlab/chinaitlab shenzhen/g’ myfile.txt，当有多个chinaitlab时，加g表示全部替换。<br>sed -n ‘s/chinaitlab/&amp; hello/p’ myfile.txt， 在匹配到的所有的chinaitlab的后面加 hello。<br>sed -n ‘s/chinaitlab/hello &amp;/p’ myfile.txt，在匹配到的所有的chinaitlab的前面加 hello。<br>sed ‘lr ctrl.txt’ myfile.txt。<br>sed ‘china/q’ myfile.txt。<br>sed -n ‘/china/l’ myfile.txt。</p>\n<p>合并与分割<br>sort[options] files<br>-许多不同的域按不同的列顺序分类<br>-c测试文件是否已经分类<br>-m合并两个分类文件<br>-u删除所有复制行<br>-o存储sort结果的输出文件名<br>-t域分隔符：用非空格或tab键分割域<br>+n n为域号，使用此域号开始分类<br>n指定分类是域上的数字分类项<br>-r比较求逆</p>\n<p>例：<br>sort -c myfile，检查这个文件是否已经排序。<br>sort -u myfile，</p>\n<h2 id=\"第六讲shell函数\"><a href=\"#第六讲shell函数\" class=\"headerlink\" title=\"第六讲shell函数\"></a>第六讲shell函数</h2><p>定义函数格式：<br>函数名()<br>{<br>命令1<br>…<br>}<br>function 函数名()<br>{<br>…<br>}<br>函数可以放在同一个文件中作为一段代码，也可以放在只包含函数的单独文件中。</p>\n<p>#!/bin/bash</p>\n<p>#hellofun<br>function hello()<br>{<br>echo “hello,today is <code>date</code>“<br>return 0<br>}<br>echo “now going to the function hello”<br>hello<br>echo “back from the function”</p>\n<p>参数传递：向函数传递参数就像在脚本中使用位置变量$1,$2…$9<br>例：</p>\n<p>#!/bin/bash</p>\n<p>#func<br>function hello()<br>{<br>echo “Hello,$1 today is <code>date</code>“<br>}<br>echo “now going to the function hello”<br>hello chinaitlab<br>echo “back from the function”</p>\n<p>函数文件</p>\n<p>#!/bin/bash</p>\n<p>#func</p>\n<p>#source function<br>. hellofun<br>echo “now going to the function hello”<br>hello<br>echo “back from the function”</p>\n<p>#!/bin/bash</p>\n<p>#hellofun<br>function hello()<br>{<br>echo “Hello, today is <code>date</code>“<br>return 0<br>}</p>\n<p>检查载入函数和删除函数<br>察看载入函数set<br>删除函数unset<br>例：</p>\n<p>#!/bin/bash</p>\n<p>#func</p>\n<p>#source function<br>. hellofun<br>set #察看加载的函数和变量信息<br>echo “now going to the function hello”<br>unset hello#删除这个函数<br>hello<br>echo “back from the function”</p>\n<p>函数返回值：</p>\n<p>#!/bin/bash</p>\n<p>#hellofun<br>function hello()<br>{<br>echo “Hello, today is <code>date</code>“<br>return 0<br>}</p>\n<p>#!/bin/bash</p>\n<p>#func<br>echo “now going to the function hello”<br>hello<br>echo $?<br>echo “back from the function”</p>\n<h2 id=\"第七讲脚本参数传递\"><a href=\"#第七讲脚本参数传递\" class=\"headerlink\" title=\"第七讲脚本参数传递\"></a>第七讲脚本参数传递</h2><p>shift命令,每次讲参数位置向左偏移n位。</p>\n<p>#!/bin/bash</p>\n<p>#opt2<br>usage()<br>{<br>echo “usage:<code>basename $0</code> filenames”<br>}<br>totalline=0<br>if[ $# -lt 2 ];then<br>    usage<br>    exit#退出系统，下面的代码不执行<br>fi<br>while [ $# -ne 0]#参数个数不等于0<br>do<br>line=<code>cat $1|wc -l</code><br>echo “$1:${line}”<br>totalline=$[$totalline+$line]<br>shift#调用shift时$#(参数个数)也跟着减1<br>done<br>echo “———–”<br>echo “total:${totalline}”</p>\n<p>getopts获得多个命令行参数</p>\n<p>#!/bin/bash<br>ALL=false<br>HELP=false<br>FILE=false<br>VERBOSE=false<br>while getopts ahfvc OPTION<br>do<br>    case $OPTION in<br>    a)<br>        ALL=true<br>        echo “ALL IS $ALL”<br>        ;;<br>    h)<br>        HELP=true<br>        echo “HELP is $HELP”<br>        ;;<br>    f)<br>        FILE=true<br>        echo “FILE is $FILE”<br>        ;;<br>    v)<br>        VERBOSE=true<br>        echo “VERBOSE is $VERBOSE”<br>        ;;<br>    c)<br>        echo “c value is $c”<br>        ;;<br>    \\?)<br>        echo “<code>basename $0</code> -[a h f v] -[c value] file “<br>        ;;<br>    esac<br>done</p>\n"},{"title":"Git 常用命令小结","comments":1,"date":"2018-08-22T01:23:26.000Z","updated":"2018-08-22T01:23:26.000Z","_content":"## 前言\n\n阅读本篇文章需要读者了解 Git 的基本用法，如果你对 Git 完全不了解，请先行移步了解 Git 基础。\n下面是几份本人觉得不错的 Git 入门教程，新手可以参考。\n- [Git权威指南](http://www.worldhello.net/gotgit/index.html) | 国内一位大牛写的介绍 Git 用法的开源书籍，很详实\n- [Pro Git](https://git-scm.com/book/zh/v2) | Git 官方社区编著的介绍 Git 用法的书籍\n\n#### 创建新分支，并且切换到新分支\n```bash\n> git checkout -b <new_branch_name> # 根据当前所在分支，创建新分支\n> git checkout -b <new_branch_name> <remote_name>/<remote_branch_name> # 根据远程分支，创建分支\n```\n#### 切换分支\n\n`> git checkout <branch_name>`\n\n#### 删除分支（本地/远程）\n\n```bash\n> git branch -d <branch_name> # 删除本地分支，当该分支没有关联远程分支或者关联的远程分支已经合并过，才会被允许删除\n> git branch -D <branch_name> # 强制删除本地分支\n> git push <remote_name> -d <branch_name> # 删除远程分支，git v1.7.0（2010年的版本）之后支持\n> git push <remote_name> :<branch_name> # 删除远程分支，旧方式，新的也兼容这种\n\n```\n\n分支重命名\n\n```bash\n> git branch (-m | -M) [<oldbranch>] <newbranch> # 重命名分支语法，-M 强制重命名，具体参见 git branch --help\n> git branch -m <newbranch> # 重命名当前分支\n> git branch -m <oldbranch> <newbranch> # 重命名指定分支\n\n```\n\n重写 commit 信息\n\n```bash\n> git rebase -i HEAD~<num> # 交互式地重写 commit 信息，将会用终端默认的编辑器进行操作\n\n下面的例子中，保存之后，将会使得[328f67b Update Rust]这一条合并到[f55b189 Update cookbook]\n\npick 164bf1c Update cookbook\npick f55b189 Update cookbook\nf 328f67b Update Rust\npick 9834843 Update cookbook\n\n# Rebase 0b6762c..9834843 onto 0b6762c (4 commands)\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n\n```\n\n> 注意：最好不要重写公共的 commit 信息，这会给协作者带来不必要的困惑，推荐仅仅重写本地没有提交的 commit 信息。假设，你非得重写远程 commit 信息，请使用 git push -f 来强制更新远程代码。\n\n#### 从一个分支摘取 commit 到另一个分支\n\n```bash\n> git checkout <target-branch> # 切换到目标分支\n> git cherry-pick <commit_id> # 将源分支的 commit 摘取到目的分支中\n```\n\n#### 想要切换分支时，发现本地有一些写了一半的代码\n\n```bash\n> git stash # 将当前工作目录内容储藏\n> git stash --include-untracked # 如果新添加了文件，将其一并储藏\n> git stash pop # 将储藏的内容恢复到当前分支\n```\n\n#### 回版、撤销commit\n\n```bash\n> git reset --hard <commit_id> # 彻底回退到指定 commit\n```\n\n![img](2018-08-22-Git-changyongmingling\\726930-5079e6da8900d0e2.jpg) \n\n#### 丢弃本地新添加的文件\n\n`> git clean `\n\n#### 丢弃新的改动\n\n`> git checkout . # 注意末尾有个句号`\n\n## 参考资料\n\n- [Git权威指南](http://www.worldhello.net/gotgit/index.html) \n\n- [Pro Git](https://git-scm.com/book/zh/v2)\n\n- Git cheatsheet\n\n- 图解Git\n\n\n转载：本文非原创转载[简书](https://www.jianshu.com/p/15e3a4873d1d)","source":"_posts/2018-08-22-Git-changyongmingling.md","raw":"---\ntitle: Git 常用命令小结\ncomments: true\ndate: 2018-08-22 09:23:26\nupdated: 2018-08-22 09:23:26\ntags: [Git,版本控制]\ncategories: \n- Program \n- Git\n---\n## 前言\n\n阅读本篇文章需要读者了解 Git 的基本用法，如果你对 Git 完全不了解，请先行移步了解 Git 基础。\n下面是几份本人觉得不错的 Git 入门教程，新手可以参考。\n- [Git权威指南](http://www.worldhello.net/gotgit/index.html) | 国内一位大牛写的介绍 Git 用法的开源书籍，很详实\n- [Pro Git](https://git-scm.com/book/zh/v2) | Git 官方社区编著的介绍 Git 用法的书籍\n\n#### 创建新分支，并且切换到新分支\n```bash\n> git checkout -b <new_branch_name> # 根据当前所在分支，创建新分支\n> git checkout -b <new_branch_name> <remote_name>/<remote_branch_name> # 根据远程分支，创建分支\n```\n#### 切换分支\n\n`> git checkout <branch_name>`\n\n#### 删除分支（本地/远程）\n\n```bash\n> git branch -d <branch_name> # 删除本地分支，当该分支没有关联远程分支或者关联的远程分支已经合并过，才会被允许删除\n> git branch -D <branch_name> # 强制删除本地分支\n> git push <remote_name> -d <branch_name> # 删除远程分支，git v1.7.0（2010年的版本）之后支持\n> git push <remote_name> :<branch_name> # 删除远程分支，旧方式，新的也兼容这种\n\n```\n\n分支重命名\n\n```bash\n> git branch (-m | -M) [<oldbranch>] <newbranch> # 重命名分支语法，-M 强制重命名，具体参见 git branch --help\n> git branch -m <newbranch> # 重命名当前分支\n> git branch -m <oldbranch> <newbranch> # 重命名指定分支\n\n```\n\n重写 commit 信息\n\n```bash\n> git rebase -i HEAD~<num> # 交互式地重写 commit 信息，将会用终端默认的编辑器进行操作\n\n下面的例子中，保存之后，将会使得[328f67b Update Rust]这一条合并到[f55b189 Update cookbook]\n\npick 164bf1c Update cookbook\npick f55b189 Update cookbook\nf 328f67b Update Rust\npick 9834843 Update cookbook\n\n# Rebase 0b6762c..9834843 onto 0b6762c (4 commands)\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n# s, squash = use commit, but meld into previous commit\n# f, fixup = like \"squash\", but discard this commit's log message\n# x, exec = run command (the rest of the line) using shell\n# d, drop = remove commit\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n\n```\n\n> 注意：最好不要重写公共的 commit 信息，这会给协作者带来不必要的困惑，推荐仅仅重写本地没有提交的 commit 信息。假设，你非得重写远程 commit 信息，请使用 git push -f 来强制更新远程代码。\n\n#### 从一个分支摘取 commit 到另一个分支\n\n```bash\n> git checkout <target-branch> # 切换到目标分支\n> git cherry-pick <commit_id> # 将源分支的 commit 摘取到目的分支中\n```\n\n#### 想要切换分支时，发现本地有一些写了一半的代码\n\n```bash\n> git stash # 将当前工作目录内容储藏\n> git stash --include-untracked # 如果新添加了文件，将其一并储藏\n> git stash pop # 将储藏的内容恢复到当前分支\n```\n\n#### 回版、撤销commit\n\n```bash\n> git reset --hard <commit_id> # 彻底回退到指定 commit\n```\n\n![img](2018-08-22-Git-changyongmingling\\726930-5079e6da8900d0e2.jpg) \n\n#### 丢弃本地新添加的文件\n\n`> git clean `\n\n#### 丢弃新的改动\n\n`> git checkout . # 注意末尾有个句号`\n\n## 参考资料\n\n- [Git权威指南](http://www.worldhello.net/gotgit/index.html) \n\n- [Pro Git](https://git-scm.com/book/zh/v2)\n\n- Git cheatsheet\n\n- 图解Git\n\n\n转载：本文非原创转载[简书](https://www.jianshu.com/p/15e3a4873d1d)","slug":"Git-changyongmingling","published":1,"layout":"post","photos":[],"link":"","_id":"cjl7q8kht0009l8lrswd44z39","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>阅读本篇文章需要读者了解 Git 的基本用法，如果你对 Git 完全不了解，请先行移步了解 Git 基础。<br>下面是几份本人觉得不错的 Git 入门教程，新手可以参考。</p>\n<ul>\n<li><a href=\"http://www.worldhello.net/gotgit/index.html\" target=\"_blank\" rel=\"noopener\">Git权威指南</a> | 国内一位大牛写的介绍 Git 用法的开源书籍，很详实</li>\n<li><a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">Pro Git</a> | Git 官方社区编著的介绍 Git 用法的书籍</li>\n</ul>\n<h4 id=\"创建新分支，并且切换到新分支\"><a href=\"#创建新分支，并且切换到新分支\" class=\"headerlink\" title=\"创建新分支，并且切换到新分支\"></a>创建新分支，并且切换到新分支</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git checkout -b &lt;new_branch_name&gt; <span class=\"comment\"># 根据当前所在分支，创建新分支</span></span><br><span class=\"line\">&gt; git checkout -b &lt;new_branch_name&gt; &lt;remote_name&gt;/&lt;remote_branch_name&gt; <span class=\"comment\"># 根据远程分支，创建分支</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h4><p><code>&gt; git checkout &lt;branch_name&gt;</code></p>\n<h4 id=\"删除分支（本地-远程）\"><a href=\"#删除分支（本地-远程）\" class=\"headerlink\" title=\"删除分支（本地/远程）\"></a>删除分支（本地/远程）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git branch -d &lt;branch_name&gt; <span class=\"comment\"># 删除本地分支，当该分支没有关联远程分支或者关联的远程分支已经合并过，才会被允许删除</span></span><br><span class=\"line\">&gt; git branch -D &lt;branch_name&gt; <span class=\"comment\"># 强制删除本地分支</span></span><br><span class=\"line\">&gt; git push &lt;remote_name&gt; -d &lt;branch_name&gt; <span class=\"comment\"># 删除远程分支，git v1.7.0（2010年的版本）之后支持</span></span><br><span class=\"line\">&gt; git push &lt;remote_name&gt; :&lt;branch_name&gt; <span class=\"comment\"># 删除远程分支，旧方式，新的也兼容这种</span></span><br></pre></td></tr></table></figure>\n<p>分支重命名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git branch (-m | -M) [&lt;oldbranch&gt;] &lt;newbranch&gt; <span class=\"comment\"># 重命名分支语法，-M 强制重命名，具体参见 git branch --help</span></span><br><span class=\"line\">&gt; git branch -m &lt;newbranch&gt; <span class=\"comment\"># 重命名当前分支</span></span><br><span class=\"line\">&gt; git branch -m &lt;oldbranch&gt; &lt;newbranch&gt; <span class=\"comment\"># 重命名指定分支</span></span><br></pre></td></tr></table></figure>\n<p>重写 commit 信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git rebase -i HEAD~&lt;num&gt; <span class=\"comment\"># 交互式地重写 commit 信息，将会用终端默认的编辑器进行操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">下面的例子中，保存之后，将会使得[328f67b Update Rust]这一条合并到[f55b189 Update cookbook]</span><br><span class=\"line\"></span><br><span class=\"line\">pick 164bf1c Update cookbook</span><br><span class=\"line\">pick f55b189 Update cookbook</span><br><span class=\"line\">f 328f67b Update Rust</span><br><span class=\"line\">pick 9834843 Update cookbook</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Rebase 0b6762c..9834843 onto 0b6762c (4 commands)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Commands:</span></span><br><span class=\"line\"><span class=\"comment\"># p, pick = use commit</span></span><br><span class=\"line\"><span class=\"comment\"># r, reword = use commit, but edit the commit message</span></span><br><span class=\"line\"><span class=\"comment\"># e, edit = use commit, but stop for amending</span></span><br><span class=\"line\"><span class=\"comment\"># s, squash = use commit, but meld into previous commit</span></span><br><span class=\"line\"><span class=\"comment\"># f, fixup = like \"squash\", but discard this commit's log message</span></span><br><span class=\"line\"><span class=\"comment\"># x, exec = run command (the rest of the line) using shell</span></span><br><span class=\"line\"><span class=\"comment\"># d, drop = remove commit</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Note that empty commits are commented out</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：最好不要重写公共的 commit 信息，这会给协作者带来不必要的困惑，推荐仅仅重写本地没有提交的 commit 信息。假设，你非得重写远程 commit 信息，请使用 git push -f 来强制更新远程代码。</p>\n</blockquote>\n<h4 id=\"从一个分支摘取-commit-到另一个分支\"><a href=\"#从一个分支摘取-commit-到另一个分支\" class=\"headerlink\" title=\"从一个分支摘取 commit 到另一个分支\"></a>从一个分支摘取 commit 到另一个分支</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git checkout &lt;target-branch&gt; <span class=\"comment\"># 切换到目标分支</span></span><br><span class=\"line\">&gt; git cherry-pick &lt;commit_id&gt; <span class=\"comment\"># 将源分支的 commit 摘取到目的分支中</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"想要切换分支时，发现本地有一些写了一半的代码\"><a href=\"#想要切换分支时，发现本地有一些写了一半的代码\" class=\"headerlink\" title=\"想要切换分支时，发现本地有一些写了一半的代码\"></a>想要切换分支时，发现本地有一些写了一半的代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git stash <span class=\"comment\"># 将当前工作目录内容储藏</span></span><br><span class=\"line\">&gt; git stash --include-untracked <span class=\"comment\"># 如果新添加了文件，将其一并储藏</span></span><br><span class=\"line\">&gt; git stash pop <span class=\"comment\"># 将储藏的内容恢复到当前分支</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"回版、撤销commit\"><a href=\"#回版、撤销commit\" class=\"headerlink\" title=\"回版、撤销commit\"></a>回版、撤销commit</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git reset --hard &lt;commit_id&gt; <span class=\"comment\"># 彻底回退到指定 commit</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"2018-08-22-Git-changyongmingling\\726930-5079e6da8900d0e2.jpg\" alt=\"img\"> </p>\n<h4 id=\"丢弃本地新添加的文件\"><a href=\"#丢弃本地新添加的文件\" class=\"headerlink\" title=\"丢弃本地新添加的文件\"></a>丢弃本地新添加的文件</h4><p><code>&gt; git clean</code></p>\n<h4 id=\"丢弃新的改动\"><a href=\"#丢弃新的改动\" class=\"headerlink\" title=\"丢弃新的改动\"></a>丢弃新的改动</h4><p><code>&gt; git checkout . # 注意末尾有个句号</code></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><p><a href=\"http://www.worldhello.net/gotgit/index.html\" target=\"_blank\" rel=\"noopener\">Git权威指南</a> </p>\n</li>\n<li><p><a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">Pro Git</a></p>\n</li>\n<li><p>Git cheatsheet</p>\n</li>\n<li><p>图解Git</p>\n</li>\n</ul>\n<p>转载：本文非原创转载<a href=\"https://www.jianshu.com/p/15e3a4873d1d\" target=\"_blank\" rel=\"noopener\">简书</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>阅读本篇文章需要读者了解 Git 的基本用法，如果你对 Git 完全不了解，请先行移步了解 Git 基础。<br>下面是几份本人觉得不错的 Git 入门教程，新手可以参考。</p>\n<ul>\n<li><a href=\"http://www.worldhello.net/gotgit/index.html\" target=\"_blank\" rel=\"noopener\">Git权威指南</a> | 国内一位大牛写的介绍 Git 用法的开源书籍，很详实</li>\n<li><a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">Pro Git</a> | Git 官方社区编著的介绍 Git 用法的书籍</li>\n</ul>\n<h4 id=\"创建新分支，并且切换到新分支\"><a href=\"#创建新分支，并且切换到新分支\" class=\"headerlink\" title=\"创建新分支，并且切换到新分支\"></a>创建新分支，并且切换到新分支</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git checkout -b &lt;new_branch_name&gt; <span class=\"comment\"># 根据当前所在分支，创建新分支</span></span><br><span class=\"line\">&gt; git checkout -b &lt;new_branch_name&gt; &lt;remote_name&gt;/&lt;remote_branch_name&gt; <span class=\"comment\"># 根据远程分支，创建分支</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h4><p><code>&gt; git checkout &lt;branch_name&gt;</code></p>\n<h4 id=\"删除分支（本地-远程）\"><a href=\"#删除分支（本地-远程）\" class=\"headerlink\" title=\"删除分支（本地/远程）\"></a>删除分支（本地/远程）</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git branch -d &lt;branch_name&gt; <span class=\"comment\"># 删除本地分支，当该分支没有关联远程分支或者关联的远程分支已经合并过，才会被允许删除</span></span><br><span class=\"line\">&gt; git branch -D &lt;branch_name&gt; <span class=\"comment\"># 强制删除本地分支</span></span><br><span class=\"line\">&gt; git push &lt;remote_name&gt; -d &lt;branch_name&gt; <span class=\"comment\"># 删除远程分支，git v1.7.0（2010年的版本）之后支持</span></span><br><span class=\"line\">&gt; git push &lt;remote_name&gt; :&lt;branch_name&gt; <span class=\"comment\"># 删除远程分支，旧方式，新的也兼容这种</span></span><br></pre></td></tr></table></figure>\n<p>分支重命名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git branch (-m | -M) [&lt;oldbranch&gt;] &lt;newbranch&gt; <span class=\"comment\"># 重命名分支语法，-M 强制重命名，具体参见 git branch --help</span></span><br><span class=\"line\">&gt; git branch -m &lt;newbranch&gt; <span class=\"comment\"># 重命名当前分支</span></span><br><span class=\"line\">&gt; git branch -m &lt;oldbranch&gt; &lt;newbranch&gt; <span class=\"comment\"># 重命名指定分支</span></span><br></pre></td></tr></table></figure>\n<p>重写 commit 信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git rebase -i HEAD~&lt;num&gt; <span class=\"comment\"># 交互式地重写 commit 信息，将会用终端默认的编辑器进行操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">下面的例子中，保存之后，将会使得[328f67b Update Rust]这一条合并到[f55b189 Update cookbook]</span><br><span class=\"line\"></span><br><span class=\"line\">pick 164bf1c Update cookbook</span><br><span class=\"line\">pick f55b189 Update cookbook</span><br><span class=\"line\">f 328f67b Update Rust</span><br><span class=\"line\">pick 9834843 Update cookbook</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Rebase 0b6762c..9834843 onto 0b6762c (4 commands)</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Commands:</span></span><br><span class=\"line\"><span class=\"comment\"># p, pick = use commit</span></span><br><span class=\"line\"><span class=\"comment\"># r, reword = use commit, but edit the commit message</span></span><br><span class=\"line\"><span class=\"comment\"># e, edit = use commit, but stop for amending</span></span><br><span class=\"line\"><span class=\"comment\"># s, squash = use commit, but meld into previous commit</span></span><br><span class=\"line\"><span class=\"comment\"># f, fixup = like \"squash\", but discard this commit's log message</span></span><br><span class=\"line\"><span class=\"comment\"># x, exec = run command (the rest of the line) using shell</span></span><br><span class=\"line\"><span class=\"comment\"># d, drop = remove commit</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Note that empty commits are commented out</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：最好不要重写公共的 commit 信息，这会给协作者带来不必要的困惑，推荐仅仅重写本地没有提交的 commit 信息。假设，你非得重写远程 commit 信息，请使用 git push -f 来强制更新远程代码。</p>\n</blockquote>\n<h4 id=\"从一个分支摘取-commit-到另一个分支\"><a href=\"#从一个分支摘取-commit-到另一个分支\" class=\"headerlink\" title=\"从一个分支摘取 commit 到另一个分支\"></a>从一个分支摘取 commit 到另一个分支</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git checkout &lt;target-branch&gt; <span class=\"comment\"># 切换到目标分支</span></span><br><span class=\"line\">&gt; git cherry-pick &lt;commit_id&gt; <span class=\"comment\"># 将源分支的 commit 摘取到目的分支中</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"想要切换分支时，发现本地有一些写了一半的代码\"><a href=\"#想要切换分支时，发现本地有一些写了一半的代码\" class=\"headerlink\" title=\"想要切换分支时，发现本地有一些写了一半的代码\"></a>想要切换分支时，发现本地有一些写了一半的代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git stash <span class=\"comment\"># 将当前工作目录内容储藏</span></span><br><span class=\"line\">&gt; git stash --include-untracked <span class=\"comment\"># 如果新添加了文件，将其一并储藏</span></span><br><span class=\"line\">&gt; git stash pop <span class=\"comment\"># 将储藏的内容恢复到当前分支</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"回版、撤销commit\"><a href=\"#回版、撤销commit\" class=\"headerlink\" title=\"回版、撤销commit\"></a>回版、撤销commit</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; git reset --hard &lt;commit_id&gt; <span class=\"comment\"># 彻底回退到指定 commit</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"2018-08-22-Git-changyongmingling\\726930-5079e6da8900d0e2.jpg\" alt=\"img\"> </p>\n<h4 id=\"丢弃本地新添加的文件\"><a href=\"#丢弃本地新添加的文件\" class=\"headerlink\" title=\"丢弃本地新添加的文件\"></a>丢弃本地新添加的文件</h4><p><code>&gt; git clean</code></p>\n<h4 id=\"丢弃新的改动\"><a href=\"#丢弃新的改动\" class=\"headerlink\" title=\"丢弃新的改动\"></a>丢弃新的改动</h4><p><code>&gt; git checkout . # 注意末尾有个句号</code></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><p><a href=\"http://www.worldhello.net/gotgit/index.html\" target=\"_blank\" rel=\"noopener\">Git权威指南</a> </p>\n</li>\n<li><p><a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">Pro Git</a></p>\n</li>\n<li><p>Git cheatsheet</p>\n</li>\n<li><p>图解Git</p>\n</li>\n</ul>\n<p>转载：本文非原创转载<a href=\"https://www.jianshu.com/p/15e3a4873d1d\" target=\"_blank\" rel=\"noopener\">简书</a></p>\n"},{"title":"Winddows bat 基础","date":"2018-08-20T03:13:56.000Z","_content":"\n### bat语法\n\n```cmd\ncd  ./RptFile/%Today%\ndir /B /A-D .\\end.ok 2>nul | find /V /C \"\">D:/TT/count.txt\nset /P c=<D:/TT/count.txt\necho END.OK   %c%个\n```\n\n```cmd\n::此脚本用来统计目录下文件与文件夹个数 与wind属性相似。\n::把D:\\putty替换成统计目录\n\n@echo off&title limq @ BAT-GO  At:2010-09-19 12:23:59\nset Today=%Date:~0,4%%Date:~5,2%%Date:~8,2%\necho 今天是%Today%下面开始统计文件\necho 统计中~~~\nfor /f \"delims=\" %%a in ('dir /s/b/a-d D:\\putty ') do set/a a+=1\nfor /f \"delims=\" %%a in ('dir /s/b/ad  D:\\putty ') do set/a b+=1\nset /p=【D:\\putty 】文件夹内有 %b% 个文件夹， %a% 个文件，<nul&pause\n```\n例子1：\n`for /r %%i in (  ) do echo %%i`\n解释：\n如果在括号里的是一些无特殊意义的字符如\".\"  \"abc\"之类的， 那输出的%%i\n的值为遍历到的文件夹的绝对地址（地址带有\\号）后加上这些特殊字符。\n\n如果括号里的是含有通配符（* ？）的，那么不是像上边那样直接加在文件夹地址后了。含有通配符的字符串会被扩展成实际存在的文件名。\n比如 `for /r %%i in (1.t*t) do echo %%i` 这个代码将显示所有符合要求（比如 1.txt 1.tt 1.tst）的文件的绝对路径。\n\n\n\n例子2：\n`for /d /r %%i in ( ) do echo %%i`\n解释：\n第一种情况和上面相似，直接把字符加在路径后面。\n\n如果含有通配符的，那么它将显示所有的文件夹名符合通配规则的文件夹的绝对路径，同时去掉\\号。\n\nps：\n\n例子1的代码会把当前目录和子目录显示出来，而例子2只显示当前目录的子目录。\n例子1显示的结果可以看成是文件，而例子2显示的结果则应该看成是文件夹，因为有/d 的存在。\n如果输出的%%i格式达不到要求，还可以用%%~fi 之类的修正。","source":"_posts/batjichu.md","raw":"---\ntitle: Winddows bat 基础\ndate: 2018-08-20 11:13:56\ntags: [bat, Windows]\ncategories: \n- Program \n- bat\n---\n\n### bat语法\n\n```cmd\ncd  ./RptFile/%Today%\ndir /B /A-D .\\end.ok 2>nul | find /V /C \"\">D:/TT/count.txt\nset /P c=<D:/TT/count.txt\necho END.OK   %c%个\n```\n\n```cmd\n::此脚本用来统计目录下文件与文件夹个数 与wind属性相似。\n::把D:\\putty替换成统计目录\n\n@echo off&title limq @ BAT-GO  At:2010-09-19 12:23:59\nset Today=%Date:~0,4%%Date:~5,2%%Date:~8,2%\necho 今天是%Today%下面开始统计文件\necho 统计中~~~\nfor /f \"delims=\" %%a in ('dir /s/b/a-d D:\\putty ') do set/a a+=1\nfor /f \"delims=\" %%a in ('dir /s/b/ad  D:\\putty ') do set/a b+=1\nset /p=【D:\\putty 】文件夹内有 %b% 个文件夹， %a% 个文件，<nul&pause\n```\n例子1：\n`for /r %%i in (  ) do echo %%i`\n解释：\n如果在括号里的是一些无特殊意义的字符如\".\"  \"abc\"之类的， 那输出的%%i\n的值为遍历到的文件夹的绝对地址（地址带有\\号）后加上这些特殊字符。\n\n如果括号里的是含有通配符（* ？）的，那么不是像上边那样直接加在文件夹地址后了。含有通配符的字符串会被扩展成实际存在的文件名。\n比如 `for /r %%i in (1.t*t) do echo %%i` 这个代码将显示所有符合要求（比如 1.txt 1.tt 1.tst）的文件的绝对路径。\n\n\n\n例子2：\n`for /d /r %%i in ( ) do echo %%i`\n解释：\n第一种情况和上面相似，直接把字符加在路径后面。\n\n如果含有通配符的，那么它将显示所有的文件夹名符合通配规则的文件夹的绝对路径，同时去掉\\号。\n\nps：\n\n例子1的代码会把当前目录和子目录显示出来，而例子2只显示当前目录的子目录。\n例子1显示的结果可以看成是文件，而例子2显示的结果则应该看成是文件夹，因为有/d 的存在。\n如果输出的%%i格式达不到要求，还可以用%%~fi 之类的修正。","slug":"batjichu","published":1,"updated":"2018-08-24T06:40:04.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7q8khv000dl8lr3w7osmi1","content":"<h3 id=\"bat语法\"><a href=\"#bat语法\" class=\"headerlink\" title=\"bat语法\"></a>bat语法</h3><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span>  ./RptFile/<span class=\"variable\">%Today%</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> /B /A-D .\\end.ok <span class=\"number\">2</span>&gt;<span class=\"built_in\">nul</span> | <span class=\"built_in\">find</span> /V /C \"\"&gt;D:/TT/count.txt</span><br><span class=\"line\"><span class=\"built_in\">set</span> /P c=&lt;D:/TT/count.txt</span><br><span class=\"line\"><span class=\"built_in\">echo</span> END.OK   <span class=\"variable\">%c%</span>个</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">::此脚本用来统计目录下文件与文件夹个数 与wind属性相似。</span><br><span class=\"line\">::把D:\\putty替换成统计目录</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"built_in\">echo</span> off&amp;<span class=\"built_in\">title</span> limq @ BAT-GO  <span class=\"built_in\">At</span>:<span class=\"number\">2010</span>-<span class=\"number\">09</span>-<span class=\"number\">19</span> <span class=\"number\">12</span>:<span class=\"number\">23</span>:<span class=\"number\">59</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> Today=<span class=\"variable\">%Date:~0,4%</span><span class=\"variable\">%Date:~5,2%</span><span class=\"variable\">%Date:~8,2%</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 今天是<span class=\"variable\">%Today%</span>下面开始统计文件</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 统计中~~~</span><br><span class=\"line\"><span class=\"keyword\">for</span> /f \"delims=\" <span class=\"variable\">%%a</span> <span class=\"keyword\">in</span> ('<span class=\"built_in\">dir</span> /s/b/a-d D:\\putty ') <span class=\"keyword\">do</span> <span class=\"built_in\">set</span>/a a+=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> /f \"delims=\" <span class=\"variable\">%%a</span> <span class=\"keyword\">in</span> ('<span class=\"built_in\">dir</span> /s/b/ad  D:\\putty ') <span class=\"keyword\">do</span> <span class=\"built_in\">set</span>/a b+=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> /p=【D:\\putty 】文件夹内有 <span class=\"variable\">%b%</span> 个文件夹， <span class=\"variable\">%a%</span> 个文件，&lt;<span class=\"built_in\">nul</span>&amp;<span class=\"built_in\">pause</span></span><br></pre></td></tr></table></figure>\n<p>例子1：<br><code>for /r %%i in (  ) do echo %%i</code><br>解释：<br>如果在括号里的是一些无特殊意义的字符如”.”  “abc”之类的， 那输出的%%i<br>的值为遍历到的文件夹的绝对地址（地址带有\\号）后加上这些特殊字符。</p>\n<p>如果括号里的是含有通配符（<em> ？）的，那么不是像上边那样直接加在文件夹地址后了。含有通配符的字符串会被扩展成实际存在的文件名。<br>比如 `for /r %%i in (1.t</em>t) do echo %%i` 这个代码将显示所有符合要求（比如 1.txt 1.tt 1.tst）的文件的绝对路径。</p>\n<p>例子2：<br><code>for /d /r %%i in ( ) do echo %%i</code><br>解释：<br>第一种情况和上面相似，直接把字符加在路径后面。</p>\n<p>如果含有通配符的，那么它将显示所有的文件夹名符合通配规则的文件夹的绝对路径，同时去掉\\号。</p>\n<p>ps：</p>\n<p>例子1的代码会把当前目录和子目录显示出来，而例子2只显示当前目录的子目录。<br>例子1显示的结果可以看成是文件，而例子2显示的结果则应该看成是文件夹，因为有/d 的存在。<br>如果输出的%%i格式达不到要求，还可以用%%~fi 之类的修正。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"bat语法\"><a href=\"#bat语法\" class=\"headerlink\" title=\"bat语法\"></a>bat语法</h3><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span>  ./RptFile/<span class=\"variable\">%Today%</span></span><br><span class=\"line\"><span class=\"built_in\">dir</span> /B /A-D .\\end.ok <span class=\"number\">2</span>&gt;<span class=\"built_in\">nul</span> | <span class=\"built_in\">find</span> /V /C \"\"&gt;D:/TT/count.txt</span><br><span class=\"line\"><span class=\"built_in\">set</span> /P c=&lt;D:/TT/count.txt</span><br><span class=\"line\"><span class=\"built_in\">echo</span> END.OK   <span class=\"variable\">%c%</span>个</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">::此脚本用来统计目录下文件与文件夹个数 与wind属性相似。</span><br><span class=\"line\">::把D:\\putty替换成统计目录</span><br><span class=\"line\"></span><br><span class=\"line\">@<span class=\"built_in\">echo</span> off&amp;<span class=\"built_in\">title</span> limq @ BAT-GO  <span class=\"built_in\">At</span>:<span class=\"number\">2010</span>-<span class=\"number\">09</span>-<span class=\"number\">19</span> <span class=\"number\">12</span>:<span class=\"number\">23</span>:<span class=\"number\">59</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> Today=<span class=\"variable\">%Date:~0,4%</span><span class=\"variable\">%Date:~5,2%</span><span class=\"variable\">%Date:~8,2%</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 今天是<span class=\"variable\">%Today%</span>下面开始统计文件</span><br><span class=\"line\"><span class=\"built_in\">echo</span> 统计中~~~</span><br><span class=\"line\"><span class=\"keyword\">for</span> /f \"delims=\" <span class=\"variable\">%%a</span> <span class=\"keyword\">in</span> ('<span class=\"built_in\">dir</span> /s/b/a-d D:\\putty ') <span class=\"keyword\">do</span> <span class=\"built_in\">set</span>/a a+=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> /f \"delims=\" <span class=\"variable\">%%a</span> <span class=\"keyword\">in</span> ('<span class=\"built_in\">dir</span> /s/b/ad  D:\\putty ') <span class=\"keyword\">do</span> <span class=\"built_in\">set</span>/a b+=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> /p=【D:\\putty 】文件夹内有 <span class=\"variable\">%b%</span> 个文件夹， <span class=\"variable\">%a%</span> 个文件，&lt;<span class=\"built_in\">nul</span>&amp;<span class=\"built_in\">pause</span></span><br></pre></td></tr></table></figure>\n<p>例子1：<br><code>for /r %%i in (  ) do echo %%i</code><br>解释：<br>如果在括号里的是一些无特殊意义的字符如”.”  “abc”之类的， 那输出的%%i<br>的值为遍历到的文件夹的绝对地址（地址带有\\号）后加上这些特殊字符。</p>\n<p>如果括号里的是含有通配符（<em> ？）的，那么不是像上边那样直接加在文件夹地址后了。含有通配符的字符串会被扩展成实际存在的文件名。<br>比如 `for /r %%i in (1.t</em>t) do echo %%i` 这个代码将显示所有符合要求（比如 1.txt 1.tt 1.tst）的文件的绝对路径。</p>\n<p>例子2：<br><code>for /d /r %%i in ( ) do echo %%i</code><br>解释：<br>第一种情况和上面相似，直接把字符加在路径后面。</p>\n<p>如果含有通配符的，那么它将显示所有的文件夹名符合通配规则的文件夹的绝对路径，同时去掉\\号。</p>\n<p>ps：</p>\n<p>例子1的代码会把当前目录和子目录显示出来，而例子2只显示当前目录的子目录。<br>例子1显示的结果可以看成是文件，而例子2显示的结果则应该看成是文件夹，因为有/d 的存在。<br>如果输出的%%i格式达不到要求，还可以用%%~fi 之类的修正。</p>\n"},{"title":"git基础配置命令","date":"2018-08-20T03:13:56.000Z","_content":"\n\n\n\n\n### 关于版本控制\n\n什么是“版本控制”？我为什么要关心它呢？ 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 在本书所展示的例子中，我们对保存着软件源代码的文件作版本控制，但实际上，你可以对任何类型的文件进行版本控制。 Git 就是一种版本控制工具。Git 自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。 它的速度飞快，极其适合管理大项目，有着令人难以置信的非线性分支管理系统（参见 [Git 分支](https://git-scm.com/book/zh/v2/ch00/ch03-git-branching)）。 \n\n### 命令行\n\nGit 有多种使用方式。 你可以使用原生的命令行模式，也可以使用 GUI 模式，这些 GUI 软件也能提供多种功能。 \n\n假如你是 Mac 用户，我们希望你懂得如何使用终端（Terminal）；假如你是 Windows 用户，我们希望你懂得如何使用命令窗口（Command Prompt）或 PowerShell。 如果你尚未掌握以上技能，我们建议你先停下来快速学习一下，本文讲述和举例将用到这些技能。\n\n### 安装 Git\n\n在你开始使用 Git 前，需要将它安装在你的计算机上。 即便已经安装，最好将它升级到最新的版本。 你可以通过软件包或者其它安装程序来安装，或者下载源码编译安装。 \n\n#### 在 Windows 上安装\n\n在 Windows 上安装 Git 也有几种安装方法。 官方版本可以在 Git 官方网站下载。 打开 [Downloading Git](http://git-scm.com/download/win)，下载会自动开始。 要注意这是一个名为 Git for Windows的项目（也叫做 msysGit），和 Git 是分别独立的项目；更多信息请访问 <http://msysgit.github.io/>。 \n\n### git基础配置\n\n\n安装完成 git 后需要做一些配置就可以使用 git 托管代码带 GitHub 上面了。开始使用 Git, 打开 开始 > 所有程序 > Git > git-bash。这样就进入的 GIt 的命令行。\n\n```bash\n# git 初始配置\ngit config --global user.name \"limq-debianvm-home\"\ngit config --global user.email \"gylimingqi@163.com\"\ngit config --global push.default simple\n# git 添加远程分支\ngit remote add origin git@github.com:dadiqq/nework-git.git\ngit remote add origin_soft  git@github.com:dadiqq/software.git\n#创建 ssh-key\n[root@ora11g ~]# mkdir .ssh\n[root@ora11g ~]# cd .ssh/\n #用ssh-keygen命令来生成密钥对，passphrase我们输入或不输入都行。\n[root@ora11g .ssh]# ssh-keygen -t rsa -C \"gylimigqi@163.com\"\n[root@ora11g .ssh]#ls\n[root@ora11g etl]# echo 'unset SSH_ASKPASS' >> ~/.bashrc && source ~/.bashrc\n\ngit clone https://github.com/dadiqq/nework-git.git   [路径]\ngit clone https://github.com/dadiqq/VFP.git\ngit remote remove <name>\ngit remote -v\n```\n\n### 设置github上的公钥\n#### 步骤如下：\n\n​    a. 登陆github后 -> \"Account Setting\" -> \"SSH Keys\"\n    b. \"Add SSH Key\"\n    c. Title随便填写一个，Key那里我们把把id_rsa.pub里的内容拷贝进去。\n\n### 测试\n\nssh -T git@github.com\n\n### 常用命令 \n\n```bash\n[root@ora11g etl]# echo 'unset SSH_ASKPASS' >> ~/.bashrc && source ~/.bashrc   \n#查看远程库\nenv GIT_SSL_NO_VERIFY=true  \ngit remote show origin\n#下载 GitHub 上项目\nenv GIT_SSL_NO_VERIFY=true   \ngit clone https://github.com/dadiqq/nework-git.git\ngit clone  git@github.com:dadiqq/nework-git.git\ngit clone --no-checkout https://github.com/dadiqq/nework-git.git tmp\n\ngit reset --hard HEAD\ngit push -u origin master\ncurl http://curl.haxx.se/ca/cacert.pem -o /etc/pki/tls/certs/ca-bundle.crt\n```\n\n工作的时候经常需要在各个目录之间跳转，可以通过环境变量对目录进行缩写，方便地在多个目录直接切换。\n在 ~/.bashrc 添加：\n\nexport wd=\"/d/Projects/MyProject/git\"\nexport doc=\"/d/Projects/documents/\"\n\n下面来验证以上的说法。\n创建一个空的项目，\n```bash\n$ mkdir project\n$ cd project\n$ git init\n$ vi  readme    # 添加一行文字并保存，比如“1111”\n$ git add readme\n$ git commit -m \"1st commit\"\n\n此时来看仓库中的对象目录\n\n$ tree .git/objects/\n```\n### 如果我们往一个非空的目录下 clone git 项目，就会提示错误信息：\n\n`fatal: destination path '.' already exists and is not an empty directory.`\n\n#### 解决的办法是：\n```bash\n1. 进入非空目录，假设是 /workdir/proj1\n2. git clone --no-checkout https://git.oschina.net/NextApp/platform.git tmp\n3. mv tmp/.git .   #将 tmp 目录下的 .git 目录移到当前目录\n4. rmdir tmp\n5. git reset --hard HEAD\n```\n然后就可以进行各种正常操作了。\n\n#### 第二方案\n```bash\nls -a  \nrm .git/ -rf \n```\n\n\n- [ ] 跑步\n- [ ] 写博客\n- [ ] 学习\n","source":"_posts/gitjichupeizhi.md","raw":"---\ntitle: git基础配置命令\ndate: 2018-08-20 11:13:56\ntags: [Git,版本控制]\ncategories: \n- Program \n- Git\n---\n\n\n\n\n\n### 关于版本控制\n\n什么是“版本控制”？我为什么要关心它呢？ 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 在本书所展示的例子中，我们对保存着软件源代码的文件作版本控制，但实际上，你可以对任何类型的文件进行版本控制。 Git 就是一种版本控制工具。Git 自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。 它的速度飞快，极其适合管理大项目，有着令人难以置信的非线性分支管理系统（参见 [Git 分支](https://git-scm.com/book/zh/v2/ch00/ch03-git-branching)）。 \n\n### 命令行\n\nGit 有多种使用方式。 你可以使用原生的命令行模式，也可以使用 GUI 模式，这些 GUI 软件也能提供多种功能。 \n\n假如你是 Mac 用户，我们希望你懂得如何使用终端（Terminal）；假如你是 Windows 用户，我们希望你懂得如何使用命令窗口（Command Prompt）或 PowerShell。 如果你尚未掌握以上技能，我们建议你先停下来快速学习一下，本文讲述和举例将用到这些技能。\n\n### 安装 Git\n\n在你开始使用 Git 前，需要将它安装在你的计算机上。 即便已经安装，最好将它升级到最新的版本。 你可以通过软件包或者其它安装程序来安装，或者下载源码编译安装。 \n\n#### 在 Windows 上安装\n\n在 Windows 上安装 Git 也有几种安装方法。 官方版本可以在 Git 官方网站下载。 打开 [Downloading Git](http://git-scm.com/download/win)，下载会自动开始。 要注意这是一个名为 Git for Windows的项目（也叫做 msysGit），和 Git 是分别独立的项目；更多信息请访问 <http://msysgit.github.io/>。 \n\n### git基础配置\n\n\n安装完成 git 后需要做一些配置就可以使用 git 托管代码带 GitHub 上面了。开始使用 Git, 打开 开始 > 所有程序 > Git > git-bash。这样就进入的 GIt 的命令行。\n\n```bash\n# git 初始配置\ngit config --global user.name \"limq-debianvm-home\"\ngit config --global user.email \"gylimingqi@163.com\"\ngit config --global push.default simple\n# git 添加远程分支\ngit remote add origin git@github.com:dadiqq/nework-git.git\ngit remote add origin_soft  git@github.com:dadiqq/software.git\n#创建 ssh-key\n[root@ora11g ~]# mkdir .ssh\n[root@ora11g ~]# cd .ssh/\n #用ssh-keygen命令来生成密钥对，passphrase我们输入或不输入都行。\n[root@ora11g .ssh]# ssh-keygen -t rsa -C \"gylimigqi@163.com\"\n[root@ora11g .ssh]#ls\n[root@ora11g etl]# echo 'unset SSH_ASKPASS' >> ~/.bashrc && source ~/.bashrc\n\ngit clone https://github.com/dadiqq/nework-git.git   [路径]\ngit clone https://github.com/dadiqq/VFP.git\ngit remote remove <name>\ngit remote -v\n```\n\n### 设置github上的公钥\n#### 步骤如下：\n\n​    a. 登陆github后 -> \"Account Setting\" -> \"SSH Keys\"\n    b. \"Add SSH Key\"\n    c. Title随便填写一个，Key那里我们把把id_rsa.pub里的内容拷贝进去。\n\n### 测试\n\nssh -T git@github.com\n\n### 常用命令 \n\n```bash\n[root@ora11g etl]# echo 'unset SSH_ASKPASS' >> ~/.bashrc && source ~/.bashrc   \n#查看远程库\nenv GIT_SSL_NO_VERIFY=true  \ngit remote show origin\n#下载 GitHub 上项目\nenv GIT_SSL_NO_VERIFY=true   \ngit clone https://github.com/dadiqq/nework-git.git\ngit clone  git@github.com:dadiqq/nework-git.git\ngit clone --no-checkout https://github.com/dadiqq/nework-git.git tmp\n\ngit reset --hard HEAD\ngit push -u origin master\ncurl http://curl.haxx.se/ca/cacert.pem -o /etc/pki/tls/certs/ca-bundle.crt\n```\n\n工作的时候经常需要在各个目录之间跳转，可以通过环境变量对目录进行缩写，方便地在多个目录直接切换。\n在 ~/.bashrc 添加：\n\nexport wd=\"/d/Projects/MyProject/git\"\nexport doc=\"/d/Projects/documents/\"\n\n下面来验证以上的说法。\n创建一个空的项目，\n```bash\n$ mkdir project\n$ cd project\n$ git init\n$ vi  readme    # 添加一行文字并保存，比如“1111”\n$ git add readme\n$ git commit -m \"1st commit\"\n\n此时来看仓库中的对象目录\n\n$ tree .git/objects/\n```\n### 如果我们往一个非空的目录下 clone git 项目，就会提示错误信息：\n\n`fatal: destination path '.' already exists and is not an empty directory.`\n\n#### 解决的办法是：\n```bash\n1. 进入非空目录，假设是 /workdir/proj1\n2. git clone --no-checkout https://git.oschina.net/NextApp/platform.git tmp\n3. mv tmp/.git .   #将 tmp 目录下的 .git 目录移到当前目录\n4. rmdir tmp\n5. git reset --hard HEAD\n```\n然后就可以进行各种正常操作了。\n\n#### 第二方案\n```bash\nls -a  \nrm .git/ -rf \n```\n\n\n- [ ] 跑步\n- [ ] 写博客\n- [ ] 学习\n","slug":"gitjichupeizhi","published":1,"updated":"2018-08-24T06:40:04.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7q8khy000el8lrmt2e5er4","content":"<h3 id=\"关于版本控制\"><a href=\"#关于版本控制\" class=\"headerlink\" title=\"关于版本控制\"></a>关于版本控制</h3><p>什么是“版本控制”？我为什么要关心它呢？ 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 在本书所展示的例子中，我们对保存着软件源代码的文件作版本控制，但实际上，你可以对任何类型的文件进行版本控制。 Git 就是一种版本控制工具。Git 自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。 它的速度飞快，极其适合管理大项目，有着令人难以置信的非线性分支管理系统（参见 <a href=\"https://git-scm.com/book/zh/v2/ch00/ch03-git-branching\" target=\"_blank\" rel=\"noopener\">Git 分支</a>）。 </p>\n<h3 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h3><p>Git 有多种使用方式。 你可以使用原生的命令行模式，也可以使用 GUI 模式，这些 GUI 软件也能提供多种功能。 </p>\n<p>假如你是 Mac 用户，我们希望你懂得如何使用终端（Terminal）；假如你是 Windows 用户，我们希望你懂得如何使用命令窗口（Command Prompt）或 PowerShell。 如果你尚未掌握以上技能，我们建议你先停下来快速学习一下，本文讲述和举例将用到这些技能。</p>\n<h3 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h3><p>在你开始使用 Git 前，需要将它安装在你的计算机上。 即便已经安装，最好将它升级到最新的版本。 你可以通过软件包或者其它安装程序来安装，或者下载源码编译安装。 </p>\n<h4 id=\"在-Windows-上安装\"><a href=\"#在-Windows-上安装\" class=\"headerlink\" title=\"在 Windows 上安装\"></a>在 Windows 上安装</h4><p>在 Windows 上安装 Git 也有几种安装方法。 官方版本可以在 Git 官方网站下载。 打开 <a href=\"http://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">Downloading Git</a>，下载会自动开始。 要注意这是一个名为 Git for Windows的项目（也叫做 msysGit），和 Git 是分别独立的项目；更多信息请访问 <a href=\"http://msysgit.github.io/\" target=\"_blank\" rel=\"noopener\">http://msysgit.github.io/</a>。 </p>\n<h3 id=\"git基础配置\"><a href=\"#git基础配置\" class=\"headerlink\" title=\"git基础配置\"></a>git基础配置</h3><p>安装完成 git 后需要做一些配置就可以使用 git 托管代码带 GitHub 上面了。开始使用 Git, 打开 开始 &gt; 所有程序 &gt; Git &gt; git-bash。这样就进入的 GIt 的命令行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git 初始配置</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">\"limq-debianvm-home\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"gylimingqi@163.com\"</span></span><br><span class=\"line\">git config --global push.default simple</span><br><span class=\"line\"><span class=\"comment\"># git 添加远程分支</span></span><br><span class=\"line\">git remote add origin git@github.com:dadiqq/nework-git.git</span><br><span class=\"line\">git remote add origin_soft  git@github.com:dadiqq/software.git</span><br><span class=\"line\"><span class=\"comment\">#创建 ssh-key</span></span><br><span class=\"line\">[root@ora11g ~]<span class=\"comment\"># mkdir .ssh</span></span><br><span class=\"line\">[root@ora11g ~]<span class=\"comment\"># cd .ssh/</span></span><br><span class=\"line\"> <span class=\"comment\">#用ssh-keygen命令来生成密钥对，passphrase我们输入或不输入都行。</span></span><br><span class=\"line\">[root@ora11g .ssh]<span class=\"comment\"># ssh-keygen -t rsa -C \"gylimigqi@163.com\"</span></span><br><span class=\"line\">[root@ora11g .ssh]<span class=\"comment\">#ls</span></span><br><span class=\"line\">[root@ora11g etl]<span class=\"comment\"># echo 'unset SSH_ASKPASS' &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/dadiqq/nework-git.git   [路径]</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/dadiqq/VFP.git</span><br><span class=\"line\">git remote remove &lt;name&gt;</span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置github上的公钥\"><a href=\"#设置github上的公钥\" class=\"headerlink\" title=\"设置github上的公钥\"></a>设置github上的公钥</h3><h4 id=\"步骤如下：\"><a href=\"#步骤如下：\" class=\"headerlink\" title=\"步骤如下：\"></a>步骤如下：</h4><p>​    a. 登陆github后 -&gt; “Account Setting” -&gt; “SSH Keys”<br>    b. “Add SSH Key”<br>    c. Title随便填写一个，Key那里我们把把id_rsa.pub里的内容拷贝进去。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a></p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ora11g etl]<span class=\"comment\"># echo 'unset SSH_ASKPASS' &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc   </span></span><br><span class=\"line\"><span class=\"comment\">#查看远程库</span></span><br><span class=\"line\">env GIT_SSL_NO_VERIFY=<span class=\"literal\">true</span>  </span><br><span class=\"line\">git remote show origin</span><br><span class=\"line\"><span class=\"comment\">#下载 GitHub 上项目</span></span><br><span class=\"line\">env GIT_SSL_NO_VERIFY=<span class=\"literal\">true</span>   </span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/dadiqq/nework-git.git</span><br><span class=\"line\">git <span class=\"built_in\">clone</span>  git@github.com:dadiqq/nework-git.git</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> --no-checkout https://github.com/dadiqq/nework-git.git tmp</span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard HEAD</span><br><span class=\"line\">git push -u origin master</span><br><span class=\"line\">curl http://curl.haxx.se/ca/cacert.pem -o /etc/pki/tls/certs/ca-bundle.crt</span><br></pre></td></tr></table></figure>\n<p>工作的时候经常需要在各个目录之间跳转，可以通过环境变量对目录进行缩写，方便地在多个目录直接切换。<br>在 ~/.bashrc 添加：</p>\n<p>export wd=”/d/Projects/MyProject/git”<br>export doc=”/d/Projects/documents/“</p>\n<p>下面来验证以上的说法。<br>创建一个空的项目，<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir project</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> project</span><br><span class=\"line\">$ git init</span><br><span class=\"line\">$ vi  readme    <span class=\"comment\"># 添加一行文字并保存，比如“1111”</span></span><br><span class=\"line\">$ git add readme</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"1st commit\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">此时来看仓库中的对象目录</span><br><span class=\"line\"></span><br><span class=\"line\">$ tree .git/objects/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"如果我们往一个非空的目录下-clone-git-项目，就会提示错误信息：\"><a href=\"#如果我们往一个非空的目录下-clone-git-项目，就会提示错误信息：\" class=\"headerlink\" title=\"如果我们往一个非空的目录下 clone git 项目，就会提示错误信息：\"></a>如果我们往一个非空的目录下 clone git 项目，就会提示错误信息：</h3><p><code>fatal: destination path &#39;.&#39; already exists and is not an empty directory.</code></p>\n<h4 id=\"解决的办法是：\"><a href=\"#解决的办法是：\" class=\"headerlink\" title=\"解决的办法是：\"></a>解决的办法是：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 进入非空目录，假设是 /workdir/proj1</span><br><span class=\"line\">2. git <span class=\"built_in\">clone</span> --no-checkout https://git.oschina.net/NextApp/platform.git tmp</span><br><span class=\"line\">3. mv tmp/.git .   <span class=\"comment\">#将 tmp 目录下的 .git 目录移到当前目录</span></span><br><span class=\"line\">4. rmdir tmp</span><br><span class=\"line\">5. git reset --hard HEAD</span><br></pre></td></tr></table></figure>\n<p>然后就可以进行各种正常操作了。</p>\n<h4 id=\"第二方案\"><a href=\"#第二方案\" class=\"headerlink\" title=\"第二方案\"></a>第二方案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a  </span><br><span class=\"line\">rm .git/ -rf</span><br></pre></td></tr></table></figure>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 跑步</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 写博客</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 学习</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于版本控制\"><a href=\"#关于版本控制\" class=\"headerlink\" title=\"关于版本控制\"></a>关于版本控制</h3><p>什么是“版本控制”？我为什么要关心它呢？ 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 在本书所展示的例子中，我们对保存着软件源代码的文件作版本控制，但实际上，你可以对任何类型的文件进行版本控制。 Git 就是一种版本控制工具。Git 自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。 它的速度飞快，极其适合管理大项目，有着令人难以置信的非线性分支管理系统（参见 <a href=\"https://git-scm.com/book/zh/v2/ch00/ch03-git-branching\" target=\"_blank\" rel=\"noopener\">Git 分支</a>）。 </p>\n<h3 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h3><p>Git 有多种使用方式。 你可以使用原生的命令行模式，也可以使用 GUI 模式，这些 GUI 软件也能提供多种功能。 </p>\n<p>假如你是 Mac 用户，我们希望你懂得如何使用终端（Terminal）；假如你是 Windows 用户，我们希望你懂得如何使用命令窗口（Command Prompt）或 PowerShell。 如果你尚未掌握以上技能，我们建议你先停下来快速学习一下，本文讲述和举例将用到这些技能。</p>\n<h3 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h3><p>在你开始使用 Git 前，需要将它安装在你的计算机上。 即便已经安装，最好将它升级到最新的版本。 你可以通过软件包或者其它安装程序来安装，或者下载源码编译安装。 </p>\n<h4 id=\"在-Windows-上安装\"><a href=\"#在-Windows-上安装\" class=\"headerlink\" title=\"在 Windows 上安装\"></a>在 Windows 上安装</h4><p>在 Windows 上安装 Git 也有几种安装方法。 官方版本可以在 Git 官方网站下载。 打开 <a href=\"http://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">Downloading Git</a>，下载会自动开始。 要注意这是一个名为 Git for Windows的项目（也叫做 msysGit），和 Git 是分别独立的项目；更多信息请访问 <a href=\"http://msysgit.github.io/\" target=\"_blank\" rel=\"noopener\">http://msysgit.github.io/</a>。 </p>\n<h3 id=\"git基础配置\"><a href=\"#git基础配置\" class=\"headerlink\" title=\"git基础配置\"></a>git基础配置</h3><p>安装完成 git 后需要做一些配置就可以使用 git 托管代码带 GitHub 上面了。开始使用 Git, 打开 开始 &gt; 所有程序 &gt; Git &gt; git-bash。这样就进入的 GIt 的命令行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git 初始配置</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">\"limq-debianvm-home\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"gylimingqi@163.com\"</span></span><br><span class=\"line\">git config --global push.default simple</span><br><span class=\"line\"><span class=\"comment\"># git 添加远程分支</span></span><br><span class=\"line\">git remote add origin git@github.com:dadiqq/nework-git.git</span><br><span class=\"line\">git remote add origin_soft  git@github.com:dadiqq/software.git</span><br><span class=\"line\"><span class=\"comment\">#创建 ssh-key</span></span><br><span class=\"line\">[root@ora11g ~]<span class=\"comment\"># mkdir .ssh</span></span><br><span class=\"line\">[root@ora11g ~]<span class=\"comment\"># cd .ssh/</span></span><br><span class=\"line\"> <span class=\"comment\">#用ssh-keygen命令来生成密钥对，passphrase我们输入或不输入都行。</span></span><br><span class=\"line\">[root@ora11g .ssh]<span class=\"comment\"># ssh-keygen -t rsa -C \"gylimigqi@163.com\"</span></span><br><span class=\"line\">[root@ora11g .ssh]<span class=\"comment\">#ls</span></span><br><span class=\"line\">[root@ora11g etl]<span class=\"comment\"># echo 'unset SSH_ASKPASS' &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc</span></span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/dadiqq/nework-git.git   [路径]</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/dadiqq/VFP.git</span><br><span class=\"line\">git remote remove &lt;name&gt;</span><br><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置github上的公钥\"><a href=\"#设置github上的公钥\" class=\"headerlink\" title=\"设置github上的公钥\"></a>设置github上的公钥</h3><h4 id=\"步骤如下：\"><a href=\"#步骤如下：\" class=\"headerlink\" title=\"步骤如下：\"></a>步骤如下：</h4><p>​    a. 登陆github后 -&gt; “Account Setting” -&gt; “SSH Keys”<br>    b. “Add SSH Key”<br>    c. Title随便填写一个，Key那里我们把把id_rsa.pub里的内容拷贝进去。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a></p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@ora11g etl]<span class=\"comment\"># echo 'unset SSH_ASKPASS' &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc   </span></span><br><span class=\"line\"><span class=\"comment\">#查看远程库</span></span><br><span class=\"line\">env GIT_SSL_NO_VERIFY=<span class=\"literal\">true</span>  </span><br><span class=\"line\">git remote show origin</span><br><span class=\"line\"><span class=\"comment\">#下载 GitHub 上项目</span></span><br><span class=\"line\">env GIT_SSL_NO_VERIFY=<span class=\"literal\">true</span>   </span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/dadiqq/nework-git.git</span><br><span class=\"line\">git <span class=\"built_in\">clone</span>  git@github.com:dadiqq/nework-git.git</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> --no-checkout https://github.com/dadiqq/nework-git.git tmp</span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard HEAD</span><br><span class=\"line\">git push -u origin master</span><br><span class=\"line\">curl http://curl.haxx.se/ca/cacert.pem -o /etc/pki/tls/certs/ca-bundle.crt</span><br></pre></td></tr></table></figure>\n<p>工作的时候经常需要在各个目录之间跳转，可以通过环境变量对目录进行缩写，方便地在多个目录直接切换。<br>在 ~/.bashrc 添加：</p>\n<p>export wd=”/d/Projects/MyProject/git”<br>export doc=”/d/Projects/documents/“</p>\n<p>下面来验证以上的说法。<br>创建一个空的项目，<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir project</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> project</span><br><span class=\"line\">$ git init</span><br><span class=\"line\">$ vi  readme    <span class=\"comment\"># 添加一行文字并保存，比如“1111”</span></span><br><span class=\"line\">$ git add readme</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"1st commit\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">此时来看仓库中的对象目录</span><br><span class=\"line\"></span><br><span class=\"line\">$ tree .git/objects/</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"如果我们往一个非空的目录下-clone-git-项目，就会提示错误信息：\"><a href=\"#如果我们往一个非空的目录下-clone-git-项目，就会提示错误信息：\" class=\"headerlink\" title=\"如果我们往一个非空的目录下 clone git 项目，就会提示错误信息：\"></a>如果我们往一个非空的目录下 clone git 项目，就会提示错误信息：</h3><p><code>fatal: destination path &#39;.&#39; already exists and is not an empty directory.</code></p>\n<h4 id=\"解决的办法是：\"><a href=\"#解决的办法是：\" class=\"headerlink\" title=\"解决的办法是：\"></a>解决的办法是：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 进入非空目录，假设是 /workdir/proj1</span><br><span class=\"line\">2. git <span class=\"built_in\">clone</span> --no-checkout https://git.oschina.net/NextApp/platform.git tmp</span><br><span class=\"line\">3. mv tmp/.git .   <span class=\"comment\">#将 tmp 目录下的 .git 目录移到当前目录</span></span><br><span class=\"line\">4. rmdir tmp</span><br><span class=\"line\">5. git reset --hard HEAD</span><br></pre></td></tr></table></figure>\n<p>然后就可以进行各种正常操作了。</p>\n<h4 id=\"第二方案\"><a href=\"#第二方案\" class=\"headerlink\" title=\"第二方案\"></a>第二方案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -a  </span><br><span class=\"line\">rm .git/ -rf</span><br></pre></td></tr></table></figure>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 跑步</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 写博客</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 学习</li>\n</ul>\n"},{"title":"Hello World","comments":1,"date":"2018-08-22T14:26:12.000Z","updated":"2018-08-22T14:26:12.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncomments: true\ndate: 2018-08-22 22:26:12\nupdated: 2018-08-22 22:26:12\ntags:  [tools]\ncategories: 效率工具\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"layout":"post","photos":[],"link":"","_id":"cjl7q8ki0000il8lruazk0j8s","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"用 Hexo + Github 搭建属于自己的博客","date":"2018-08-20T03:13:56.000Z","_content":"\n最近几天一直想做一个自己的博客，把学习过的技术看过的文章都整理起来，花了几天的时间[博客](limqvip.github.io)初步搭建完成，看了很多大佬文章，但是自己搭建还是遇到很多坑，下面就写写搭建过程。希望对看到的人有帮助。\n\n本文主要介绍 Windows 7 x64 下 Hexo: 3.7.1 + GitHub 搭建（不同的 Hexo 版本，有的设置可能会有差异）。\n\n## 搭建环境\n\n#### \t1. 安装 git\n\n可以到 [git](https://git-scm.com/download/win) 官网下载相应平台版本进行安装。\n\n#### \t2. 申请 GitHub 账号\n\n进入 [GitHub ](https://link.jianshu.com/?t=https://github.com/) 注册。注册过程略。\n\n#### \t3. 安装 node.js\n\n到 [node.js](https://link.jianshu.com/?t=https://nodejs.org/en/download/) 官网下载相应平台的最新版本，傻瓜式安装（自带安装 npm）。在 git bash 下执行`npm -v` 查看是否安装成功 npm。如果安装成功会显示对应版本号。\n\n```bash\n$ npm -v\n5.6.0\n```\n\n#### 4. 安装 Hexo\n\n打开 git bash 或者 cmd, 执行以下命令:\n`npm install -g hexo`\n\n## 搭建 Hexo\n\n#### 1. 初始化 \n\n执行`hexo init myblog`创建一个名为 myblog 的博客。该命令会生成一个 myblog 文件夹。进入 myblog 目录 `cd myblog `, myblog 是博客的主目录。\n\n#### 2. 安装必须依赖包\n\n`hexo install <name>`\n\n#### 3. 生成静态页面\n\n`hexo generate` or `hexo g`\n\n#### 4. 本地运行\n\n`hexo server` 或者 `hexo s`\n\n打开浏览器，在地址栏输入localhost:4000，就可以看到我们搭建好的本地博客了。到此只是搭建好了本地博客。\n\n## 部署博客到 GitHub , 通过域名访问博客。\n#### 1.新建repository\n\n建立与你用户名对应的仓库，仓库名必须为【 your_username.github.io】,例如我的博客 limqvip.github.io. \n\n#### 2.部署博客\n\n##### 1. 修改配置文件\n\n进入你的hexo文件夹根目录下，用编辑器打开 _config.yml, 修改 deploy 项，如下（根据你的 GitHub 进行相应更改）：\n\n```bash\ndeploy:\n  type: git       #注意：有的版本type是github\n  repo: https://github.com/limqvip/limqvip.github.io.git\n  branch: master\n```\n\n##### 2. 执行 `hexo d` 部署到 github 上。\n\n```bash\nINFO  Deploying: git\nINFO  Clearing .deploy_git folder...\nINFO  Copying files from public folder...\nINFO  Copying files from extend dirs...\n…略\n create mode 100644 \"tags/\\347\\211\\210\\346\\234\\254\\346\\216\\247\\345\\210\\266/index.html\"\nBranch master set up to track remote branch master from git@github.com:limqvip/limqvip.github.io.git.\nTo github.com:limqvip/limqvip.github.io.git\n   5867eb8..f25e3d4  HEAD -> master\nINFO  Deploy done: git\n```\n\n此时就完成部署了，用浏览器访问 https://limqvip.github.io 即可(第一次发布可能会有 10 分钟的延迟)。\n\n每次修改完本地的文件后要执行以下命令，重新部署到 github 上：\n\n`hexo clean`\n`hexo generate`\n`hexo deploy` 或者 `hexo d`\n\n#### 常用命令\n\n`hexo new \"postName\"` #新建文章\n`hexo new page \"pageName\"` #新建页面\n`hexo generate` #生成静态页面至public目录\n`hexo server` #开启预览访问端口（默认端口 4000, 'ctrl + c' 关闭 server）\n`hexo deploy` #将 .deploy 目录部署到 GitHub\n`hexo help` # 查看帮助\n`hexo version` #查看 Hexo 的版本\n\n#### 报错总结\n\n1. 出现 error deployer not found:git 或者 error deployer not found:github 的错误\n\n   解决办法：执行 npm install hexo-deployer-git --save\n\n2. 出现类似 FATAL can not read a block mapping entry; a multiline key may not be an implicit key at line 70, column 1: ... 错误\n\n   解决办法：_config.yml 中配置项的英文冒号后面要用空格隔开，再跟内容。\n\n3. 中文乱码问题\n\n   解决办法：将文件的内容编码改为 UTF8 格式\n\n4. 'hexo sever' 能够成功运行，但是 localhost:4000 无法访问\n\n   解决办法：执行 hexo s -p 5000, 改用其他端口启动\n\n   ---\n\n   安装步骤很简单，但中间走了很多弯路，因此，主要记录一下那些曾经走过的弯路。\n\n   1. 新建项目时报错：\n     npm WARN deprecated istanbul-lib-hook@1.2.1: 1.2.0 should have\n      been a major version bumpnpm ERR! Unexpected end of JSON input while parsing near ‘...registry.npm.taobao.o‘ npm ERR! A complete log of this run can be found in:npm ERR!     \n     C:\\Users\\Admin\\AppData\\Roaming\\npm-cache\\_logs\\2018-06-08T14_01_13_067Z-debug.logPackage install failed, see above. 如下所示：\n\n      解决方法：网上查找的一般是说运行：`npm cache clean --force`，但清除缓存之后，再次新建项目，还是报这个错。然后根据提示信息，取消了淘宝镜像，问题解决。\n\n      取消淘宝镜像：\n\n      ```bash\n     npm config delete registry\n     npm config delete disturl\n      ```\n\n      运行 `npm config edit` 可看到 registry 中已经变成了默认镜像。参考：设置和取消淘宝镜像 \n\n   2. 新建项目时报的警告：npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"}) ‘git‘ 不是内部或外部命令，也不是可运行的程序或批处理文件。 安装git插件\n\n   3. 卸载 angular, 因为反反复复卸载重装了好几次 angular, 因此也记录一下卸载过程吧。\n\n      ```bash\n      npm uninstall -g angular-cli \n      npm uninstall -g @angular/cli\n      npm cache clean  \n      ```\n\n       在运行 `npm cache clean`  时报错如下图，根据信息提示改成了 `npm cache verify`  总结：一定要根据官网教程安装，网上的教程很多很乱，开始就是根据网上教程装的很混乱，   导致报了很多莫名其妙的错。 本文由职坐标整理并发布，希望对同学们有所帮助。了解更多详情请关注 WEB 前端 Node.js 频道！ ","source":"_posts/limqfirst.md","raw":"---\ntitle: 用 Hexo + Github 搭建属于自己的博客\ndate: 2018-08-20 11:13:56\ntags: Python\ncategories: \n- Program\n- hexo\n---\n\n最近几天一直想做一个自己的博客，把学习过的技术看过的文章都整理起来，花了几天的时间[博客](limqvip.github.io)初步搭建完成，看了很多大佬文章，但是自己搭建还是遇到很多坑，下面就写写搭建过程。希望对看到的人有帮助。\n\n本文主要介绍 Windows 7 x64 下 Hexo: 3.7.1 + GitHub 搭建（不同的 Hexo 版本，有的设置可能会有差异）。\n\n## 搭建环境\n\n#### \t1. 安装 git\n\n可以到 [git](https://git-scm.com/download/win) 官网下载相应平台版本进行安装。\n\n#### \t2. 申请 GitHub 账号\n\n进入 [GitHub ](https://link.jianshu.com/?t=https://github.com/) 注册。注册过程略。\n\n#### \t3. 安装 node.js\n\n到 [node.js](https://link.jianshu.com/?t=https://nodejs.org/en/download/) 官网下载相应平台的最新版本，傻瓜式安装（自带安装 npm）。在 git bash 下执行`npm -v` 查看是否安装成功 npm。如果安装成功会显示对应版本号。\n\n```bash\n$ npm -v\n5.6.0\n```\n\n#### 4. 安装 Hexo\n\n打开 git bash 或者 cmd, 执行以下命令:\n`npm install -g hexo`\n\n## 搭建 Hexo\n\n#### 1. 初始化 \n\n执行`hexo init myblog`创建一个名为 myblog 的博客。该命令会生成一个 myblog 文件夹。进入 myblog 目录 `cd myblog `, myblog 是博客的主目录。\n\n#### 2. 安装必须依赖包\n\n`hexo install <name>`\n\n#### 3. 生成静态页面\n\n`hexo generate` or `hexo g`\n\n#### 4. 本地运行\n\n`hexo server` 或者 `hexo s`\n\n打开浏览器，在地址栏输入localhost:4000，就可以看到我们搭建好的本地博客了。到此只是搭建好了本地博客。\n\n## 部署博客到 GitHub , 通过域名访问博客。\n#### 1.新建repository\n\n建立与你用户名对应的仓库，仓库名必须为【 your_username.github.io】,例如我的博客 limqvip.github.io. \n\n#### 2.部署博客\n\n##### 1. 修改配置文件\n\n进入你的hexo文件夹根目录下，用编辑器打开 _config.yml, 修改 deploy 项，如下（根据你的 GitHub 进行相应更改）：\n\n```bash\ndeploy:\n  type: git       #注意：有的版本type是github\n  repo: https://github.com/limqvip/limqvip.github.io.git\n  branch: master\n```\n\n##### 2. 执行 `hexo d` 部署到 github 上。\n\n```bash\nINFO  Deploying: git\nINFO  Clearing .deploy_git folder...\nINFO  Copying files from public folder...\nINFO  Copying files from extend dirs...\n…略\n create mode 100644 \"tags/\\347\\211\\210\\346\\234\\254\\346\\216\\247\\345\\210\\266/index.html\"\nBranch master set up to track remote branch master from git@github.com:limqvip/limqvip.github.io.git.\nTo github.com:limqvip/limqvip.github.io.git\n   5867eb8..f25e3d4  HEAD -> master\nINFO  Deploy done: git\n```\n\n此时就完成部署了，用浏览器访问 https://limqvip.github.io 即可(第一次发布可能会有 10 分钟的延迟)。\n\n每次修改完本地的文件后要执行以下命令，重新部署到 github 上：\n\n`hexo clean`\n`hexo generate`\n`hexo deploy` 或者 `hexo d`\n\n#### 常用命令\n\n`hexo new \"postName\"` #新建文章\n`hexo new page \"pageName\"` #新建页面\n`hexo generate` #生成静态页面至public目录\n`hexo server` #开启预览访问端口（默认端口 4000, 'ctrl + c' 关闭 server）\n`hexo deploy` #将 .deploy 目录部署到 GitHub\n`hexo help` # 查看帮助\n`hexo version` #查看 Hexo 的版本\n\n#### 报错总结\n\n1. 出现 error deployer not found:git 或者 error deployer not found:github 的错误\n\n   解决办法：执行 npm install hexo-deployer-git --save\n\n2. 出现类似 FATAL can not read a block mapping entry; a multiline key may not be an implicit key at line 70, column 1: ... 错误\n\n   解决办法：_config.yml 中配置项的英文冒号后面要用空格隔开，再跟内容。\n\n3. 中文乱码问题\n\n   解决办法：将文件的内容编码改为 UTF8 格式\n\n4. 'hexo sever' 能够成功运行，但是 localhost:4000 无法访问\n\n   解决办法：执行 hexo s -p 5000, 改用其他端口启动\n\n   ---\n\n   安装步骤很简单，但中间走了很多弯路，因此，主要记录一下那些曾经走过的弯路。\n\n   1. 新建项目时报错：\n     npm WARN deprecated istanbul-lib-hook@1.2.1: 1.2.0 should have\n      been a major version bumpnpm ERR! Unexpected end of JSON input while parsing near ‘...registry.npm.taobao.o‘ npm ERR! A complete log of this run can be found in:npm ERR!     \n     C:\\Users\\Admin\\AppData\\Roaming\\npm-cache\\_logs\\2018-06-08T14_01_13_067Z-debug.logPackage install failed, see above. 如下所示：\n\n      解决方法：网上查找的一般是说运行：`npm cache clean --force`，但清除缓存之后，再次新建项目，还是报这个错。然后根据提示信息，取消了淘宝镜像，问题解决。\n\n      取消淘宝镜像：\n\n      ```bash\n     npm config delete registry\n     npm config delete disturl\n      ```\n\n      运行 `npm config edit` 可看到 registry 中已经变成了默认镜像。参考：设置和取消淘宝镜像 \n\n   2. 新建项目时报的警告：npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"}) ‘git‘ 不是内部或外部命令，也不是可运行的程序或批处理文件。 安装git插件\n\n   3. 卸载 angular, 因为反反复复卸载重装了好几次 angular, 因此也记录一下卸载过程吧。\n\n      ```bash\n      npm uninstall -g angular-cli \n      npm uninstall -g @angular/cli\n      npm cache clean  \n      ```\n\n       在运行 `npm cache clean`  时报错如下图，根据信息提示改成了 `npm cache verify`  总结：一定要根据官网教程安装，网上的教程很多很乱，开始就是根据网上教程装的很混乱，   导致报了很多莫名其妙的错。 本文由职坐标整理并发布，希望对同学们有所帮助。了解更多详情请关注 WEB 前端 Node.js 频道！ ","slug":"limqfirst","published":1,"updated":"2018-08-24T06:40:04.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7q8ki1000jl8lrplbt0spm","content":"<p>最近几天一直想做一个自己的博客，把学习过的技术看过的文章都整理起来，花了几天的时间<a href=\"limqvip.github.io\">博客</a>初步搭建完成，看了很多大佬文章，但是自己搭建还是遇到很多坑，下面就写写搭建过程。希望对看到的人有帮助。</p>\n<p>本文主要介绍 Windows 7 x64 下 Hexo: 3.7.1 + GitHub 搭建（不同的 Hexo 版本，有的设置可能会有差异）。</p>\n<h2 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h2><h4 id=\"1-安装-git\"><a href=\"#1-安装-git\" class=\"headerlink\" title=\"1. 安装 git\"></a>1. 安装 git</h4><p>可以到 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">git</a> 官网下载相应平台版本进行安装。</p>\n<h4 id=\"2-申请-GitHub-账号\"><a href=\"#2-申请-GitHub-账号\" class=\"headerlink\" title=\"2. 申请 GitHub 账号\"></a>2. 申请 GitHub 账号</h4><p>进入 <a href=\"https://link.jianshu.com/?t=https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub </a> 注册。注册过程略。</p>\n<h4 id=\"3-安装-node-js\"><a href=\"#3-安装-node-js\" class=\"headerlink\" title=\"3. 安装 node.js\"></a>3. 安装 node.js</h4><p>到 <a href=\"https://link.jianshu.com/?t=https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">node.js</a> 官网下载相应平台的最新版本，傻瓜式安装（自带安装 npm）。在 git bash 下执行<code>npm -v</code> 查看是否安装成功 npm。如果安装成功会显示对应版本号。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm -v</span><br><span class=\"line\">5.6.0</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-安装-Hexo\"><a href=\"#4-安装-Hexo\" class=\"headerlink\" title=\"4. 安装 Hexo\"></a>4. 安装 Hexo</h4><p>打开 git bash 或者 cmd, 执行以下命令:<br><code>npm install -g hexo</code></p>\n<h2 id=\"搭建-Hexo\"><a href=\"#搭建-Hexo\" class=\"headerlink\" title=\"搭建 Hexo\"></a>搭建 Hexo</h2><h4 id=\"1-初始化\"><a href=\"#1-初始化\" class=\"headerlink\" title=\"1. 初始化\"></a>1. 初始化</h4><p>执行<code>hexo init myblog</code>创建一个名为 myblog 的博客。该命令会生成一个 myblog 文件夹。进入 myblog 目录 <code>cd myblog</code>, myblog 是博客的主目录。</p>\n<h4 id=\"2-安装必须依赖包\"><a href=\"#2-安装必须依赖包\" class=\"headerlink\" title=\"2. 安装必须依赖包\"></a>2. 安装必须依赖包</h4><p><code>hexo install &lt;name&gt;</code></p>\n<h4 id=\"3-生成静态页面\"><a href=\"#3-生成静态页面\" class=\"headerlink\" title=\"3. 生成静态页面\"></a>3. 生成静态页面</h4><p><code>hexo generate</code> or <code>hexo g</code></p>\n<h4 id=\"4-本地运行\"><a href=\"#4-本地运行\" class=\"headerlink\" title=\"4. 本地运行\"></a>4. 本地运行</h4><p><code>hexo server</code> 或者 <code>hexo s</code></p>\n<p>打开浏览器，在地址栏输入localhost:4000，就可以看到我们搭建好的本地博客了。到此只是搭建好了本地博客。</p>\n<h2 id=\"部署博客到-GitHub-通过域名访问博客。\"><a href=\"#部署博客到-GitHub-通过域名访问博客。\" class=\"headerlink\" title=\"部署博客到 GitHub , 通过域名访问博客。\"></a>部署博客到 GitHub , 通过域名访问博客。</h2><h4 id=\"1-新建repository\"><a href=\"#1-新建repository\" class=\"headerlink\" title=\"1.新建repository\"></a>1.新建repository</h4><p>建立与你用户名对应的仓库，仓库名必须为【 your_username.github.io】,例如我的博客 limqvip.github.io. </p>\n<h4 id=\"2-部署博客\"><a href=\"#2-部署博客\" class=\"headerlink\" title=\"2.部署博客\"></a>2.部署博客</h4><h5 id=\"1-修改配置文件\"><a href=\"#1-修改配置文件\" class=\"headerlink\" title=\"1. 修改配置文件\"></a>1. 修改配置文件</h5><p>进入你的hexo文件夹根目录下，用编辑器打开 _config.yml, 修改 deploy 项，如下（根据你的 GitHub 进行相应更改）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git       <span class=\"comment\">#注意：有的版本type是github</span></span><br><span class=\"line\">  repo: https://github.com/limqvip/limqvip.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-执行-hexo-d-部署到-github-上。\"><a href=\"#2-执行-hexo-d-部署到-github-上。\" class=\"headerlink\" title=\"2. 执行 hexo d 部署到 github 上。\"></a>2. 执行 <code>hexo d</code> 部署到 github 上。</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Deploying: git</span><br><span class=\"line\">INFO  Clearing .deploy_git folder...</span><br><span class=\"line\">INFO  Copying files from public folder...</span><br><span class=\"line\">INFO  Copying files from extend <span class=\"built_in\">dirs</span>...</span><br><span class=\"line\">…略</span><br><span class=\"line\"> create mode 100644 <span class=\"string\">\"tags/\\347\\211\\210\\346\\234\\254\\346\\216\\247\\345\\210\\266/index.html\"</span></span><br><span class=\"line\">Branch master <span class=\"built_in\">set</span> up to track remote branch master from git@github.com:limqvip/limqvip.github.io.git.</span><br><span class=\"line\">To github.com:limqvip/limqvip.github.io.git</span><br><span class=\"line\">   5867eb8..f25e3d4  HEAD -&gt; master</span><br><span class=\"line\">INFO  Deploy <span class=\"keyword\">done</span>: git</span><br></pre></td></tr></table></figure>\n<p>此时就完成部署了，用浏览器访问 <a href=\"https://limqvip.github.io\" target=\"_blank\" rel=\"noopener\">https://limqvip.github.io</a> 即可(第一次发布可能会有 10 分钟的延迟)。</p>\n<p>每次修改完本地的文件后要执行以下命令，重新部署到 github 上：</p>\n<p><code>hexo clean</code><br><code>hexo generate</code><br><code>hexo deploy</code> 或者 <code>hexo d</code></p>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><p><code>hexo new &quot;postName&quot;</code> #新建文章<br><code>hexo new page &quot;pageName&quot;</code> #新建页面<br><code>hexo generate</code> #生成静态页面至public目录<br><code>hexo server</code> #开启预览访问端口（默认端口 4000, ‘ctrl + c’ 关闭 server）<br><code>hexo deploy</code> #将 .deploy 目录部署到 GitHub<br><code>hexo help</code> # 查看帮助<br><code>hexo version</code> #查看 Hexo 的版本</p>\n<h4 id=\"报错总结\"><a href=\"#报错总结\" class=\"headerlink\" title=\"报错总结\"></a>报错总结</h4><ol>\n<li><p>出现 error deployer not found:git 或者 error deployer not found:github 的错误</p>\n<p>解决办法：执行 npm install hexo-deployer-git –save</p>\n</li>\n<li><p>出现类似 FATAL can not read a block mapping entry; a multiline key may not be an implicit key at line 70, column 1: … 错误</p>\n<p>解决办法：_config.yml 中配置项的英文冒号后面要用空格隔开，再跟内容。</p>\n</li>\n<li><p>中文乱码问题</p>\n<p>解决办法：将文件的内容编码改为 UTF8 格式</p>\n</li>\n<li><p>‘hexo sever’ 能够成功运行，但是 localhost:4000 无法访问</p>\n<p>解决办法：执行 hexo s -p 5000, 改用其他端口启动</p>\n<hr>\n<p>安装步骤很简单，但中间走了很多弯路，因此，主要记录一下那些曾经走过的弯路。</p>\n<ol>\n<li><p>新建项目时报错：<br>npm WARN deprecated <a href=\"mailto:istanbul-lib-hook@1.2.1\" target=\"_blank\" rel=\"noopener\">istanbul-lib-hook@1.2.1</a>: 1.2.0 should have<br>been a major version bumpnpm ERR! Unexpected end of JSON input while parsing near ‘…registry.npm.taobao.o‘ npm ERR! A complete log of this run can be found in:npm ERR!<br>C:\\Users\\Admin\\AppData\\Roaming\\npm-cache_logs\\2018-06-08T14_01_13_067Z-debug.logPackage install failed, see above. 如下所示：</p>\n<p>解决方法：网上查找的一般是说运行：<code>npm cache clean --force</code>，但清除缓存之后，再次新建项目，还是报这个错。然后根据提示信息，取消了淘宝镜像，问题解决。</p>\n<p>取消淘宝镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config delete registry</span><br><span class=\"line\">npm config delete disturl</span><br></pre></td></tr></table></figure>\n<p>运行 <code>npm config edit</code> 可看到 registry 中已经变成了默认镜像。参考：设置和取消淘宝镜像 </p>\n</li>\n<li><p>新建项目时报的警告：npm WARN optional SKIPPING OPTIONAL DEPENDENCY: <a href=\"mailto:fsevents@1.2.4\" target=\"_blank\" rel=\"noopener\">fsevents@1.2.4</a> (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for <a href=\"mailto:fsevents@1.2.4\" target=\"_blank\" rel=\"noopener\">fsevents@1.2.4</a>: wanted {“os”:”darwin”,”arch”:”any”} (current: {“os”:”win32”,”arch”:”x64”}) ‘git‘ 不是内部或外部命令，也不是可运行的程序或批处理文件。 安装git插件</p>\n</li>\n<li><p>卸载 angular, 因为反反复复卸载重装了好几次 angular, 因此也记录一下卸载过程吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall -g angular-cli </span><br><span class=\"line\">npm uninstall -g @angular/cli</span><br><span class=\"line\">npm cache clean</span><br></pre></td></tr></table></figure>\n<p> 在运行 <code>npm cache clean</code>  时报错如下图，根据信息提示改成了 <code>npm cache verify</code>  总结：一定要根据官网教程安装，网上的教程很多很乱，开始就是根据网上教程装的很混乱，   导致报了很多莫名其妙的错。 本文由职坐标整理并发布，希望对同学们有所帮助。了解更多详情请关注 WEB 前端 Node.js 频道！ </p>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>最近几天一直想做一个自己的博客，把学习过的技术看过的文章都整理起来，花了几天的时间<a href=\"limqvip.github.io\">博客</a>初步搭建完成，看了很多大佬文章，但是自己搭建还是遇到很多坑，下面就写写搭建过程。希望对看到的人有帮助。</p>\n<p>本文主要介绍 Windows 7 x64 下 Hexo: 3.7.1 + GitHub 搭建（不同的 Hexo 版本，有的设置可能会有差异）。</p>\n<h2 id=\"搭建环境\"><a href=\"#搭建环境\" class=\"headerlink\" title=\"搭建环境\"></a>搭建环境</h2><h4 id=\"1-安装-git\"><a href=\"#1-安装-git\" class=\"headerlink\" title=\"1. 安装 git\"></a>1. 安装 git</h4><p>可以到 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">git</a> 官网下载相应平台版本进行安装。</p>\n<h4 id=\"2-申请-GitHub-账号\"><a href=\"#2-申请-GitHub-账号\" class=\"headerlink\" title=\"2. 申请 GitHub 账号\"></a>2. 申请 GitHub 账号</h4><p>进入 <a href=\"https://link.jianshu.com/?t=https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub </a> 注册。注册过程略。</p>\n<h4 id=\"3-安装-node-js\"><a href=\"#3-安装-node-js\" class=\"headerlink\" title=\"3. 安装 node.js\"></a>3. 安装 node.js</h4><p>到 <a href=\"https://link.jianshu.com/?t=https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">node.js</a> 官网下载相应平台的最新版本，傻瓜式安装（自带安装 npm）。在 git bash 下执行<code>npm -v</code> 查看是否安装成功 npm。如果安装成功会显示对应版本号。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm -v</span><br><span class=\"line\">5.6.0</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-安装-Hexo\"><a href=\"#4-安装-Hexo\" class=\"headerlink\" title=\"4. 安装 Hexo\"></a>4. 安装 Hexo</h4><p>打开 git bash 或者 cmd, 执行以下命令:<br><code>npm install -g hexo</code></p>\n<h2 id=\"搭建-Hexo\"><a href=\"#搭建-Hexo\" class=\"headerlink\" title=\"搭建 Hexo\"></a>搭建 Hexo</h2><h4 id=\"1-初始化\"><a href=\"#1-初始化\" class=\"headerlink\" title=\"1. 初始化\"></a>1. 初始化</h4><p>执行<code>hexo init myblog</code>创建一个名为 myblog 的博客。该命令会生成一个 myblog 文件夹。进入 myblog 目录 <code>cd myblog</code>, myblog 是博客的主目录。</p>\n<h4 id=\"2-安装必须依赖包\"><a href=\"#2-安装必须依赖包\" class=\"headerlink\" title=\"2. 安装必须依赖包\"></a>2. 安装必须依赖包</h4><p><code>hexo install &lt;name&gt;</code></p>\n<h4 id=\"3-生成静态页面\"><a href=\"#3-生成静态页面\" class=\"headerlink\" title=\"3. 生成静态页面\"></a>3. 生成静态页面</h4><p><code>hexo generate</code> or <code>hexo g</code></p>\n<h4 id=\"4-本地运行\"><a href=\"#4-本地运行\" class=\"headerlink\" title=\"4. 本地运行\"></a>4. 本地运行</h4><p><code>hexo server</code> 或者 <code>hexo s</code></p>\n<p>打开浏览器，在地址栏输入localhost:4000，就可以看到我们搭建好的本地博客了。到此只是搭建好了本地博客。</p>\n<h2 id=\"部署博客到-GitHub-通过域名访问博客。\"><a href=\"#部署博客到-GitHub-通过域名访问博客。\" class=\"headerlink\" title=\"部署博客到 GitHub , 通过域名访问博客。\"></a>部署博客到 GitHub , 通过域名访问博客。</h2><h4 id=\"1-新建repository\"><a href=\"#1-新建repository\" class=\"headerlink\" title=\"1.新建repository\"></a>1.新建repository</h4><p>建立与你用户名对应的仓库，仓库名必须为【 your_username.github.io】,例如我的博客 limqvip.github.io. </p>\n<h4 id=\"2-部署博客\"><a href=\"#2-部署博客\" class=\"headerlink\" title=\"2.部署博客\"></a>2.部署博客</h4><h5 id=\"1-修改配置文件\"><a href=\"#1-修改配置文件\" class=\"headerlink\" title=\"1. 修改配置文件\"></a>1. 修改配置文件</h5><p>进入你的hexo文件夹根目录下，用编辑器打开 _config.yml, 修改 deploy 项，如下（根据你的 GitHub 进行相应更改）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git       <span class=\"comment\">#注意：有的版本type是github</span></span><br><span class=\"line\">  repo: https://github.com/limqvip/limqvip.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-执行-hexo-d-部署到-github-上。\"><a href=\"#2-执行-hexo-d-部署到-github-上。\" class=\"headerlink\" title=\"2. 执行 hexo d 部署到 github 上。\"></a>2. 执行 <code>hexo d</code> 部署到 github 上。</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Deploying: git</span><br><span class=\"line\">INFO  Clearing .deploy_git folder...</span><br><span class=\"line\">INFO  Copying files from public folder...</span><br><span class=\"line\">INFO  Copying files from extend <span class=\"built_in\">dirs</span>...</span><br><span class=\"line\">…略</span><br><span class=\"line\"> create mode 100644 <span class=\"string\">\"tags/\\347\\211\\210\\346\\234\\254\\346\\216\\247\\345\\210\\266/index.html\"</span></span><br><span class=\"line\">Branch master <span class=\"built_in\">set</span> up to track remote branch master from git@github.com:limqvip/limqvip.github.io.git.</span><br><span class=\"line\">To github.com:limqvip/limqvip.github.io.git</span><br><span class=\"line\">   5867eb8..f25e3d4  HEAD -&gt; master</span><br><span class=\"line\">INFO  Deploy <span class=\"keyword\">done</span>: git</span><br></pre></td></tr></table></figure>\n<p>此时就完成部署了，用浏览器访问 <a href=\"https://limqvip.github.io\" target=\"_blank\" rel=\"noopener\">https://limqvip.github.io</a> 即可(第一次发布可能会有 10 分钟的延迟)。</p>\n<p>每次修改完本地的文件后要执行以下命令，重新部署到 github 上：</p>\n<p><code>hexo clean</code><br><code>hexo generate</code><br><code>hexo deploy</code> 或者 <code>hexo d</code></p>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><p><code>hexo new &quot;postName&quot;</code> #新建文章<br><code>hexo new page &quot;pageName&quot;</code> #新建页面<br><code>hexo generate</code> #生成静态页面至public目录<br><code>hexo server</code> #开启预览访问端口（默认端口 4000, ‘ctrl + c’ 关闭 server）<br><code>hexo deploy</code> #将 .deploy 目录部署到 GitHub<br><code>hexo help</code> # 查看帮助<br><code>hexo version</code> #查看 Hexo 的版本</p>\n<h4 id=\"报错总结\"><a href=\"#报错总结\" class=\"headerlink\" title=\"报错总结\"></a>报错总结</h4><ol>\n<li><p>出现 error deployer not found:git 或者 error deployer not found:github 的错误</p>\n<p>解决办法：执行 npm install hexo-deployer-git –save</p>\n</li>\n<li><p>出现类似 FATAL can not read a block mapping entry; a multiline key may not be an implicit key at line 70, column 1: … 错误</p>\n<p>解决办法：_config.yml 中配置项的英文冒号后面要用空格隔开，再跟内容。</p>\n</li>\n<li><p>中文乱码问题</p>\n<p>解决办法：将文件的内容编码改为 UTF8 格式</p>\n</li>\n<li><p>‘hexo sever’ 能够成功运行，但是 localhost:4000 无法访问</p>\n<p>解决办法：执行 hexo s -p 5000, 改用其他端口启动</p>\n<hr>\n<p>安装步骤很简单，但中间走了很多弯路，因此，主要记录一下那些曾经走过的弯路。</p>\n<ol>\n<li><p>新建项目时报错：<br>npm WARN deprecated <a href=\"mailto:istanbul-lib-hook@1.2.1\" target=\"_blank\" rel=\"noopener\">istanbul-lib-hook@1.2.1</a>: 1.2.0 should have<br>been a major version bumpnpm ERR! Unexpected end of JSON input while parsing near ‘…registry.npm.taobao.o‘ npm ERR! A complete log of this run can be found in:npm ERR!<br>C:\\Users\\Admin\\AppData\\Roaming\\npm-cache_logs\\2018-06-08T14_01_13_067Z-debug.logPackage install failed, see above. 如下所示：</p>\n<p>解决方法：网上查找的一般是说运行：<code>npm cache clean --force</code>，但清除缓存之后，再次新建项目，还是报这个错。然后根据提示信息，取消了淘宝镜像，问题解决。</p>\n<p>取消淘宝镜像：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config delete registry</span><br><span class=\"line\">npm config delete disturl</span><br></pre></td></tr></table></figure>\n<p>运行 <code>npm config edit</code> 可看到 registry 中已经变成了默认镜像。参考：设置和取消淘宝镜像 </p>\n</li>\n<li><p>新建项目时报的警告：npm WARN optional SKIPPING OPTIONAL DEPENDENCY: <a href=\"mailto:fsevents@1.2.4\" target=\"_blank\" rel=\"noopener\">fsevents@1.2.4</a> (node_modules\\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for <a href=\"mailto:fsevents@1.2.4\" target=\"_blank\" rel=\"noopener\">fsevents@1.2.4</a>: wanted {“os”:”darwin”,”arch”:”any”} (current: {“os”:”win32”,”arch”:”x64”}) ‘git‘ 不是内部或外部命令，也不是可运行的程序或批处理文件。 安装git插件</p>\n</li>\n<li><p>卸载 angular, 因为反反复复卸载重装了好几次 angular, 因此也记录一下卸载过程吧。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall -g angular-cli </span><br><span class=\"line\">npm uninstall -g @angular/cli</span><br><span class=\"line\">npm cache clean</span><br></pre></td></tr></table></figure>\n<p> 在运行 <code>npm cache clean</code>  时报错如下图，根据信息提示改成了 <code>npm cache verify</code>  总结：一定要根据官网教程安装，网上的教程很多很乱，开始就是根据网上教程装的很混乱，   导致报了很多莫名其妙的错。 本文由职坐标整理并发布，希望对同学们有所帮助。了解更多详情请关注 WEB 前端 Node.js 频道！ </p>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"test","date":"2018-08-20T02:08:41.000Z","_content":"# 李白\n\n目录（在这里设置锚点）\n\n[01. 早发白帝城](#早发白帝城)\n\n[02. 赠汪伦](#赠汪伦)\n\n[03. 望庐山瀑布](#望庐山瀑布)\n\n## 早发白帝城\n\n​\t朝辞白帝彩云间，\n\n​\t千里江陵一日还。\n\n​\t两岸猿声啼不住，\n\n​\t轻舟已过万重山。\n\n\n\n## 赠汪伦\n\n​\t\n\n​\t李白乘舟将欲行，\n\n​\t忽闻岸上踏歌声。\n\n​\t桃花潭水深千尺，\n\n​\t不及汪伦送我情。\n\n\n\n## 望庐山瀑布\n\n​\t日照香炉生紫烟，\n\t\n​\t遥看瀑布挂前川。\n\t\n​\t飞流直下三千尺，\n\t\n​\t疑是银行落九天。\n\n","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2018-08-20 10:08:41\ntags: test\ncategories: life\n---\n# 李白\n\n目录（在这里设置锚点）\n\n[01. 早发白帝城](#早发白帝城)\n\n[02. 赠汪伦](#赠汪伦)\n\n[03. 望庐山瀑布](#望庐山瀑布)\n\n## 早发白帝城\n\n​\t朝辞白帝彩云间，\n\n​\t千里江陵一日还。\n\n​\t两岸猿声啼不住，\n\n​\t轻舟已过万重山。\n\n\n\n## 赠汪伦\n\n​\t\n\n​\t李白乘舟将欲行，\n\n​\t忽闻岸上踏歌声。\n\n​\t桃花潭水深千尺，\n\n​\t不及汪伦送我情。\n\n\n\n## 望庐山瀑布\n\n​\t日照香炉生紫烟，\n\t\n​\t遥看瀑布挂前川。\n\t\n​\t飞流直下三千尺，\n\t\n​\t疑是银行落九天。\n\n","slug":"test","published":1,"updated":"2018-08-24T06:40:04.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjl7q8ki5000nl8lrqh59jt38","content":"<h1 id=\"李白\"><a href=\"#李白\" class=\"headerlink\" title=\"李白\"></a>李白</h1><p>目录（在这里设置锚点）</p>\n<p><a href=\"#早发白帝城\">01. 早发白帝城</a></p>\n<p><a href=\"#赠汪伦\">02. 赠汪伦</a></p>\n<p><a href=\"#望庐山瀑布\">03. 望庐山瀑布</a></p>\n<h2 id=\"早发白帝城\"><a href=\"#早发白帝城\" class=\"headerlink\" title=\"早发白帝城\"></a>早发白帝城</h2><p>​    朝辞白帝彩云间，</p>\n<p>​    千里江陵一日还。</p>\n<p>​    两岸猿声啼不住，</p>\n<p>​    轻舟已过万重山。</p>\n<h2 id=\"赠汪伦\"><a href=\"#赠汪伦\" class=\"headerlink\" title=\"赠汪伦\"></a>赠汪伦</h2><p>​    </p>\n<p>​    李白乘舟将欲行，</p>\n<p>​    忽闻岸上踏歌声。</p>\n<p>​    桃花潭水深千尺，</p>\n<p>​    不及汪伦送我情。</p>\n<h2 id=\"望庐山瀑布\"><a href=\"#望庐山瀑布\" class=\"headerlink\" title=\"望庐山瀑布\"></a>望庐山瀑布</h2><p>​    日照香炉生紫烟，</p>\n<p>​    遥看瀑布挂前川。</p>\n<p>​    飞流直下三千尺，</p>\n<p>​    疑是银行落九天。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"李白\"><a href=\"#李白\" class=\"headerlink\" title=\"李白\"></a>李白</h1><p>目录（在这里设置锚点）</p>\n<p><a href=\"#早发白帝城\">01. 早发白帝城</a></p>\n<p><a href=\"#赠汪伦\">02. 赠汪伦</a></p>\n<p><a href=\"#望庐山瀑布\">03. 望庐山瀑布</a></p>\n<h2 id=\"早发白帝城\"><a href=\"#早发白帝城\" class=\"headerlink\" title=\"早发白帝城\"></a>早发白帝城</h2><p>​    朝辞白帝彩云间，</p>\n<p>​    千里江陵一日还。</p>\n<p>​    两岸猿声啼不住，</p>\n<p>​    轻舟已过万重山。</p>\n<h2 id=\"赠汪伦\"><a href=\"#赠汪伦\" class=\"headerlink\" title=\"赠汪伦\"></a>赠汪伦</h2><p>​    </p>\n<p>​    李白乘舟将欲行，</p>\n<p>​    忽闻岸上踏歌声。</p>\n<p>​    桃花潭水深千尺，</p>\n<p>​    不及汪伦送我情。</p>\n<h2 id=\"望庐山瀑布\"><a href=\"#望庐山瀑布\" class=\"headerlink\" title=\"望庐山瀑布\"></a>望庐山瀑布</h2><p>​    日照香炉生紫烟，</p>\n<p>​    遥看瀑布挂前川。</p>\n<p>​    飞流直下三千尺，</p>\n<p>​    疑是银行落九天。</p>\n"},{"title":"Linux 下 Oracle 命令行工具 Rlwrap","comments":1,"date":"2018-08-20T09:05:48.000Z","updated":"2018-08-20T09:05:48.000Z","_content":"\n如果您对Rlwrap这个工具不是很熟悉，建议参考一下这篇文章：[ Rlwrap Linux 上实现 Windows 的 SQL*Plus 保存 SQL 历史记录功能](http://space.itpub.net/519536/viewspace-614104)，这篇文章描述了如何部署安装 Rlwrap 工具。\n\n这个工具可以理解为在 UNIX 或 Linux 平台下模拟 Windows 下 SQL*Plus 的操作习惯（当然不仅限于此），同时在  SQL*Plus 中可以模拟 UNIX 或 Linux 的操作习惯，一旦掌握，可以提高在 SQL*Plus 中的操作效率。 \n\n以下是我尝试出来的一下快捷键，分享在此。\n```\nCtrl+L 将当前行置顶，相当于完成清屏的动作\nCtrl+P 上一条命令\nCtrl+N 下一条命令\nCtrl+U 从光标处删除到行首Ctrl+W 向前删除一个单词\nCtrl+R 增量搜索用过的命令，反复使用\nCtrl+R可以向前继续寻找包含关键字的命令，但不能循环\nCtrl+T 当前字母与前面的字母交换，最后的时候是最后两个字母交换\nCtrl+Z 后台运行，使用fg调出\nCtrl+XX 光标最近两次位置交换\nCtrl+B 光标向前移动\nCtrl+J 相当于Enter键，小心勿执行语句\nCtrl+O 相当于Enter键，小心勿执行语句\nCtrl+M 相当于Enter键，小心勿执行语句\nCtrl+H 相当于Backspace删除键\n```\n\n每一个快捷键都有其适用场合，尤其是`Ctrl + L` 可以非常便捷的完成清屏的作用，慢慢体会吧。如果您发现了更多有趣的使用方法，欢迎分享。\n\n看一个真正的专家操作命令行绝对是一种很好的体验-光标在单词之间来回穿梭，命令行不同的滚动。在这里强烈建立适应GUI节目的开发者尝试一下在提示符下面工作。但是事情也不是那么简单，还是需要知道“如何去做”。在单词之间跳转，使用 `Ctrl + 左右键`。`Ctrl + a` 跳到本行的行首，`Ctrl + e` 则跳到页尾。`Ctrl + u` 删除当前光标前面的文字 `Ctrl + k` -删除当前光标后面的文字 `Ctrl + w` 和`Alt + d` 对于当前的单词进行删除操作，`w`删除光标前面的单词的字符，`d` 则删除后面的字符`Alt + Backsapce` 删除当前光标后面的单词，如果删除错误，使用`Ctrl + y` 进行恢复`Ctrl + L` 进行清屏操作。","source":"_posts/2018-08-21-rlwrap.md","raw":"---\ntitle: Linux 下 Oracle 命令行工具 Rlwrap\ncomments: true\ndate: 2018-08-20 17:05:48\nupdated: 2018-08-20 17:05:48\ntags: Oracle\ncategories: \n- Program\n- Oracle\n---\n\n如果您对Rlwrap这个工具不是很熟悉，建议参考一下这篇文章：[ Rlwrap Linux 上实现 Windows 的 SQL*Plus 保存 SQL 历史记录功能](http://space.itpub.net/519536/viewspace-614104)，这篇文章描述了如何部署安装 Rlwrap 工具。\n\n这个工具可以理解为在 UNIX 或 Linux 平台下模拟 Windows 下 SQL*Plus 的操作习惯（当然不仅限于此），同时在  SQL*Plus 中可以模拟 UNIX 或 Linux 的操作习惯，一旦掌握，可以提高在 SQL*Plus 中的操作效率。 \n\n以下是我尝试出来的一下快捷键，分享在此。\n```\nCtrl+L 将当前行置顶，相当于完成清屏的动作\nCtrl+P 上一条命令\nCtrl+N 下一条命令\nCtrl+U 从光标处删除到行首Ctrl+W 向前删除一个单词\nCtrl+R 增量搜索用过的命令，反复使用\nCtrl+R可以向前继续寻找包含关键字的命令，但不能循环\nCtrl+T 当前字母与前面的字母交换，最后的时候是最后两个字母交换\nCtrl+Z 后台运行，使用fg调出\nCtrl+XX 光标最近两次位置交换\nCtrl+B 光标向前移动\nCtrl+J 相当于Enter键，小心勿执行语句\nCtrl+O 相当于Enter键，小心勿执行语句\nCtrl+M 相当于Enter键，小心勿执行语句\nCtrl+H 相当于Backspace删除键\n```\n\n每一个快捷键都有其适用场合，尤其是`Ctrl + L` 可以非常便捷的完成清屏的作用，慢慢体会吧。如果您发现了更多有趣的使用方法，欢迎分享。\n\n看一个真正的专家操作命令行绝对是一种很好的体验-光标在单词之间来回穿梭，命令行不同的滚动。在这里强烈建立适应GUI节目的开发者尝试一下在提示符下面工作。但是事情也不是那么简单，还是需要知道“如何去做”。在单词之间跳转，使用 `Ctrl + 左右键`。`Ctrl + a` 跳到本行的行首，`Ctrl + e` 则跳到页尾。`Ctrl + u` 删除当前光标前面的文字 `Ctrl + k` -删除当前光标后面的文字 `Ctrl + w` 和`Alt + d` 对于当前的单词进行删除操作，`w`删除光标前面的单词的字符，`d` 则删除后面的字符`Alt + Backsapce` 删除当前光标后面的单词，如果删除错误，使用`Ctrl + y` 进行恢复`Ctrl + L` 进行清屏操作。","slug":"rlwrap","published":1,"layout":"post","photos":[],"link":"","_id":"cjl7q8ki6000pl8lr86ig9tyy","content":"<p>如果您对Rlwrap这个工具不是很熟悉，建议参考一下这篇文章：<a href=\"http://space.itpub.net/519536/viewspace-614104\" target=\"_blank\" rel=\"noopener\"> Rlwrap Linux 上实现 Windows 的 SQL*Plus 保存 SQL 历史记录功能</a>，这篇文章描述了如何部署安装 Rlwrap 工具。</p>\n<p>这个工具可以理解为在 UNIX 或 Linux 平台下模拟 Windows 下 SQL<em>Plus 的操作习惯（当然不仅限于此），同时在  SQL</em>Plus 中可以模拟 UNIX 或 Linux 的操作习惯，一旦掌握，可以提高在 SQL*Plus 中的操作效率。 </p>\n<p>以下是我尝试出来的一下快捷键，分享在此。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+L 将当前行置顶，相当于完成清屏的动作</span><br><span class=\"line\">Ctrl+P 上一条命令</span><br><span class=\"line\">Ctrl+N 下一条命令</span><br><span class=\"line\">Ctrl+U 从光标处删除到行首Ctrl+W 向前删除一个单词</span><br><span class=\"line\">Ctrl+R 增量搜索用过的命令，反复使用</span><br><span class=\"line\">Ctrl+R可以向前继续寻找包含关键字的命令，但不能循环</span><br><span class=\"line\">Ctrl+T 当前字母与前面的字母交换，最后的时候是最后两个字母交换</span><br><span class=\"line\">Ctrl+Z 后台运行，使用fg调出</span><br><span class=\"line\">Ctrl+XX 光标最近两次位置交换</span><br><span class=\"line\">Ctrl+B 光标向前移动</span><br><span class=\"line\">Ctrl+J 相当于Enter键，小心勿执行语句</span><br><span class=\"line\">Ctrl+O 相当于Enter键，小心勿执行语句</span><br><span class=\"line\">Ctrl+M 相当于Enter键，小心勿执行语句</span><br><span class=\"line\">Ctrl+H 相当于Backspace删除键</span><br></pre></td></tr></table></figure></p>\n<p>每一个快捷键都有其适用场合，尤其是<code>Ctrl + L</code> 可以非常便捷的完成清屏的作用，慢慢体会吧。如果您发现了更多有趣的使用方法，欢迎分享。</p>\n<p>看一个真正的专家操作命令行绝对是一种很好的体验-光标在单词之间来回穿梭，命令行不同的滚动。在这里强烈建立适应GUI节目的开发者尝试一下在提示符下面工作。但是事情也不是那么简单，还是需要知道“如何去做”。在单词之间跳转，使用 <code>Ctrl + 左右键</code>。<code>Ctrl + a</code> 跳到本行的行首，<code>Ctrl + e</code> 则跳到页尾。<code>Ctrl + u</code> 删除当前光标前面的文字 <code>Ctrl + k</code> -删除当前光标后面的文字 <code>Ctrl + w</code> 和<code>Alt + d</code> 对于当前的单词进行删除操作，<code>w</code>删除光标前面的单词的字符，<code>d</code> 则删除后面的字符<code>Alt + Backsapce</code> 删除当前光标后面的单词，如果删除错误，使用<code>Ctrl + y</code> 进行恢复<code>Ctrl + L</code> 进行清屏操作。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果您对Rlwrap这个工具不是很熟悉，建议参考一下这篇文章：<a href=\"http://space.itpub.net/519536/viewspace-614104\" target=\"_blank\" rel=\"noopener\"> Rlwrap Linux 上实现 Windows 的 SQL*Plus 保存 SQL 历史记录功能</a>，这篇文章描述了如何部署安装 Rlwrap 工具。</p>\n<p>这个工具可以理解为在 UNIX 或 Linux 平台下模拟 Windows 下 SQL<em>Plus 的操作习惯（当然不仅限于此），同时在  SQL</em>Plus 中可以模拟 UNIX 或 Linux 的操作习惯，一旦掌握，可以提高在 SQL*Plus 中的操作效率。 </p>\n<p>以下是我尝试出来的一下快捷键，分享在此。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ctrl+L 将当前行置顶，相当于完成清屏的动作</span><br><span class=\"line\">Ctrl+P 上一条命令</span><br><span class=\"line\">Ctrl+N 下一条命令</span><br><span class=\"line\">Ctrl+U 从光标处删除到行首Ctrl+W 向前删除一个单词</span><br><span class=\"line\">Ctrl+R 增量搜索用过的命令，反复使用</span><br><span class=\"line\">Ctrl+R可以向前继续寻找包含关键字的命令，但不能循环</span><br><span class=\"line\">Ctrl+T 当前字母与前面的字母交换，最后的时候是最后两个字母交换</span><br><span class=\"line\">Ctrl+Z 后台运行，使用fg调出</span><br><span class=\"line\">Ctrl+XX 光标最近两次位置交换</span><br><span class=\"line\">Ctrl+B 光标向前移动</span><br><span class=\"line\">Ctrl+J 相当于Enter键，小心勿执行语句</span><br><span class=\"line\">Ctrl+O 相当于Enter键，小心勿执行语句</span><br><span class=\"line\">Ctrl+M 相当于Enter键，小心勿执行语句</span><br><span class=\"line\">Ctrl+H 相当于Backspace删除键</span><br></pre></td></tr></table></figure></p>\n<p>每一个快捷键都有其适用场合，尤其是<code>Ctrl + L</code> 可以非常便捷的完成清屏的作用，慢慢体会吧。如果您发现了更多有趣的使用方法，欢迎分享。</p>\n<p>看一个真正的专家操作命令行绝对是一种很好的体验-光标在单词之间来回穿梭，命令行不同的滚动。在这里强烈建立适应GUI节目的开发者尝试一下在提示符下面工作。但是事情也不是那么简单，还是需要知道“如何去做”。在单词之间跳转，使用 <code>Ctrl + 左右键</code>。<code>Ctrl + a</code> 跳到本行的行首，<code>Ctrl + e</code> 则跳到页尾。<code>Ctrl + u</code> 删除当前光标前面的文字 <code>Ctrl + k</code> -删除当前光标后面的文字 <code>Ctrl + w</code> 和<code>Alt + d</code> 对于当前的单词进行删除操作，<code>w</code>删除光标前面的单词的字符，<code>d</code> 则删除后面的字符<code>Alt + Backsapce</code> 删除当前光标后面的单词，如果删除错误，使用<code>Ctrl + y</code> 进行恢复<code>Ctrl + L</code> 进行清屏操作。</p>\n"}],"PostAsset":[{"_id":"source/_posts/2018-08-20-shujukujichu1/Image.png","slug":"Image.png","post":"cjl7q8khk0002l8lrqzjv68sy","modified":0,"renderable":0},{"_id":"source/_posts/2018-08-22-Git-changyongmingling/726930-5079e6da8900d0e2.jpg","slug":"726930-5079e6da8900d0e2.jpg","post":"cjl7q8kht0009l8lrswd44z39","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjl7q8khe0000l8lrvuqtxptk","category_id":"cjl7q8khn0004l8lro9w8rm3y","_id":"cjl7q8khz000fl8lrs0lp8xdr"},{"post_id":"cjl7q8ki0000il8lruazk0j8s","category_id":"cjl7q8khz000gl8lrn3lp09m3","_id":"cjl7q8ki7000ql8lr38j0luri"},{"post_id":"cjl7q8khp0006l8lr1jn3j2pc","category_id":"cjl7q8khz000gl8lrn3lp09m3","_id":"cjl7q8ki8000ul8lrxmr7ep6o"},{"post_id":"cjl7q8ki5000nl8lrqh59jt38","category_id":"cjl7q8khn0004l8lro9w8rm3y","_id":"cjl7q8kib000wl8lr33jxfdqg"},{"post_id":"cjl7q8khv000dl8lr3w7osmi1","category_id":"cjl7q8khu000al8lr7pcyf1be","_id":"cjl7q8kid0013l8lr188gj9z3"},{"post_id":"cjl7q8khv000dl8lr3w7osmi1","category_id":"cjl7q8kic000xl8lrkjr247v7","_id":"cjl7q8kie0016l8lrgl32mkaa"},{"post_id":"cjl7q8khk0002l8lrqzjv68sy","category_id":"cjl7q8khu000al8lr7pcyf1be","_id":"cjl7q8kif0018l8lry0iwvd2t"},{"post_id":"cjl7q8khk0002l8lrqzjv68sy","category_id":"cjl7q8kid0010l8lr1f186kik","_id":"cjl7q8kif001cl8lrkehspb7d"},{"post_id":"cjl7q8khy000el8lrmt2e5er4","category_id":"cjl7q8khu000al8lr7pcyf1be","_id":"cjl7q8kig001dl8lruvn944of"},{"post_id":"cjl7q8khy000el8lrmt2e5er4","category_id":"cjl7q8kie0014l8lra7enn267","_id":"cjl7q8kig001gl8lr6gqdhtzu"},{"post_id":"cjl7q8ki1000jl8lrplbt0spm","category_id":"cjl7q8khu000al8lr7pcyf1be","_id":"cjl7q8kih001il8lr2cnhiaey"},{"post_id":"cjl7q8ki1000jl8lrplbt0spm","category_id":"cjl7q8kif0019l8lrzdg53bts","_id":"cjl7q8kii001ml8lrk0d1zexx"},{"post_id":"cjl7q8khr0008l8lr41vmctkr","category_id":"cjl7q8khu000al8lr7pcyf1be","_id":"cjl7q8kii001nl8lr9h5tn0s2"},{"post_id":"cjl7q8khr0008l8lr41vmctkr","category_id":"cjl7q8kig001el8lrlkq0p8wb","_id":"cjl7q8kij001ql8lrhnunfd5k"},{"post_id":"cjl7q8ki6000pl8lr86ig9tyy","category_id":"cjl7q8khu000al8lr7pcyf1be","_id":"cjl7q8kik001tl8lrtxhqqeib"},{"post_id":"cjl7q8ki6000pl8lr86ig9tyy","category_id":"cjl7q8kih001jl8lrlxuxp8te","_id":"cjl7q8kik001vl8lrpploazeu"},{"post_id":"cjl7q8kht0009l8lrswd44z39","category_id":"cjl7q8khu000al8lr7pcyf1be","_id":"cjl7q8kil001xl8lr2a4wspph"},{"post_id":"cjl7q8kht0009l8lrswd44z39","category_id":"cjl7q8kie0014l8lra7enn267","_id":"cjl7q8kil001yl8lrnxcmvpm0"}],"PostTag":[{"post_id":"cjl7q8khe0000l8lrvuqtxptk","tag_id":"cjl7q8khp0005l8lrh9gosv3w","_id":"cjl7q8khv000cl8lrhgrsijjf"},{"post_id":"cjl7q8ki0000il8lruazk0j8s","tag_id":"cjl7q8khu000bl8lr9sy3jp60","_id":"cjl7q8ki3000ml8lrqmvq7dpz"},{"post_id":"cjl7q8khp0006l8lr1jn3j2pc","tag_id":"cjl7q8khu000bl8lr9sy3jp60","_id":"cjl7q8ki6000ol8lrjipc7k7d"},{"post_id":"cjl7q8khp0006l8lr1jn3j2pc","tag_id":"cjl7q8khz000hl8lrjt6fw5oj","_id":"cjl7q8ki8000sl8lrwe6f5r7b"},{"post_id":"cjl7q8ki1000jl8lrplbt0spm","tag_id":"cjl7q8khp0005l8lrh9gosv3w","_id":"cjl7q8kib000vl8lrv5mmasl3"},{"post_id":"cjl7q8khr0008l8lr41vmctkr","tag_id":"cjl7q8ki3000ll8lrufdcnslu","_id":"cjl7q8kic000zl8lrnfjvb4hp"},{"post_id":"cjl7q8khr0008l8lr41vmctkr","tag_id":"cjl7q8ki8000tl8lrdxcm10l0","_id":"cjl7q8kid0011l8lrkkm3vod7"},{"post_id":"cjl7q8kht0009l8lrswd44z39","tag_id":"cjl7q8kic000yl8lr2xrp6t9c","_id":"cjl7q8kie0017l8lrxigj6m7j"},{"post_id":"cjl7q8kht0009l8lrswd44z39","tag_id":"cjl7q8kid0012l8lr60fqd3h1","_id":"cjl7q8kif001al8lrolaz9uzi"},{"post_id":"cjl7q8khv000dl8lr3w7osmi1","tag_id":"cjl7q8kie0015l8lr67ddn35a","_id":"cjl7q8kih001hl8lrbh1np688"},{"post_id":"cjl7q8khv000dl8lr3w7osmi1","tag_id":"cjl7q8kif001bl8lr27pydnq2","_id":"cjl7q8kih001kl8lroyrsejz6"},{"post_id":"cjl7q8khy000el8lrmt2e5er4","tag_id":"cjl7q8kic000yl8lr2xrp6t9c","_id":"cjl7q8kij001rl8lr9dw153c5"},{"post_id":"cjl7q8khy000el8lrmt2e5er4","tag_id":"cjl7q8kid0012l8lr60fqd3h1","_id":"cjl7q8kik001sl8lrdwa8wgx2"},{"post_id":"cjl7q8ki5000nl8lrqh59jt38","tag_id":"cjl7q8kij001pl8lrhgzd7r6r","_id":"cjl7q8kik001wl8lrzgcx4cky"},{"post_id":"cjl7q8ki6000pl8lr86ig9tyy","tag_id":"cjl7q8kik001ul8lrdlut8zf0","_id":"cjl7q8kil001zl8lrc8shreoc"}],"Tag":[{"name":"Python","_id":"cjl7q8khp0005l8lrh9gosv3w"},{"name":"tools","_id":"cjl7q8khu000bl8lr9sy3jp60"},{"name":"效率工具","_id":"cjl7q8khz000hl8lrjt6fw5oj"},{"name":"Shell","_id":"cjl7q8ki3000ll8lrufdcnslu"},{"name":"Linux","_id":"cjl7q8ki8000tl8lrdxcm10l0"},{"name":"Git","_id":"cjl7q8kic000yl8lr2xrp6t9c"},{"name":"版本控制","_id":"cjl7q8kid0012l8lr60fqd3h1"},{"name":"bat","_id":"cjl7q8kie0015l8lr67ddn35a"},{"name":"Windows","_id":"cjl7q8kif001bl8lr27pydnq2"},{"name":"test","_id":"cjl7q8kij001pl8lrhgzd7r6r"},{"name":"Oracle","_id":"cjl7q8kik001ul8lrdlut8zf0"}]}}